{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/pic.png","path":"pic.png","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/alipay.png","path":"alipay.png","modified":1,"renderable":0},{"_id":"source/wechatpay.png","path":"wechatpay.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"86ef539895600e9169e1f99a66d7f8638f1b0731","modified":1491892589000},{"_id":"source/CNAME","hash":"2318763188ad55198aa23388575405546821e276","modified":1491892409000},{"_id":"source/favicon.ico","hash":"6f87159d3797bffe219eeedfd2057e94578cf6dc","modified":1491892409000},{"_id":"source/pic.png","hash":"fcdfd8ae26fcf9a05c3776b2d28fc664aea9f4c9","modified":1491892409000},{"_id":"source/robots.txt","hash":"db899123e7308a12dc6cb9646c93537db6b6beba","modified":1491892409000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1489728158000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1459142705000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1489728158000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1489728158000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1459142705000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1489728158000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1459142705000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1489728158000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1489728158000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1489728158000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1489728158000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1459142705000},{"_id":"themes/next/_config.yml","hash":"0f8c9d0e103f2a145c654115c816320b88a3c8b3","modified":1491892601000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1489728158000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1489728158000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1489728158000},{"_id":"source/alipay.png","hash":"ecf8fc3905c058486e04c89e7d506a7e4c6d0ad0","modified":1491891492000},{"_id":"source/wechatpay.png","hash":"7f20ebc96c3a306f48adff74d171f30f5957d6ae","modified":1491891672000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1491892409000},{"_id":"source/_posts/Git到CocoaPods看我就够了.md","hash":"e5c34006d8ebc0b230b97e974439f28225927e4a","modified":1491892409000},{"_id":"source/_posts/MAC-重置MySQL-root-密码.md","hash":"b74cd18bfaad4f0ef4d44dcce32c390c4e55c51d","modified":1491892409000},{"_id":"source/_posts/Module-version-mismatch.md","hash":"62e1b2e24d31e7341a01456bc147b053bbb227fb","modified":1491892409000},{"_id":"source/_posts/hexo换了电脑处理方法.md","hash":"010cf8304bab7507c072a4c1d35f65ac9094cd2c","modified":1491892409000},{"_id":"source/_posts/hexo自定义域名.md","hash":"60a470a3449f635219d14c7c473b00f53cc6a71b","modified":1491892409000},{"_id":"source/_posts/iOS-WebView设置cookie.md","hash":"08b29576e68988b53fd0fffaefcad016612de5c4","modified":1491892409000},{"_id":"source/_posts/iOS-static-const-extern-用法技巧.md","hash":"57f6a6367576d9c1ba960526ea3365a08bd7457c","modified":1491892409000},{"_id":"source/_posts/iOS之Safari之添加到主屏幕应用.md","hash":"757bfa4bf2aef361bf6002d92bc63e7f536dbeed","modified":1491892409000},{"_id":"source/_posts/iOS线程之GCD初探.md","hash":"258b6b185762f397a329cede267c6192085e5bae","modified":1491892409000},{"_id":"source/_posts/iOS线程之NSOperation.md","hash":"d736fa7540da6ed6a51e7b2b9b0d38654aed1060","modified":1491892409000},{"_id":"source/_posts/iOS线程之NSThread.md","hash":"11d407fd8a576826e499074830015dc6a2d76dca","modified":1491892409000},{"_id":"source/_posts/iOS自动化打包第一步.md","hash":"60cf295c69edcbbd99b81e060c90a522f26401fd","modified":1491892409000},{"_id":"source/_posts/iOS证书过期解决方案.md","hash":"63749d6abf34744bdbe3ce7473cc7d8a698005f2","modified":1491892409000},{"_id":"source/_posts/iOS高级开发runtime那点事实战（1）.md","hash":"9cda4d6185c95826991ded26a5d41dff4889339d","modified":1491892409000},{"_id":"source/_posts/iOS高级开发runtime那点事实战（2）.md","hash":"ce37a5bbeb988a3c7277b29a19147005b038d66f","modified":1491892409000},{"_id":"source/_posts/iOS高级开发runtime那点事实战（3）.md","hash":"8a5d43c4adbc8a189e126a56cf4c9772c6e96925","modified":1491892409000},{"_id":"source/_posts/iOS高级开发runtime那点事实战（4）.md","hash":"513946e413feb5cf168e6b8ae322143de8139d4b","modified":1491892409000},{"_id":"source/_posts/微信小程序_01.md","hash":"79a56e1f1461ad76e9af5f63ebdad1fdc61fa1f9","modified":1491892409000},{"_id":"source/_posts/微信小程序_02.md","hash":"0dbc6aaf0a00a8af943f23a035d8a2cf1db34486","modified":1491892409000},{"_id":"source/about/index.md","hash":"4c315044666f3a49092b6e315e37cd21bae86dc2","modified":1491892409000},{"_id":"source/categories/index.md","hash":"9a9a5a016abcae19c3531f83e239d293dcd288c7","modified":1491892409000},{"_id":"source/tags/index.md","hash":"18886315caee743f5a79fc07d86e30ec365475b3","modified":1491892409000},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"312382290f4f71e7fb7f00449fb529fce3b8ec95","modified":1489728382000},{"_id":"themes/next/.git/FETCH_HEAD","hash":"3c9f55a63e932624c86c95e2259a14e17195ed84","modified":1489744743000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1459142705000},{"_id":"themes/next/.git/ORIG_HEAD","hash":"31c8480c3309082b1a93e75991e63bb0cffdd7a9","modified":1489728158000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1459142705000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1459142640000},{"_id":"themes/next/.git/index","hash":"976edfc86baba250641b4d8450d51426ad0cb25b","modified":1490238027000},{"_id":"themes/next/.git/packed-refs","hash":"803de91c997fa2ebce5790b082a140e770a68b4a","modified":1459142705000},{"_id":"themes/next/.git/sourcetreeconfig","hash":"fe2f4e4a42cd83864d16b42d4f7e2a236245a25c","modified":1490260071000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1459142705000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1489728158000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1489728158000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1489728158000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1489728158000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1489728158000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1489728158000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1489728158000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1489728158000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1489728158000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1489728158000},{"_id":"themes/next/languages/ru.yml","hash":"7462c3017dae88e5f80ff308db0b95baf960c83f","modified":1489728158000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1489728158000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1489728158000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1489728158000},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1489728158000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1459142705000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1459142705000},{"_id":"themes/next/layout/index.swig","hash":"11b7ad9d8b83137646f0f28e0c3dcde803117179","modified":1490061066000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1489728158000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1489979472000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1489728158000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1459142705000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1489728158000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1489728158000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1489728158000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1459142705000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1459142705000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459142705000},{"_id":"source/_posts/debug.log","hash":"282bdf5057d8d2477153653c9d1ef4b067282bf6","modified":1491892409000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1459142640000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1459142640000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1459142640000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1459142640000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1459142640000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1459142640000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1459142640000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1459142640000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1459142640000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1459142640000},{"_id":"themes/next/.git/logs/HEAD","hash":"d90a1d720af683e705f887d73c8c75b417272656","modified":1489728378000},{"_id":"themes/next/.git/refs/stash","hash":"e71010e8099852513608244e6eee3c210eb36c2e","modified":1489728150000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1489728158000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1489728158000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1489728158000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1489728158000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1489728158000},{"_id":"themes/next/layout/_macro/post.swig","hash":"cf0e192eedaa1a1bbbab9e7a7e6979c4e24cda31","modified":1489728158000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1489728158000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1489728158000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1489728158000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1489728158000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1459142705000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1489728158000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1489728158000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1489728158000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1459142705000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1489728158000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1489728158000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1459142705000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1459142705000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1489728158000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1489728158000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1459142705000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1489728158000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1489728158000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1489728158000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1459142705000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1459142705000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1489728158000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1489728158000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1459142705000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1459142705000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1459142705000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1459142705000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1459142705000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1459142705000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1459142705000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1459142705000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1459142705000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1459142705000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1459142705000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1459142705000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459142705000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459142705000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459142705000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459142705000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459142705000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459142705000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459142705000},{"_id":"themes/next/.git/logs/refs/stash","hash":"9b189e48d93e42c44b825418c573cb941b19f3fc","modified":1489728150000},{"_id":"themes/next/.git/objects/08/d01d1900f82abbfee922e366d36957a7146412","hash":"475ee14a7375226e47c9bab8e102a7a0808ce95f","modified":1489723352000},{"_id":"themes/next/.git/objects/17/63897b85e1074aa24de96178335aa8bb73ed85","hash":"4092db9997f07c6b9a0e906640c035d6079da763","modified":1489728150000},{"_id":"themes/next/.git/objects/21/83c8bec517c1b8a7479c4bda1c68888fd73181","hash":"178a68a2ff646a8fd1e2e69e0d7e48c5f03aae3e","modified":1489728372000},{"_id":"themes/next/.git/objects/35/40ab981352a61d9279f0594b99c35aa3e9a59d","hash":"b28d0aae0333782a7f1d9fe0979a2842ea465a17","modified":1489728150000},{"_id":"themes/next/.git/objects/45/8c2c4483455ea65e925fc2b3c5ee53c99a2556","hash":"108503f7df654108c246d5e77009e6321d404daf","modified":1489728390000},{"_id":"themes/next/.git/objects/6f/5ea101daf6935a9e5cf21a2d642cef6401abea","hash":"dba5cf95fd7ebff1906bc01d4862b73beb93a8cf","modified":1489728055000},{"_id":"themes/next/.git/objects/76/83b9690704a6c38ebda40d371dee08dc7c7040","hash":"d4e669d0f4a4dd7e5aeeb3436acd6739be03ade1","modified":1489728150000},{"_id":"themes/next/.git/objects/a2/4a5494ca49ab11b090df7b6494250824a2bd48","hash":"48e0111212c9257b3a731a3dd70dbe4d963d2a35","modified":1489728378000},{"_id":"themes/next/.git/objects/a3/58fc3884fa450f59bb18900dc6eb857df2136a","hash":"9dc9c3d8110f12a159185744f4c6535a69ab6ee7","modified":1489728159000},{"_id":"themes/next/.git/objects/a3/d6574118bd4d746a3afdfbd11c449ffe47dd76","hash":"60f0c9645d42972e555339d8d4c687045ca59f18","modified":1489723352000},{"_id":"themes/next/.git/objects/af/6411c3762f532c19883883121dd757be4761c0","hash":"453f89c6e94ce806cf5f6c92877387f911a5ee28","modified":1489723345000},{"_id":"themes/next/.git/objects/ed/02fba0fe15f3c6b64e8a599cc7cc49a2687a43","hash":"65dc0d60ffabf952dac016a1ab2cbda60b0cb328","modified":1489728378000},{"_id":"themes/next/.git/refs/heads/master","hash":"35aee3279f469136a3d16e536d74ace51dddd376","modified":1489728378000},{"_id":"themes/next/.git/refs/tags/v5.0.0","hash":"3db07998a600b0c7d7d15359cb4ef808b6ec8648","modified":1489723278000},{"_id":"themes/next/.git/refs/tags/v5.0.1","hash":"4bd3aae6c4ad63fce23f9306572ecd3961d58a03","modified":1489723278000},{"_id":"themes/next/.git/refs/tags/v5.1.0","hash":"7ec0539e56966d1eaf8b88c1d27165c1f7dfacf5","modified":1489723278000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1489728158000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1489728158000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1489728158000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1489728158000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1489728158000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1459142705000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1459142705000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1489728158000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1489728158000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1459142705000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1459142705000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1489728158000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1459142705000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/exturl.swig","hash":"8e20dd2078d7dfdf4a5a6daa142bb94d002300f5","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1459142705000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1459142705000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1489728158000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1489728158000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1459142705000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1489728158000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1489728158000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1459142705000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1489728158000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1489728158000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1489728158000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1459142705000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1459142705000},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1489728158000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1459142705000},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1489728158000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1489728158000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1489728158000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1489728159000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1489728159000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1489728159000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1489728159000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1489728159000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1489728159000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1489728159000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1489728159000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1489728159000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1489728159000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1489728159000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1489728159000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1489728159000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1489728159000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1489728159000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1489728159000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1489728159000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1489728159000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1489728159000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1489728159000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1489728159000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1489728159000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1489728159000},{"_id":"themes/next/.git/objects/pack/pack-c700169cfd08ac1a2672ea588ac13319c3881c24.idx","hash":"db45f8fa65bac874faad461abc9cfd3d8516eb00","modified":1489723278000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1489728159000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"d90a1d720af683e705f887d73c8c75b417272656","modified":1489728378000},{"_id":"themes/next/.git/objects/pack/pack-c963d6e6e91e93764dd65d10429fe19c2d4af59f.idx","hash":"86cfb55c71aeec9c6caf28c25df915e940da2639","modified":1459142705000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1459142705000},{"_id":"themes/next/.git/refs/remotes/origin/dev","hash":"41ab21bbe0d88c2cc439c0af33807af4e95aef31","modified":1489723278000},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"533ae954cefa2c28a5098c31d0004dfe28d1b399","modified":1489723278000},{"_id":"themes/next/.git/refs/remotes/origin/servant","hash":"ef782ed0a10f674b67007a00f9c1ea910fee93a3","modified":1489723278000},{"_id":"themes/next/.git/refs/remotes/origin/testing","hash":"15660a56eaab85fc3fd3324de8d61dbc2b09b42a","modified":1489723278000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1459142705000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1489728158000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1459142705000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1459142705000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1489728158000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1489728158000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1459142705000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1459142705000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1489728158000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1459142705000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1459142705000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1459142705000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1459142705000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1489728158000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1459142705000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1489728158000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1489728158000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1459142705000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1489728158000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1459142705000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1489728158000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1489728158000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"1eb34b9c1f6d541605ff23333eeb133e1c4daf17","modified":1489728158000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1489728158000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1459142705000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1489728158000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1489728158000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1489728158000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489728159000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489728159000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489728159000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489728159000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489728159000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489728159000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1489728159000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1489728159000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1489728159000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1489728159000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1489728159000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1489728159000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1489728159000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1489728158000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1489728159000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1489728159000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1489728158000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1489728158000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1489728159000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"2310ffef15a9b511c98fa34e55bbe566a8d023a2","modified":1459142705000},{"_id":"themes/next/.git/logs/refs/remotes/origin/dev","hash":"febda3c9638a0665664716f64c9e6fc8bf0f8787","modified":1489723278000},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"53ea2707971537a03ae666798da468f825a95d23","modified":1489723278000},{"_id":"themes/next/.git/logs/refs/remotes/origin/servant","hash":"78d0f3e95bac118fb98d3c03dd3eec74bd1ad40e","modified":1489723278000},{"_id":"themes/next/.git/logs/refs/remotes/origin/testing","hash":"d158c9c03f96934fa1a3a23492d26fa7eddb0657","modified":1489723278000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1489728159000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1459142705000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1489728158000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1489728158000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1459142705000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1489728158000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1489728158000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489728159000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1489728159000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1489728159000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1489728159000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1489728159000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1489728159000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1489728158000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1489728158000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1489728159000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1489728158000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1489728158000},{"_id":"themes/next/.git/objects/pack/pack-c700169cfd08ac1a2672ea588ac13319c3881c24.pack","hash":"88ab1b57777a9f471384eb5f98d4332662ad3e00","modified":1489728378000},{"_id":"themes/next/.git/objects/pack/pack-c963d6e6e91e93764dd65d10429fe19c2d4af59f.pack","hash":"4f3c8d939a608914a64e822e3df8e2cc2b00acac","modified":1489728378000}],"Category":[{"name":"Git","_id":"cj1d6dj5z000mnhmffn32tzhf"},{"name":"iOS","_id":"cj1d6dj6h000onhmfq4hm7oo1"},{"name":"建站","_id":"cj1d6dj6i000qnhmfwfv0ey75"},{"name":"微信小程序","_id":"cj1d6dj6z001inhmfr358herf"}],"Data":[],"Page":[{"title":"about","date":"2016-01-19T06:38:56.000Z","_content":"\n### 资料分享\nhttps://github.com/ifgyong/iOSDataFactory \n各种iOS学习资料整理，欢迎一起学习！长期更新。\n包含资料:\n\n\t\t  \t 1.CFNetWork编程指南\n               2.Blosks编程要点\n               3.JS和OC交互\n               4.OpenGL资料\n               5.Swift3.0\n               6.iOS核心动画\n               7.图像识别技术\n               8.多线程编程指南\n               10.性能优化\n               11.相机与滤镜\n               12.算法的乐趣\n现在用不着，收藏了，以后再用。欢迎Start,你的start就是我更新的动力。\n","source":"about/index.md","raw":"title: about\ndate: 2016-01-19 14:38:56\n---\n\n### 资料分享\nhttps://github.com/ifgyong/iOSDataFactory \n各种iOS学习资料整理，欢迎一起学习！长期更新。\n包含资料:\n\n\t\t  \t 1.CFNetWork编程指南\n               2.Blosks编程要点\n               3.JS和OC交互\n               4.OpenGL资料\n               5.Swift3.0\n               6.iOS核心动画\n               7.图像识别技术\n               8.多线程编程指南\n               10.性能优化\n               11.相机与滤镜\n               12.算法的乐趣\n现在用不着，收藏了，以后再用。欢迎Start,你的start就是我更新的动力。\n","updated":"2017-04-11T06:33:29.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj1d6dj3l0000nhmfvrhm3ktb","content":"<h3 id=\"u8D44_u6599_u5206_u4EAB\"><a href=\"#u8D44_u6599_u5206_u4EAB\" class=\"headerlink\" title=\"资料分享\"></a>资料分享</h3><p><a href=\"https://github.com/ifgyong/iOSDataFactory\" target=\"_blank\" rel=\"external\">https://github.com/ifgyong/iOSDataFactory</a><br>各种iOS学习资料整理，欢迎一起学习！长期更新。<br>包含资料:</p>\n<pre><code>1.CFNetWork编程指南\n2.Blosks编程要点\n3.JS和OC交互\n4.OpenGL资料\n5.Swift3.0\n6.iOS核心动画\n7.图像识别技术\n8.多线程编程指南\n10.性能优化\n11.相机与滤镜\n12.算法的乐趣\n</code></pre><p>现在用不着，收藏了，以后再用。欢迎Start,你的start就是我更新的动力。</p>\n","excerpt":"","more":"<h3 id=\"u8D44_u6599_u5206_u4EAB\"><a href=\"#u8D44_u6599_u5206_u4EAB\" class=\"headerlink\" title=\"资料分享\"></a>资料分享</h3><p><a href=\"https://github.com/ifgyong/iOSDataFactory\">https://github.com/ifgyong/iOSDataFactory</a><br>各种iOS学习资料整理，欢迎一起学习！长期更新。<br>包含资料:</p>\n<pre><code>1.CFNetWork编程指南\n2.Blosks编程要点\n3.JS和OC交互\n4.OpenGL资料\n5.Swift3.0\n6.iOS核心动画\n7.图像识别技术\n8.多线程编程指南\n10.性能优化\n11.相机与滤镜\n12.算法的乐趣\n</code></pre><p>现在用不着，收藏了，以后再用。欢迎Start,你的start就是我更新的动力。</p>\n"},{"title":"分类","date":"2016-01-19T06:34:37.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"title: 分类\ndate: 2016-01-19 14:34:37\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-04-11T06:33:29.000Z","path":"categories/index.html","layout":"page","_id":"cj1d6dj3r0002nhmfhhw77125","content":"","excerpt":"","more":""},{"title":"Tagcloud","date":"2016-01-19T03:44:05.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: Tagcloud\ndate: 2016-01-19 11:44:05\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-04-11T06:33:29.000Z","path":"tags/index.html","layout":"page","_id":"cj1d6dj3u0004nhmf9o2e9iwo","content":"","excerpt":"","more":""}],"Post":[{"title":"Git到CocoaPods看我就够了","date":"2016-04-22T08:39:24.000Z","_content":"### 看了这篇文章你可能\n+ 学会Git基本使用\n+ 学会在mac上装CocoaPods\n+ 提交代码到CocoaPods\n+ 代码在CocoaPods的版本迭代\n\n### git 基本使用\n在[github](https://github.com)注册账号,然后新建仓库，\n```\ngit clone git@github.com:ifgyong/FYAlbum.git\n//这里git仓库地址分为https和ssh两种，我是用的ssh的地址。\n```\n\n然后 `cd FYAlbum/`目录.这个目录就是仓库了，连着github的地址的仓库。\n\n```\ngit branch -l //查看所有分支\ngit branch 'branchName' 新建本地分支\ngit status //查看文件状态，哪个修改的会显示出来的\ngit add .  //添加所有文件到缓存\ngit commit -m '注释' //把添加到缓存的文件提交到本地 仓库\ngit push origin master //提交本地的master到远程仓库。\ngit tag 'tagName' 设置一个tag\ngit push --tags //把本地 的tags推送到远程仓库\ngit tag  //tag 列表\ngit log //git的日志，每次修改的记录\n\ngit config --global user.name \"YOUR NAME\" //配置全局的name\ngit config --global user.email \"YOUR EMAIL ADDRESS\" //配置全局的email\n以后每次提交的时候都是会用这个账号。\n单独为某个仓库配置账号的时候去掉`--glocal`\n就是\ngit config   user.name \"YOUR NAME\" //配置 name\ngit config   user.email \"YOUR EMAIL ADDRESS\" //配置 email\n\ngit config -l //查看配置\n\n合并分支：\ngit checkout -b dev \n//创建并切换到dev分支 相当于 git branch dev gitcheckout dev 两条命令\n git merge dev //将dev分支合并到当前分支\n这种方式叫快速合并。\ngit branch -d dev //删除分支\n\n用git log --graph命令可以看到分支合并图。\n\n git merge dev --no-ff// 后边加上`--no-ff`是合并的时候有历史记录，比较稳定。\n当然在合并的时候有冲突怎么办？\n\n解决冲突：\ngit status//查看文件状态  冲突文件在这里会有显示的\n\ngit diff 文件一  文件二  //对比两个文件，哪个有问题修改哪个。\n\n修改完成之后就可以合并了。` git merge dev --no-ff`\n\n别人提交的文件更新到本地：\ngit pull \n\n在每个操作后边可以加上 `--verbose`可以观看过程，就是日志了。\n暂时一般常用的就这么多了。\n```\n\n### 在mac上装CocoaPods\n\n```\nsudo gem install cocoapods\n```\n搜索第三方库\n```\npod search AFNetworking\n```\n\n装好了pod 直接`cd /user/工作目录`,新建`Podfile`文件\n\n```\npod init\n```\n新建Podfile\n```\nvi Podfile\n```\n修改podfile文件内容\n```\nplatform :ios, '8.0'\nuse_frameworks!\ntarget 'MyApp' do\n  pod 'AFNetworking', '~> 2.6'\n  pod 'ORStackView', '~> 3.0'\n  pod 'SwiftyJSON', '~> 2.3'\nend\n上边的AFNetworking，ORStackView，SwiftyJSON 都是名字，后边是版本号。\n```\n修改完之后保存\n```\n：wq\n```\n\n```\npod setup ///初始化pod仓库\npod update //更新仓库\n```\n### 提交代码到CocoaPods\n#### 注册trunk \n具体步骤看[这里：](https://guides.cocoapods.org/making/getting-setup-with-trunk.html)\n```\npod trunk register fgyong@fgyong.cn 'fgyong' --verbose\n```\n然后检查注册成功了没\n```\npod trunk me\n成功应该是这样的：\n- Name: fgyong \n- Email: fgyong@fgyong.cn\n - Since: xxxxxxx \n- Pods:  \n- Sessions: - xxxxxx \n```\n#### [配置Podspec](https://guides.cocoapods.org/syntax/podspec.html)\n```\npod spec create FYong//新建podSpec文件\n\nvi FYong.podspec //用vi 打开\n\n```\n里面有很多注释，你可以把需要的填写一下或者复制我的修改一下就可以用了。\n文件里面的必要是属性：\n```\nPod::Spec.new do |s|\n\n  s.name          = \"FYAlbum\"\n  s.version       = \"1.0.1\"\n  s.license       = \"MIT\"\n  s.summary       = \"Fast encryption string used on iOS, which implement by Objective-C.\"\n  s.homepage      = \"https://github.com/ifgyong/FYAlbum\"\n  s.author        = { \"fgyong\" => \"fgyong@yeah.net\" } \n  s.source        = { :git => \"https://github.com/ifgyong/FYAlbum.git\", :tag => s.version }\n  s.requires_arc  = true           \n   s.source_files  = \"FYAlbum/*/*\"\n   s.platform      = :ios, '8.0'        \n   s.framework     = 'Foundation', 'UIKit'  \nend\n```\n上边的`s.source_files`容易出错，这个路径是相对于podspec的文件路径。`FYAbul/*`代表FYAbul一级目录下所有文件`FYAlbum/*/*`代表FYAlbum一级和二级目录下所有文件。\n+ tag 和s.version要对应的，不然报错的。\n+ framework直接写上名字就好了。\n+ license是证书类型哦\n\n做完这些可以给仓库打上tag 和version了\n```\ngit tag 1.0.0 // 加上tag\ngit push --tags//推到remote\n```\n```\npod spec lint --verbose  //验证是否成功\npod lib lint --verbose      //验证是否成功\ngit trunk push FYong.spec --verbose //将文件和配置推到trunk上面\n```\n现在验证pod秒就ok了，等到成功了，直接`pod search FYong`就出现了。大功告成！！！\n###   代码在CocoaPods的版本迭代\n中间验证的时候，你的工程修改文件了，那么这个tag要修改才可以了，否则即使你修改了文件也报同样的错误！！！具体的要求看[这里](https://guides.cocoapods.org/)\n```\ngit tag 1.0.1\ngit push --tags\n修改FYong.spec 文件里边的`s.version = 1.0.1`\ngit trunk push FYong.spec --verbose //将文件和配置推到trunk上面\n这次就可以成功了！！！\n```\n我参考的博文：\n+ [廖雪峰](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n+ [guides.cocoapods.org](https://guides.cocoapods.org)\n+ [【原】iOS：手把手教你发布代码到CocoaPods(Trunk方式)](http://www.cnblogs.com/wengzilin/p/4742530.html)\n\n基本到这里就结束了，是不是还是感觉意犹未尽啊！\n有什么问题欢迎留言啊！\n[我的项目](https://github.com/ifgyong/FYAlbum),如果觉得不错，欢迎✨啊。\n 欢迎来吐槽啊！！！\n","source":"_posts/Git到CocoaPods看我就够了.md","raw":"title: Git到CocoaPods看我就够了\ndate: 2016-04-22 16:39:24\ntags: Git\ncategories: Git\n---\n### 看了这篇文章你可能\n+ 学会Git基本使用\n+ 学会在mac上装CocoaPods\n+ 提交代码到CocoaPods\n+ 代码在CocoaPods的版本迭代\n\n### git 基本使用\n在[github](https://github.com)注册账号,然后新建仓库，\n```\ngit clone git@github.com:ifgyong/FYAlbum.git\n//这里git仓库地址分为https和ssh两种，我是用的ssh的地址。\n```\n\n然后 `cd FYAlbum/`目录.这个目录就是仓库了，连着github的地址的仓库。\n\n```\ngit branch -l //查看所有分支\ngit branch 'branchName' 新建本地分支\ngit status //查看文件状态，哪个修改的会显示出来的\ngit add .  //添加所有文件到缓存\ngit commit -m '注释' //把添加到缓存的文件提交到本地 仓库\ngit push origin master //提交本地的master到远程仓库。\ngit tag 'tagName' 设置一个tag\ngit push --tags //把本地 的tags推送到远程仓库\ngit tag  //tag 列表\ngit log //git的日志，每次修改的记录\n\ngit config --global user.name \"YOUR NAME\" //配置全局的name\ngit config --global user.email \"YOUR EMAIL ADDRESS\" //配置全局的email\n以后每次提交的时候都是会用这个账号。\n单独为某个仓库配置账号的时候去掉`--glocal`\n就是\ngit config   user.name \"YOUR NAME\" //配置 name\ngit config   user.email \"YOUR EMAIL ADDRESS\" //配置 email\n\ngit config -l //查看配置\n\n合并分支：\ngit checkout -b dev \n//创建并切换到dev分支 相当于 git branch dev gitcheckout dev 两条命令\n git merge dev //将dev分支合并到当前分支\n这种方式叫快速合并。\ngit branch -d dev //删除分支\n\n用git log --graph命令可以看到分支合并图。\n\n git merge dev --no-ff// 后边加上`--no-ff`是合并的时候有历史记录，比较稳定。\n当然在合并的时候有冲突怎么办？\n\n解决冲突：\ngit status//查看文件状态  冲突文件在这里会有显示的\n\ngit diff 文件一  文件二  //对比两个文件，哪个有问题修改哪个。\n\n修改完成之后就可以合并了。` git merge dev --no-ff`\n\n别人提交的文件更新到本地：\ngit pull \n\n在每个操作后边可以加上 `--verbose`可以观看过程，就是日志了。\n暂时一般常用的就这么多了。\n```\n\n### 在mac上装CocoaPods\n\n```\nsudo gem install cocoapods\n```\n搜索第三方库\n```\npod search AFNetworking\n```\n\n装好了pod 直接`cd /user/工作目录`,新建`Podfile`文件\n\n```\npod init\n```\n新建Podfile\n```\nvi Podfile\n```\n修改podfile文件内容\n```\nplatform :ios, '8.0'\nuse_frameworks!\ntarget 'MyApp' do\n  pod 'AFNetworking', '~> 2.6'\n  pod 'ORStackView', '~> 3.0'\n  pod 'SwiftyJSON', '~> 2.3'\nend\n上边的AFNetworking，ORStackView，SwiftyJSON 都是名字，后边是版本号。\n```\n修改完之后保存\n```\n：wq\n```\n\n```\npod setup ///初始化pod仓库\npod update //更新仓库\n```\n### 提交代码到CocoaPods\n#### 注册trunk \n具体步骤看[这里：](https://guides.cocoapods.org/making/getting-setup-with-trunk.html)\n```\npod trunk register fgyong@fgyong.cn 'fgyong' --verbose\n```\n然后检查注册成功了没\n```\npod trunk me\n成功应该是这样的：\n- Name: fgyong \n- Email: fgyong@fgyong.cn\n - Since: xxxxxxx \n- Pods:  \n- Sessions: - xxxxxx \n```\n#### [配置Podspec](https://guides.cocoapods.org/syntax/podspec.html)\n```\npod spec create FYong//新建podSpec文件\n\nvi FYong.podspec //用vi 打开\n\n```\n里面有很多注释，你可以把需要的填写一下或者复制我的修改一下就可以用了。\n文件里面的必要是属性：\n```\nPod::Spec.new do |s|\n\n  s.name          = \"FYAlbum\"\n  s.version       = \"1.0.1\"\n  s.license       = \"MIT\"\n  s.summary       = \"Fast encryption string used on iOS, which implement by Objective-C.\"\n  s.homepage      = \"https://github.com/ifgyong/FYAlbum\"\n  s.author        = { \"fgyong\" => \"fgyong@yeah.net\" } \n  s.source        = { :git => \"https://github.com/ifgyong/FYAlbum.git\", :tag => s.version }\n  s.requires_arc  = true           \n   s.source_files  = \"FYAlbum/*/*\"\n   s.platform      = :ios, '8.0'        \n   s.framework     = 'Foundation', 'UIKit'  \nend\n```\n上边的`s.source_files`容易出错，这个路径是相对于podspec的文件路径。`FYAbul/*`代表FYAbul一级目录下所有文件`FYAlbum/*/*`代表FYAlbum一级和二级目录下所有文件。\n+ tag 和s.version要对应的，不然报错的。\n+ framework直接写上名字就好了。\n+ license是证书类型哦\n\n做完这些可以给仓库打上tag 和version了\n```\ngit tag 1.0.0 // 加上tag\ngit push --tags//推到remote\n```\n```\npod spec lint --verbose  //验证是否成功\npod lib lint --verbose      //验证是否成功\ngit trunk push FYong.spec --verbose //将文件和配置推到trunk上面\n```\n现在验证pod秒就ok了，等到成功了，直接`pod search FYong`就出现了。大功告成！！！\n###   代码在CocoaPods的版本迭代\n中间验证的时候，你的工程修改文件了，那么这个tag要修改才可以了，否则即使你修改了文件也报同样的错误！！！具体的要求看[这里](https://guides.cocoapods.org/)\n```\ngit tag 1.0.1\ngit push --tags\n修改FYong.spec 文件里边的`s.version = 1.0.1`\ngit trunk push FYong.spec --verbose //将文件和配置推到trunk上面\n这次就可以成功了！！！\n```\n我参考的博文：\n+ [廖雪峰](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n+ [guides.cocoapods.org](https://guides.cocoapods.org)\n+ [【原】iOS：手把手教你发布代码到CocoaPods(Trunk方式)](http://www.cnblogs.com/wengzilin/p/4742530.html)\n\n基本到这里就结束了，是不是还是感觉意犹未尽啊！\n有什么问题欢迎留言啊！\n[我的项目](https://github.com/ifgyong/FYAlbum),如果觉得不错，欢迎✨啊。\n 欢迎来吐槽啊！！！\n","slug":"Git到CocoaPods看我就够了","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj3n0001nhmf2mnmqd59","content":"<h3 id=\"u770B_u4E86_u8FD9_u7BC7_u6587_u7AE0_u4F60_u53EF_u80FD\"><a href=\"#u770B_u4E86_u8FD9_u7BC7_u6587_u7AE0_u4F60_u53EF_u80FD\" class=\"headerlink\" title=\"看了这篇文章你可能\"></a>看了这篇文章你可能</h3><ul>\n<li>学会Git基本使用</li>\n<li>学会在mac上装CocoaPods</li>\n<li>提交代码到CocoaPods</li>\n<li>代码在CocoaPods的版本迭代</li>\n</ul>\n<h3 id=\"git__u57FA_u672C_u4F7F_u7528\"><a href=\"#git__u57FA_u672C_u4F7F_u7528\" class=\"headerlink\" title=\"git 基本使用\"></a>git 基本使用</h3><p>在<a href=\"https://github.com\" target=\"_blank\" rel=\"external\">github</a>注册账号,然后新建仓库，<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git@github<span class=\"selector-class\">.com</span>:ifgyong/FYAlbum<span class=\"selector-class\">.git</span></div><div class=\"line\"><span class=\"comment\">//这里git仓库地址分为https和ssh两种，我是用的ssh的地址。</span></div></pre></td></tr></table></figure></p>\n<p>然后 <code>cd FYAlbum/</code>目录.这个目录就是仓库了，连着github的地址的仓库。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -l <span class=\"comment\">//查看所有分支</span></div><div class=\"line\">git branch <span class=\"string\">'branchName'</span> 新建本地分支</div><div class=\"line\">git status <span class=\"comment\">//查看文件状态，哪个修改的会显示出来的</span></div><div class=\"line\">git add .  <span class=\"comment\">//添加所有文件到缓存</span></div><div class=\"line\">git commit -m <span class=\"string\">'注释'</span> <span class=\"comment\">//把添加到缓存的文件提交到本地 仓库</span></div><div class=\"line\">git push origin master <span class=\"comment\">//提交本地的master到远程仓库。</span></div><div class=\"line\">git tag <span class=\"string\">'tagName'</span> 设置一个tag</div><div class=\"line\">git push --tags <span class=\"comment\">//把本地 的tags推送到远程仓库</span></div><div class=\"line\">git tag  <span class=\"comment\">//tag 列表</span></div><div class=\"line\">git log <span class=\"comment\">//git的日志，每次修改的记录</span></div><div class=\"line\"></div><div class=\"line\">git config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"YOUR NAME\"</span> <span class=\"comment\">//配置全局的name</span></div><div class=\"line\">git config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"YOUR EMAIL ADDRESS\"</span> <span class=\"comment\">//配置全局的email</span></div><div class=\"line\">以后每次提交的时候都是会用这个账号。</div><div class=\"line\">单独为某个仓库配置账号的时候去掉`--glocal`</div><div class=\"line\">就是</div><div class=\"line\">git config   user<span class=\"selector-class\">.name</span> <span class=\"string\">\"YOUR NAME\"</span> <span class=\"comment\">//配置 name</span></div><div class=\"line\">git config   user<span class=\"selector-class\">.email</span> <span class=\"string\">\"YOUR EMAIL ADDRESS\"</span> <span class=\"comment\">//配置 email</span></div><div class=\"line\"></div><div class=\"line\">git config -l <span class=\"comment\">//查看配置</span></div><div class=\"line\"></div><div class=\"line\">合并分支：</div><div class=\"line\">git checkout -<span class=\"selector-tag\">b</span> dev </div><div class=\"line\"><span class=\"comment\">//创建并切换到dev分支 相当于 git branch dev gitcheckout dev 两条命令</span></div><div class=\"line\"> git merge dev <span class=\"comment\">//将dev分支合并到当前分支</span></div><div class=\"line\">这种方式叫快速合并。</div><div class=\"line\">git branch -d dev <span class=\"comment\">//删除分支</span></div><div class=\"line\"></div><div class=\"line\">用git log --graph命令可以看到分支合并图。</div><div class=\"line\"></div><div class=\"line\"> git merge dev --no-ff<span class=\"comment\">// 后边加上`--no-ff`是合并的时候有历史记录，比较稳定。</span></div><div class=\"line\">当然在合并的时候有冲突怎么办？</div><div class=\"line\"></div><div class=\"line\">解决冲突：</div><div class=\"line\">git status<span class=\"comment\">//查看文件状态  冲突文件在这里会有显示的</span></div><div class=\"line\"></div><div class=\"line\">git diff 文件一  文件二  <span class=\"comment\">//对比两个文件，哪个有问题修改哪个。</span></div><div class=\"line\"></div><div class=\"line\">修改完成之后就可以合并了。` git merge dev --no-ff`</div><div class=\"line\"></div><div class=\"line\">别人提交的文件更新到本地：</div><div class=\"line\">git pull </div><div class=\"line\"></div><div class=\"line\">在每个操作后边可以加上 `--verbose`可以观看过程，就是日志了。</div><div class=\"line\">暂时一般常用的就这么多了。</div></pre></td></tr></table></figure>\n<h3 id=\"u5728mac_u4E0A_u88C5CocoaPods\"><a href=\"#u5728mac_u4E0A_u88C5CocoaPods\" class=\"headerlink\" title=\"在mac上装CocoaPods\"></a>在mac上装CocoaPods</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem <span class=\"keyword\">install</span> cocoapods</div></pre></td></tr></table></figure>\n<p>搜索第三方库<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">pod search AFNetworking</span></div></pre></td></tr></table></figure></p>\n<p>装好了pod 直接<code>cd /user/工作目录</code>,新建<code>Podfile</code>文件</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">pod init</span></div></pre></td></tr></table></figure>\n<p>新建Podfile<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">vi Podfile</span></div></pre></td></tr></table></figure></p>\n<p>修改podfile文件内容<br><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">platform</span> :ios, <span class=\"string\">'8.0'</span></div><div class=\"line\">use_frameworks!</div><div class=\"line\">target <span class=\"string\">'MyApp'</span> <span class=\"keyword\">do</span></div><div class=\"line\">  pod <span class=\"string\">'AFNetworking'</span>, <span class=\"string\">'~&gt; 2.6'</span></div><div class=\"line\">  pod <span class=\"string\">'ORStackView'</span>, <span class=\"string\">'~&gt; 3.0'</span></div><div class=\"line\">  pod <span class=\"string\">'SwiftyJSON'</span>, <span class=\"string\">'~&gt; 2.3'</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\">上边的AFNetworking，ORStackView，SwiftyJSON 都是名字，后边是版本号。</div></pre></td></tr></table></figure></p>\n<p>修改完之后保存<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">：<span class=\"keyword\">wq</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod <span class=\"built_in\">setup</span> <span class=\"comment\">///初始化pod仓库</span></div><div class=\"line\">pod update <span class=\"comment\">//更新仓库</span></div></pre></td></tr></table></figure>\n<h3 id=\"u63D0_u4EA4_u4EE3_u7801_u5230CocoaPods\"><a href=\"#u63D0_u4EA4_u4EE3_u7801_u5230CocoaPods\" class=\"headerlink\" title=\"提交代码到CocoaPods\"></a>提交代码到CocoaPods</h3><h4 id=\"u6CE8_u518Ctrunk\"><a href=\"#u6CE8_u518Ctrunk\" class=\"headerlink\" title=\"注册trunk\"></a>注册trunk</h4><p>具体步骤看<a href=\"https://guides.cocoapods.org/making/getting-setup-with-trunk.html\" target=\"_blank\" rel=\"external\">这里：</a><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">pod</span> <span class=\"selector-tag\">trunk</span> <span class=\"selector-tag\">register</span> <span class=\"selector-tag\">fgyong</span>@<span class=\"keyword\">fgyong</span>.<span class=\"keyword\">cn</span> <span class=\"string\">'fgyong'</span> --verbose</div></pre></td></tr></table></figure></p>\n<p>然后检查注册成功了没<br><figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod trunk me</div><div class=\"line\">成功应该是这样的：</div><div class=\"line\">-<span class=\"ruby\"> <span class=\"symbol\">Name:</span> fgyong </span></div><div class=\"line\">-<span class=\"ruby\"> <span class=\"symbol\">Email:</span> fgyong@fgyong.cn</span></div><div class=\"line\"> -<span class=\"ruby\"> <span class=\"symbol\">Since:</span> xxxxxxx </span></div><div class=\"line\">-<span class=\"ruby\"> <span class=\"symbol\">Pods:</span>  </span></div><div class=\"line\">-<span class=\"ruby\"> <span class=\"symbol\">Sessions:</span> - xxxxxx</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"u914D_u7F6EPodspec\"><a href=\"#u914D_u7F6EPodspec\" class=\"headerlink\" title=\"配置Podspec\"></a><a href=\"https://guides.cocoapods.org/syntax/podspec.html\" target=\"_blank\" rel=\"external\">配置Podspec</a></h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod spec create FYong<span class=\"comment\">//新建podSpec文件</span></div><div class=\"line\"></div><div class=\"line\">vi FYong<span class=\"selector-class\">.podspec</span> <span class=\"comment\">//用vi 打开</span></div></pre></td></tr></table></figure>\n<p>里面有很多注释，你可以把需要的填写一下或者复制我的修改一下就可以用了。<br>文件里面的必要是属性：<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Pod::Spec.new do |s|</div><div class=\"line\"></div><div class=\"line\">  s.<span class=\"attr\">name</span>          = <span class=\"string\">\"FYAlbum\"</span></div><div class=\"line\">  s.<span class=\"attr\">version</span>       = <span class=\"string\">\"1.0.1\"</span></div><div class=\"line\">  s.<span class=\"attr\">license</span>       = <span class=\"string\">\"MIT\"</span></div><div class=\"line\">  s.<span class=\"attr\">summary</span>       = <span class=\"string\">\"Fast encryption string used on iOS, which implement by Objective-C.\"</span></div><div class=\"line\">  s.<span class=\"attr\">homepage</span>      = <span class=\"string\">\"https://github.com/ifgyong/FYAlbum\"</span></div><div class=\"line\">  s.<span class=\"attr\">author</span>        = &#123; <span class=\"string\">\"fgyong\"</span> =&gt; <span class=\"string\">\"fgyong@yeah.net\"</span> &#125; </div><div class=\"line\">  s.<span class=\"attr\">source</span>        = &#123; :<span class=\"attr\">git</span> =&gt; <span class=\"string\">\"https://github.com/ifgyong/FYAlbum.git\"</span>, :<span class=\"attr\">tag</span> =&gt; s.version &#125;</div><div class=\"line\">  s.<span class=\"attr\">requires_arc</span>  = <span class=\"literal\">true</span>           </div><div class=\"line\">   s.<span class=\"attr\">source_files</span>  = <span class=\"string\">\"FYAlbum/*/*\"</span></div><div class=\"line\">   s.<span class=\"attr\">platform</span>      = :ios, '<span class=\"number\">8.0</span>'        </div><div class=\"line\">   s.<span class=\"attr\">framework</span>     = 'Foundation', 'UIKit'  </div><div class=\"line\">end</div></pre></td></tr></table></figure></p>\n<p>上边的<code>s.source_files</code>容易出错，这个路径是相对于podspec的文件路径。<code>FYAbul/*</code>代表FYAbul一级目录下所有文件<code>FYAlbum/*/*</code>代表FYAlbum一级和二级目录下所有文件。</p>\n<ul>\n<li>tag 和s.version要对应的，不然报错的。</li>\n<li>framework直接写上名字就好了。</li>\n<li>license是证书类型哦</li>\n</ul>\n<p>做完这些可以给仓库打上tag 和version了<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">tag</span> <span class=\"title\">1</span>.<span class=\"number\">0.0</span> // 加上<span class=\"keyword\">tag</span></div><div class=\"line\"><span class=\"title\">git</span> push --tags//推到remote</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod spec lint --verbose  <span class=\"comment\">//验证是否成功</span></div><div class=\"line\">pod <span class=\"keyword\">lib</span> lint --verbose      <span class=\"comment\">//验证是否成功</span></div><div class=\"line\">git trunk <span class=\"keyword\">push</span> FYong.spec --verbose <span class=\"comment\">//将文件和配置推到trunk上面</span></div></pre></td></tr></table></figure>\n<p>现在验证pod秒就ok了，等到成功了，直接<code>pod search FYong</code>就出现了。大功告成！！！</p>\n<h3 id=\"u4EE3_u7801_u5728CocoaPods_u7684_u7248_u672C_u8FED_u4EE3\"><a href=\"#u4EE3_u7801_u5728CocoaPods_u7684_u7248_u672C_u8FED_u4EE3\" class=\"headerlink\" title=\"代码在CocoaPods的版本迭代\"></a>代码在CocoaPods的版本迭代</h3><p>中间验证的时候，你的工程修改文件了，那么这个tag要修改才可以了，否则即使你修改了文件也报同样的错误！！！具体的要求看<a href=\"https://guides.cocoapods.org/\" target=\"_blank\" rel=\"external\">这里</a><br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag <span class=\"number\">1.0</span>.<span class=\"number\">1</span></div><div class=\"line\">git push --tags</div><div class=\"line\">修改FYong<span class=\"selector-class\">.spec</span> 文件里边的`s<span class=\"selector-class\">.version</span> = <span class=\"number\">1.0</span>.<span class=\"number\">1</span>`</div><div class=\"line\">git trunk push FYong<span class=\"selector-class\">.spec</span> --verbose <span class=\"comment\">//将文件和配置推到trunk上面</span></div><div class=\"line\">这次就可以成功了！！！</div></pre></td></tr></table></figure></p>\n<p>我参考的博文：</p>\n<ul>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"external\">廖雪峰</a></li>\n<li><a href=\"https://guides.cocoapods.org\" target=\"_blank\" rel=\"external\">guides.cocoapods.org</a></li>\n<li><a href=\"http://www.cnblogs.com/wengzilin/p/4742530.html\" target=\"_blank\" rel=\"external\">【原】iOS：手把手教你发布代码到CocoaPods(Trunk方式)</a></li>\n</ul>\n<p>基本到这里就结束了，是不是还是感觉意犹未尽啊！<br>有什么问题欢迎留言啊！<br><a href=\"https://github.com/ifgyong/FYAlbum\" target=\"_blank\" rel=\"external\">我的项目</a>,如果觉得不错，欢迎✨啊。<br> 欢迎来吐槽啊！！！</p>\n","excerpt":"","more":"<h3 id=\"u770B_u4E86_u8FD9_u7BC7_u6587_u7AE0_u4F60_u53EF_u80FD\"><a href=\"#u770B_u4E86_u8FD9_u7BC7_u6587_u7AE0_u4F60_u53EF_u80FD\" class=\"headerlink\" title=\"看了这篇文章你可能\"></a>看了这篇文章你可能</h3><ul>\n<li>学会Git基本使用</li>\n<li>学会在mac上装CocoaPods</li>\n<li>提交代码到CocoaPods</li>\n<li>代码在CocoaPods的版本迭代</li>\n</ul>\n<h3 id=\"git__u57FA_u672C_u4F7F_u7528\"><a href=\"#git__u57FA_u672C_u4F7F_u7528\" class=\"headerlink\" title=\"git 基本使用\"></a>git 基本使用</h3><p>在<a href=\"https://github.com\">github</a>注册账号,然后新建仓库，<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git@github<span class=\"selector-class\">.com</span>:ifgyong/FYAlbum<span class=\"selector-class\">.git</span></div><div class=\"line\"><span class=\"comment\">//这里git仓库地址分为https和ssh两种，我是用的ssh的地址。</span></div></pre></td></tr></table></figure></p>\n<p>然后 <code>cd FYAlbum/</code>目录.这个目录就是仓库了，连着github的地址的仓库。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -l <span class=\"comment\">//查看所有分支</span></div><div class=\"line\">git branch <span class=\"string\">'branchName'</span> 新建本地分支</div><div class=\"line\">git status <span class=\"comment\">//查看文件状态，哪个修改的会显示出来的</span></div><div class=\"line\">git add .  <span class=\"comment\">//添加所有文件到缓存</span></div><div class=\"line\">git commit -m <span class=\"string\">'注释'</span> <span class=\"comment\">//把添加到缓存的文件提交到本地 仓库</span></div><div class=\"line\">git push origin master <span class=\"comment\">//提交本地的master到远程仓库。</span></div><div class=\"line\">git tag <span class=\"string\">'tagName'</span> 设置一个tag</div><div class=\"line\">git push --tags <span class=\"comment\">//把本地 的tags推送到远程仓库</span></div><div class=\"line\">git tag  <span class=\"comment\">//tag 列表</span></div><div class=\"line\">git log <span class=\"comment\">//git的日志，每次修改的记录</span></div><div class=\"line\"></div><div class=\"line\">git config --global user<span class=\"selector-class\">.name</span> <span class=\"string\">\"YOUR NAME\"</span> <span class=\"comment\">//配置全局的name</span></div><div class=\"line\">git config --global user<span class=\"selector-class\">.email</span> <span class=\"string\">\"YOUR EMAIL ADDRESS\"</span> <span class=\"comment\">//配置全局的email</span></div><div class=\"line\">以后每次提交的时候都是会用这个账号。</div><div class=\"line\">单独为某个仓库配置账号的时候去掉`--glocal`</div><div class=\"line\">就是</div><div class=\"line\">git config   user<span class=\"selector-class\">.name</span> <span class=\"string\">\"YOUR NAME\"</span> <span class=\"comment\">//配置 name</span></div><div class=\"line\">git config   user<span class=\"selector-class\">.email</span> <span class=\"string\">\"YOUR EMAIL ADDRESS\"</span> <span class=\"comment\">//配置 email</span></div><div class=\"line\"></div><div class=\"line\">git config -l <span class=\"comment\">//查看配置</span></div><div class=\"line\"></div><div class=\"line\">合并分支：</div><div class=\"line\">git checkout -<span class=\"selector-tag\">b</span> dev </div><div class=\"line\"><span class=\"comment\">//创建并切换到dev分支 相当于 git branch dev gitcheckout dev 两条命令</span></div><div class=\"line\"> git merge dev <span class=\"comment\">//将dev分支合并到当前分支</span></div><div class=\"line\">这种方式叫快速合并。</div><div class=\"line\">git branch -d dev <span class=\"comment\">//删除分支</span></div><div class=\"line\"></div><div class=\"line\">用git log --graph命令可以看到分支合并图。</div><div class=\"line\"></div><div class=\"line\"> git merge dev --no-ff<span class=\"comment\">// 后边加上`--no-ff`是合并的时候有历史记录，比较稳定。</span></div><div class=\"line\">当然在合并的时候有冲突怎么办？</div><div class=\"line\"></div><div class=\"line\">解决冲突：</div><div class=\"line\">git status<span class=\"comment\">//查看文件状态  冲突文件在这里会有显示的</span></div><div class=\"line\"></div><div class=\"line\">git diff 文件一  文件二  <span class=\"comment\">//对比两个文件，哪个有问题修改哪个。</span></div><div class=\"line\"></div><div class=\"line\">修改完成之后就可以合并了。` git merge dev --no-ff`</div><div class=\"line\"></div><div class=\"line\">别人提交的文件更新到本地：</div><div class=\"line\">git pull </div><div class=\"line\"></div><div class=\"line\">在每个操作后边可以加上 `--verbose`可以观看过程，就是日志了。</div><div class=\"line\">暂时一般常用的就这么多了。</div></pre></td></tr></table></figure>\n<h3 id=\"u5728mac_u4E0A_u88C5CocoaPods\"><a href=\"#u5728mac_u4E0A_u88C5CocoaPods\" class=\"headerlink\" title=\"在mac上装CocoaPods\"></a>在mac上装CocoaPods</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem <span class=\"keyword\">install</span> cocoapods</div></pre></td></tr></table></figure>\n<p>搜索第三方库<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">pod search AFNetworking</span></div></pre></td></tr></table></figure></p>\n<p>装好了pod 直接<code>cd /user/工作目录</code>,新建<code>Podfile</code>文件</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">pod init</span></div></pre></td></tr></table></figure>\n<p>新建Podfile<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">vi Podfile</span></div></pre></td></tr></table></figure></p>\n<p>修改podfile文件内容<br><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">platform</span> :ios, <span class=\"string\">'8.0'</span></div><div class=\"line\">use_frameworks!</div><div class=\"line\">target <span class=\"string\">'MyApp'</span> <span class=\"keyword\">do</span></div><div class=\"line\">  pod <span class=\"string\">'AFNetworking'</span>, <span class=\"string\">'~&gt; 2.6'</span></div><div class=\"line\">  pod <span class=\"string\">'ORStackView'</span>, <span class=\"string\">'~&gt; 3.0'</span></div><div class=\"line\">  pod <span class=\"string\">'SwiftyJSON'</span>, <span class=\"string\">'~&gt; 2.3'</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\">上边的AFNetworking，ORStackView，SwiftyJSON 都是名字，后边是版本号。</div></pre></td></tr></table></figure></p>\n<p>修改完之后保存<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">：<span class=\"keyword\">wq</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod <span class=\"built_in\">setup</span> <span class=\"comment\">///初始化pod仓库</span></div><div class=\"line\">pod update <span class=\"comment\">//更新仓库</span></div></pre></td></tr></table></figure>\n<h3 id=\"u63D0_u4EA4_u4EE3_u7801_u5230CocoaPods\"><a href=\"#u63D0_u4EA4_u4EE3_u7801_u5230CocoaPods\" class=\"headerlink\" title=\"提交代码到CocoaPods\"></a>提交代码到CocoaPods</h3><h4 id=\"u6CE8_u518Ctrunk\"><a href=\"#u6CE8_u518Ctrunk\" class=\"headerlink\" title=\"注册trunk\"></a>注册trunk</h4><p>具体步骤看<a href=\"https://guides.cocoapods.org/making/getting-setup-with-trunk.html\">这里：</a><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">pod</span> <span class=\"selector-tag\">trunk</span> <span class=\"selector-tag\">register</span> <span class=\"selector-tag\">fgyong</span>@<span class=\"keyword\">fgyong</span>.<span class=\"keyword\">cn</span> <span class=\"string\">'fgyong'</span> --verbose</div></pre></td></tr></table></figure></p>\n<p>然后检查注册成功了没<br><figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod trunk me</div><div class=\"line\">成功应该是这样的：</div><div class=\"line\">-<span class=\"ruby\"> <span class=\"symbol\">Name:</span> fgyong </div><div class=\"line\"></span>-<span class=\"ruby\"> <span class=\"symbol\">Email:</span> fgyong@fgyong.cn</div><div class=\"line\"></span> -<span class=\"ruby\"> <span class=\"symbol\">Since:</span> xxxxxxx </div><div class=\"line\"></span>-<span class=\"ruby\"> <span class=\"symbol\">Pods:</span>  </div><div class=\"line\"></span>-<span class=\"ruby\"> <span class=\"symbol\">Sessions:</span> - xxxxxx</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"u914D_u7F6EPodspec\"><a href=\"#u914D_u7F6EPodspec\" class=\"headerlink\" title=\"配置Podspec\"></a><a href=\"https://guides.cocoapods.org/syntax/podspec.html\">配置Podspec</a></h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod spec create FYong<span class=\"comment\">//新建podSpec文件</span></div><div class=\"line\"></div><div class=\"line\">vi FYong<span class=\"selector-class\">.podspec</span> <span class=\"comment\">//用vi 打开</span></div></pre></td></tr></table></figure>\n<p>里面有很多注释，你可以把需要的填写一下或者复制我的修改一下就可以用了。<br>文件里面的必要是属性：<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Pod::Spec.new do |s|</div><div class=\"line\"></div><div class=\"line\">  s.<span class=\"attr\">name</span>          = <span class=\"string\">\"FYAlbum\"</span></div><div class=\"line\">  s.<span class=\"attr\">version</span>       = <span class=\"string\">\"1.0.1\"</span></div><div class=\"line\">  s.<span class=\"attr\">license</span>       = <span class=\"string\">\"MIT\"</span></div><div class=\"line\">  s.<span class=\"attr\">summary</span>       = <span class=\"string\">\"Fast encryption string used on iOS, which implement by Objective-C.\"</span></div><div class=\"line\">  s.<span class=\"attr\">homepage</span>      = <span class=\"string\">\"https://github.com/ifgyong/FYAlbum\"</span></div><div class=\"line\">  s.<span class=\"attr\">author</span>        = &#123; <span class=\"string\">\"fgyong\"</span> =&gt; <span class=\"string\">\"fgyong@yeah.net\"</span> &#125; </div><div class=\"line\">  s.<span class=\"attr\">source</span>        = &#123; :<span class=\"attr\">git</span> =&gt; <span class=\"string\">\"https://github.com/ifgyong/FYAlbum.git\"</span>, :<span class=\"attr\">tag</span> =&gt; s.version &#125;</div><div class=\"line\">  s.<span class=\"attr\">requires_arc</span>  = <span class=\"literal\">true</span>           </div><div class=\"line\">   s.<span class=\"attr\">source_files</span>  = <span class=\"string\">\"FYAlbum/*/*\"</span></div><div class=\"line\">   s.<span class=\"attr\">platform</span>      = :ios, '<span class=\"number\">8.0</span>'        </div><div class=\"line\">   s.<span class=\"attr\">framework</span>     = 'Foundation', 'UIKit'  </div><div class=\"line\">end</div></pre></td></tr></table></figure></p>\n<p>上边的<code>s.source_files</code>容易出错，这个路径是相对于podspec的文件路径。<code>FYAbul/*</code>代表FYAbul一级目录下所有文件<code>FYAlbum/*/*</code>代表FYAlbum一级和二级目录下所有文件。</p>\n<ul>\n<li>tag 和s.version要对应的，不然报错的。</li>\n<li>framework直接写上名字就好了。</li>\n<li>license是证书类型哦</li>\n</ul>\n<p>做完这些可以给仓库打上tag 和version了<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">tag</span> <span class=\"title\">1</span>.<span class=\"number\">0.0</span> // 加上<span class=\"keyword\">tag</span></div><div class=\"line\"><span class=\"title\">git</span> push --tags//推到remote</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod spec lint --verbose  <span class=\"comment\">//验证是否成功</span></div><div class=\"line\">pod <span class=\"keyword\">lib</span> lint --verbose      <span class=\"comment\">//验证是否成功</span></div><div class=\"line\">git trunk <span class=\"keyword\">push</span> FYong.spec --verbose <span class=\"comment\">//将文件和配置推到trunk上面</span></div></pre></td></tr></table></figure>\n<p>现在验证pod秒就ok了，等到成功了，直接<code>pod search FYong</code>就出现了。大功告成！！！</p>\n<h3 id=\"u4EE3_u7801_u5728CocoaPods_u7684_u7248_u672C_u8FED_u4EE3\"><a href=\"#u4EE3_u7801_u5728CocoaPods_u7684_u7248_u672C_u8FED_u4EE3\" class=\"headerlink\" title=\"代码在CocoaPods的版本迭代\"></a>代码在CocoaPods的版本迭代</h3><p>中间验证的时候，你的工程修改文件了，那么这个tag要修改才可以了，否则即使你修改了文件也报同样的错误！！！具体的要求看<a href=\"https://guides.cocoapods.org/\">这里</a><br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag <span class=\"number\">1.0</span>.<span class=\"number\">1</span></div><div class=\"line\">git push --tags</div><div class=\"line\">修改FYong<span class=\"selector-class\">.spec</span> 文件里边的`s<span class=\"selector-class\">.version</span> = <span class=\"number\">1.0</span>.<span class=\"number\">1</span>`</div><div class=\"line\">git trunk push FYong<span class=\"selector-class\">.spec</span> --verbose <span class=\"comment\">//将文件和配置推到trunk上面</span></div><div class=\"line\">这次就可以成功了！！！</div></pre></td></tr></table></figure></p>\n<p>我参考的博文：</p>\n<ul>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">廖雪峰</a></li>\n<li><a href=\"https://guides.cocoapods.org\">guides.cocoapods.org</a></li>\n<li><a href=\"http://www.cnblogs.com/wengzilin/p/4742530.html\">【原】iOS：手把手教你发布代码到CocoaPods(Trunk方式)</a></li>\n</ul>\n<p>基本到这里就结束了，是不是还是感觉意犹未尽啊！<br>有什么问题欢迎留言啊！<br><a href=\"https://github.com/ifgyong/FYAlbum\">我的项目</a>,如果觉得不错，欢迎✨啊。<br> 欢迎来吐槽啊！！！</p>\n"},{"title":"MAC 重置MySQL root 密码","date":"2016-01-28T03:16:24.000Z","_content":"\n\n重置MySQL root 密码：\n当忘记密码，或者想要强行重置 MySQL 密码的时候，可以像下面这样：\n\n1.停止 MySQL 服务\n```\nsudo /usr/local/mysql/support-files/mysql.server stop\n//当停止失败 见下边 如何用mac 活动指示器停止服务。\n```\n\n2.进入安全模式\n\n```\nsudo mysqld_safe --skip-grant-tables\n```\n这个地方，如果你 alias 了 mysqlld_safe 这个命令，那么可以直接复制粘贴；如果没有，则需要加上正确的路径。在 Linux/OS X 系统下，默认路径是 /usr/local/mysql/bin/mysqld/usafe。\n\n说是安全模式，其实是超级危险模式！如果你是在本地修改，那没问题；如果是在服务器上，那你得保证这个时候没有任何人登录到系统。因为一旦进入了安全模式，任何人都可以使用任何密码通过 root 用户登录入到 MySQL ，可以执行任何想执行的操作。\n\n这也是为什么，当我们密码忘记了的时候，我们可以这样来修改密码。凡事有利有弊，你可以用这种方式来做好事；而同样，可以用来做坏事。\n\n3.新打开一个终端，进入 MySQL\n```\n-u root -p\n```\n\n\n这里也和 mysqld_safe 一样。如果你是 OS X 上新装的 MySQL ，那么很有可能并不能直接使用 mysql 这个命令。而是要使用它的绝对路径： `/usr/local/mysql/bin/mysql -u root -p`\n\n然后输入任意密码就可以进入 MySQL 了。\n\n修改密码\n进入了之后先不要急着使用 update 命令修改密码，先看看表中的字段名。不同版本密码的字段名可能不一样。\n```\nMySQL 的用户信息是存在 mysql.user 这个表里面的。于是可以先选择 mysql 这个数据库，再看数据库中 user 表中的字段名称。\nuse mysql; //切换数据库\ndescribe user; //查看user表的字段\n```\n\n \n\n 然后确定密码字段的名称，一般可能是 Password。然而在 OS X 的 MySQL 5.7 这个版本中，密码字段名称是 authentication_string 。记住这个字段名。\n\n 然后修改密码啊：\n ```\n UPDATE mysql.user SET authentication_string=PASSWORD(‘123456’) where User=’root’; //将root用户密码改成 123456\n ```\n\n  \n\n  5.刷新权限，使配置生效\n  ```\n  flush privileges;\n  ```\n\n   \n\n   最后再启动 MySQL\n   ```\n   sudo /usr/local/mysql/support-files/mysql.server start\n   ```\n\n   当启动失败的话，可以直接用mac工具活动监视器：\n   搜索mysql 进程名称列表有mysql的话，直接双击出现：这里写图片描述\n   点击退出即可。\n\n   修改完之后记得刷新权限 和重新启动mysql服务才行。\n\n\n","source":"_posts/MAC-重置MySQL-root-密码.md","raw":"title: MAC 重置MySQL root 密码\ndate: 2016-01-28 11:16:24\ntags:\n- iOS\ncategories: iOS\n---\n\n\n重置MySQL root 密码：\n当忘记密码，或者想要强行重置 MySQL 密码的时候，可以像下面这样：\n\n1.停止 MySQL 服务\n```\nsudo /usr/local/mysql/support-files/mysql.server stop\n//当停止失败 见下边 如何用mac 活动指示器停止服务。\n```\n\n2.进入安全模式\n\n```\nsudo mysqld_safe --skip-grant-tables\n```\n这个地方，如果你 alias 了 mysqlld_safe 这个命令，那么可以直接复制粘贴；如果没有，则需要加上正确的路径。在 Linux/OS X 系统下，默认路径是 /usr/local/mysql/bin/mysqld/usafe。\n\n说是安全模式，其实是超级危险模式！如果你是在本地修改，那没问题；如果是在服务器上，那你得保证这个时候没有任何人登录到系统。因为一旦进入了安全模式，任何人都可以使用任何密码通过 root 用户登录入到 MySQL ，可以执行任何想执行的操作。\n\n这也是为什么，当我们密码忘记了的时候，我们可以这样来修改密码。凡事有利有弊，你可以用这种方式来做好事；而同样，可以用来做坏事。\n\n3.新打开一个终端，进入 MySQL\n```\n-u root -p\n```\n\n\n这里也和 mysqld_safe 一样。如果你是 OS X 上新装的 MySQL ，那么很有可能并不能直接使用 mysql 这个命令。而是要使用它的绝对路径： `/usr/local/mysql/bin/mysql -u root -p`\n\n然后输入任意密码就可以进入 MySQL 了。\n\n修改密码\n进入了之后先不要急着使用 update 命令修改密码，先看看表中的字段名。不同版本密码的字段名可能不一样。\n```\nMySQL 的用户信息是存在 mysql.user 这个表里面的。于是可以先选择 mysql 这个数据库，再看数据库中 user 表中的字段名称。\nuse mysql; //切换数据库\ndescribe user; //查看user表的字段\n```\n\n \n\n 然后确定密码字段的名称，一般可能是 Password。然而在 OS X 的 MySQL 5.7 这个版本中，密码字段名称是 authentication_string 。记住这个字段名。\n\n 然后修改密码啊：\n ```\n UPDATE mysql.user SET authentication_string=PASSWORD(‘123456’) where User=’root’; //将root用户密码改成 123456\n ```\n\n  \n\n  5.刷新权限，使配置生效\n  ```\n  flush privileges;\n  ```\n\n   \n\n   最后再启动 MySQL\n   ```\n   sudo /usr/local/mysql/support-files/mysql.server start\n   ```\n\n   当启动失败的话，可以直接用mac工具活动监视器：\n   搜索mysql 进程名称列表有mysql的话，直接双击出现：这里写图片描述\n   点击退出即可。\n\n   修改完之后记得刷新权限 和重新启动mysql服务才行。\n\n\n","slug":"MAC-重置MySQL-root-密码","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj3s0003nhmfimutt97n","content":"<p>重置MySQL root 密码：<br>当忘记密码，或者想要强行重置 MySQL 密码的时候，可以像下面这样：</p>\n<p>1.停止 MySQL 服务<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /usr/<span class=\"built_in\">local</span>/mysql/support-<span class=\"built_in\">files</span>/mysql.server <span class=\"built_in\">stop</span><span class=\"comment\"></span></div><div class=\"line\">//当停止失败 见下边 如何用mac 活动指示器停止服务。</div></pre></td></tr></table></figure></p>\n<p>2.进入安全模式</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mysqld_safe <span class=\"comment\">--skip-grant-tables</span></div></pre></td></tr></table></figure>\n<p>这个地方，如果你 alias 了 mysqlld_safe 这个命令，那么可以直接复制粘贴；如果没有，则需要加上正确的路径。在 Linux/OS X 系统下，默认路径是 /usr/local/mysql/bin/mysqld/usafe。</p>\n<p>说是安全模式，其实是超级危险模式！如果你是在本地修改，那没问题；如果是在服务器上，那你得保证这个时候没有任何人登录到系统。因为一旦进入了安全模式，任何人都可以使用任何密码通过 root 用户登录入到 MySQL ，可以执行任何想执行的操作。</p>\n<p>这也是为什么，当我们密码忘记了的时候，我们可以这样来修改密码。凡事有利有弊，你可以用这种方式来做好事；而同样，可以用来做坏事。</p>\n<p>3.新打开一个终端，进入 MySQL<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"deletion\">-u root -p</span></div></pre></td></tr></table></figure></p>\n<p>这里也和 mysqld_safe 一样。如果你是 OS X 上新装的 MySQL ，那么很有可能并不能直接使用 mysql 这个命令。而是要使用它的绝对路径： <code>/usr/local/mysql/bin/mysql -u root -p</code></p>\n<p>然后输入任意密码就可以进入 MySQL 了。</p>\n<p>修改密码<br>进入了之后先不要急着使用 update 命令修改密码，先看看表中的字段名。不同版本密码的字段名可能不一样。<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MySQL 的用户信息是存在 mysql.<span class=\"keyword\">user</span> <span class=\"title\">这个表里面的。于是可以先选择 mysql</span> 这个数据库，再看数据库中 <span class=\"keyword\">user</span> <span class=\"title\">表中的字段名称。</span></div><div class=\"line\">use mysql; //切换数据库</div><div class=\"line\">describe user; //查看user表的字段</div></pre></td></tr></table></figure></p>\n<p> 然后确定密码字段的名称，一般可能是 Password。然而在 OS X 的 MySQL 5.7 这个版本中，密码字段名称是 authentication_string 。记住这个字段名。</p>\n<p> 然后修改密码啊：<br> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">UPDATE</span> mysql.user <span class=\"keyword\">SET</span> authentication_string=<span class=\"keyword\">PASSWORD</span>(‘<span class=\"number\">123456</span>’) <span class=\"keyword\">where</span> <span class=\"keyword\">User</span>=’root’; //将root用户密码改成 123456</div></pre></td></tr></table></figure></p>\n<p>  5.刷新权限，使配置生效<br>  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</div></pre></td></tr></table></figure></p>\n<p>   最后再启动 MySQL<br>   <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /usr/<span class=\"built_in\">local</span>/mysql/support-<span class=\"built_in\">files</span>/mysql.server <span class=\"built_in\">start</span></div></pre></td></tr></table></figure></p>\n<p>   当启动失败的话，可以直接用mac工具活动监视器：<br>   搜索mysql 进程名称列表有mysql的话，直接双击出现：这里写图片描述<br>   点击退出即可。</p>\n<p>   修改完之后记得刷新权限 和重新启动mysql服务才行。</p>\n","excerpt":"","more":"<p>重置MySQL root 密码：<br>当忘记密码，或者想要强行重置 MySQL 密码的时候，可以像下面这样：</p>\n<p>1.停止 MySQL 服务<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /usr/<span class=\"built_in\">local</span>/mysql/support-<span class=\"built_in\">files</span>/mysql.server <span class=\"built_in\">stop</span><span class=\"comment\"></div><div class=\"line\">//当停止失败 见下边 如何用mac 活动指示器停止服务。</span></div></pre></td></tr></table></figure></p>\n<p>2.进入安全模式</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mysqld_safe <span class=\"comment\">--skip-grant-tables</span></div></pre></td></tr></table></figure>\n<p>这个地方，如果你 alias 了 mysqlld_safe 这个命令，那么可以直接复制粘贴；如果没有，则需要加上正确的路径。在 Linux/OS X 系统下，默认路径是 /usr/local/mysql/bin/mysqld/usafe。</p>\n<p>说是安全模式，其实是超级危险模式！如果你是在本地修改，那没问题；如果是在服务器上，那你得保证这个时候没有任何人登录到系统。因为一旦进入了安全模式，任何人都可以使用任何密码通过 root 用户登录入到 MySQL ，可以执行任何想执行的操作。</p>\n<p>这也是为什么，当我们密码忘记了的时候，我们可以这样来修改密码。凡事有利有弊，你可以用这种方式来做好事；而同样，可以用来做坏事。</p>\n<p>3.新打开一个终端，进入 MySQL<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"deletion\">-u root -p</span></div></pre></td></tr></table></figure></p>\n<p>这里也和 mysqld_safe 一样。如果你是 OS X 上新装的 MySQL ，那么很有可能并不能直接使用 mysql 这个命令。而是要使用它的绝对路径： <code>/usr/local/mysql/bin/mysql -u root -p</code></p>\n<p>然后输入任意密码就可以进入 MySQL 了。</p>\n<p>修改密码<br>进入了之后先不要急着使用 update 命令修改密码，先看看表中的字段名。不同版本密码的字段名可能不一样。<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MySQL 的用户信息是存在 mysql.<span class=\"keyword\">user</span> <span class=\"title\">这个表里面的。于是可以先选择 mysql</span> 这个数据库，再看数据库中 <span class=\"keyword\">user</span> <span class=\"title\">表中的字段名称。</div><div class=\"line\">use</span> mysql; //切换数据库</div><div class=\"line\">describe user; //查看user表的字段</div></pre></td></tr></table></figure></p>\n<p> 然后确定密码字段的名称，一般可能是 Password。然而在 OS X 的 MySQL 5.7 这个版本中，密码字段名称是 authentication_string 。记住这个字段名。</p>\n<p> 然后修改密码啊：<br> <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">UPDATE</span> mysql.user <span class=\"keyword\">SET</span> authentication_string=<span class=\"keyword\">PASSWORD</span>(‘<span class=\"number\">123456</span>’) <span class=\"keyword\">where</span> <span class=\"keyword\">User</span>=’root’; //将root用户密码改成 123456</div></pre></td></tr></table></figure></p>\n<p>  5.刷新权限，使配置生效<br>  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</div></pre></td></tr></table></figure></p>\n<p>   最后再启动 MySQL<br>   <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /usr/<span class=\"built_in\">local</span>/mysql/support-<span class=\"built_in\">files</span>/mysql.server <span class=\"built_in\">start</span></div></pre></td></tr></table></figure></p>\n<p>   当启动失败的话，可以直接用mac工具活动监视器：<br>   搜索mysql 进程名称列表有mysql的话，直接双击出现：这里写图片描述<br>   点击退出即可。</p>\n<p>   修改完之后记得刷新权限 和重新启动mysql服务才行。</p>\n"},{"title":"Module version mismatch","date":"2016-01-30T12:32:53.000Z","_content":"# Module version mismatch\n就是模块 版本不匹配了，我这个电脑是很久没用了`npm -v //2.*.*`，我在官网查了一下 npm 都已经3.*了，就索性把npm更新了一下`sudo npm i -g npm //更新npm`。然后在执行 `hexo s` 竟然还报错，错误如下\n\n```\nMacBook:ifgyong.github.io fgy$ hexo -v\n[Error: Module version mismatch. Expected 46, got 47.]\n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\nhexo: 3.1.1\nos: Darwin 15.3.0 darwin x64\nhttp_parser: 2.5.0\nnode: 4.2.4\nv8: 4.5.103.35\nuv: 1.7.5\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2e\n```\n在Google了好久终于发现一条解决这个问题的命令【出现这个的原因是装hexo的时候有些包没有下载下来】，执行下面的命令在查看hexo 版本的时候就不报错了。\n```\nnpm install hexo --no-optional --save \n```\n\n","source":"_posts/Module-version-mismatch.md","raw":"title: Module version mismatch\ndate: 2016-01-30 20:32:53\ntags:\n- 建站\n- hexo\ncategories: 建站 \n---\n# Module version mismatch\n就是模块 版本不匹配了，我这个电脑是很久没用了`npm -v //2.*.*`，我在官网查了一下 npm 都已经3.*了，就索性把npm更新了一下`sudo npm i -g npm //更新npm`。然后在执行 `hexo s` 竟然还报错，错误如下\n\n```\nMacBook:ifgyong.github.io fgy$ hexo -v\n[Error: Module version mismatch. Expected 46, got 47.]\n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\nhexo: 3.1.1\nos: Darwin 15.3.0 darwin x64\nhttp_parser: 2.5.0\nnode: 4.2.4\nv8: 4.5.103.35\nuv: 1.7.5\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2e\n```\n在Google了好久终于发现一条解决这个问题的命令【出现这个的原因是装hexo的时候有些包没有下载下来】，执行下面的命令在查看hexo 版本的时候就不报错了。\n```\nnpm install hexo --no-optional --save \n```\n\n","slug":"Module-version-mismatch","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj3v0005nhmfl1ub2enm","content":"<h1 id=\"Module_version_mismatch\"><a href=\"#Module_version_mismatch\" class=\"headerlink\" title=\"Module version mismatch\"></a>Module version mismatch</h1><p>就是模块 版本不匹配了，我这个电脑是很久没用了<code>npm -v //2.*.*</code>，我在官网查了一下 npm 都已经3.*了，就索性把npm更新了一下<code>sudo npm i -g npm //更新npm</code>。然后在执行 <code>hexo s</code> 竟然还报错，错误如下</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">MacBook:</span>ifgyong.github.io fgy$ hexo -v</div><div class=\"line\">[<span class=\"string\">Error:</span> Module version mismatch. Expected <span class=\"number\">46</span>, got <span class=\"number\">47.</span>]</div><div class=\"line\">&#123; [<span class=\"string\">Error:</span> Cannot find module <span class=\"string\">'./build/default/DTraceProviderBindings'</span>] <span class=\"string\">code:</span> <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div><div class=\"line\">&#123; [<span class=\"string\">Error:</span> Cannot find module <span class=\"string\">'./build/Debug/DTraceProviderBindings'</span>] <span class=\"string\">code:</span> <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div><div class=\"line\"><span class=\"string\">hexo:</span> <span class=\"number\">3.1</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"string\">os:</span> Darwin <span class=\"number\">15.3</span><span class=\"number\">.0</span> darwin x64</div><div class=\"line\"><span class=\"string\">http_parser:</span> <span class=\"number\">2.5</span><span class=\"number\">.0</span></div><div class=\"line\"><span class=\"string\">node:</span> <span class=\"number\">4.2</span><span class=\"number\">.4</span></div><div class=\"line\"><span class=\"string\">v8:</span> <span class=\"number\">4.5</span><span class=\"number\">.103</span><span class=\"number\">.35</span></div><div class=\"line\"><span class=\"string\">uv:</span> <span class=\"number\">1.7</span><span class=\"number\">.5</span></div><div class=\"line\"><span class=\"string\">zlib:</span> <span class=\"number\">1.2</span><span class=\"number\">.8</span></div><div class=\"line\"><span class=\"string\">ares:</span> <span class=\"number\">1.10</span><span class=\"number\">.1</span>-DEV</div><div class=\"line\"><span class=\"string\">icu:</span> <span class=\"number\">56.1</span></div><div class=\"line\"><span class=\"string\">modules:</span> <span class=\"number\">46</span></div><div class=\"line\"><span class=\"string\">openssl:</span> <span class=\"number\">1.0</span><span class=\"number\">.2</span>e</div></pre></td></tr></table></figure>\n<p>在Google了好久终于发现一条解决这个问题的命令【出现这个的原因是装hexo的时候有些包没有下载下来】，执行下面的命令在查看hexo 版本的时候就不报错了。<br><figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">npm</span> <span class=\"comment\">install</span> <span class=\"comment\">hexo</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">no</span><span class=\"literal\">-</span><span class=\"comment\">optional</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">save</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"Module_version_mismatch\"><a href=\"#Module_version_mismatch\" class=\"headerlink\" title=\"Module version mismatch\"></a>Module version mismatch</h1><p>就是模块 版本不匹配了，我这个电脑是很久没用了<code>npm -v //2.*.*</code>，我在官网查了一下 npm 都已经3.*了，就索性把npm更新了一下<code>sudo npm i -g npm //更新npm</code>。然后在执行 <code>hexo s</code> 竟然还报错，错误如下</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">MacBook:</span>ifgyong.github.io fgy$ hexo -v</div><div class=\"line\">[<span class=\"string\">Error:</span> Module version mismatch. Expected <span class=\"number\">46</span>, got <span class=\"number\">47.</span>]</div><div class=\"line\">&#123; [<span class=\"string\">Error:</span> Cannot find module <span class=\"string\">'./build/default/DTraceProviderBindings'</span>] <span class=\"string\">code:</span> <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div><div class=\"line\">&#123; [<span class=\"string\">Error:</span> Cannot find module <span class=\"string\">'./build/Debug/DTraceProviderBindings'</span>] <span class=\"string\">code:</span> <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div><div class=\"line\"><span class=\"string\">hexo:</span> <span class=\"number\">3.1</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"string\">os:</span> Darwin <span class=\"number\">15.3</span><span class=\"number\">.0</span> darwin x64</div><div class=\"line\"><span class=\"string\">http_parser:</span> <span class=\"number\">2.5</span><span class=\"number\">.0</span></div><div class=\"line\"><span class=\"string\">node:</span> <span class=\"number\">4.2</span><span class=\"number\">.4</span></div><div class=\"line\"><span class=\"string\">v8:</span> <span class=\"number\">4.5</span><span class=\"number\">.103</span><span class=\"number\">.35</span></div><div class=\"line\"><span class=\"string\">uv:</span> <span class=\"number\">1.7</span><span class=\"number\">.5</span></div><div class=\"line\"><span class=\"string\">zlib:</span> <span class=\"number\">1.2</span><span class=\"number\">.8</span></div><div class=\"line\"><span class=\"string\">ares:</span> <span class=\"number\">1.10</span><span class=\"number\">.1</span>-DEV</div><div class=\"line\"><span class=\"string\">icu:</span> <span class=\"number\">56.1</span></div><div class=\"line\"><span class=\"string\">modules:</span> <span class=\"number\">46</span></div><div class=\"line\"><span class=\"string\">openssl:</span> <span class=\"number\">1.0</span><span class=\"number\">.2</span>e</div></pre></td></tr></table></figure>\n<p>在Google了好久终于发现一条解决这个问题的命令【出现这个的原因是装hexo的时候有些包没有下载下来】，执行下面的命令在查看hexo 版本的时候就不报错了。<br><figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">npm</span> <span class=\"comment\">install</span> <span class=\"comment\">hexo</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">no</span><span class=\"literal\">-</span><span class=\"comment\">optional</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">save</span></div></pre></td></tr></table></figure></p>\n"},{"title":"hexo换了电脑处理方法","date":"2016-01-31T04:02:22.000Z","_content":"\n## hexo换了电脑处理方法\n为了可以在多个电脑上面都处理hexo博客，所以我把source文件和网站的文件分别放在hexo和master分支上面了。\n克隆到本地你的仓库\n```\ngit clone git@github.com:ifgyongifgyong.github.io.git\n```\n## 然后切换到hexo分支上面\n```\ngit checkout hexo\n\n运行 `hexo s --debug` 看看能不能正常启动。\n在浏览器打开 `localhost:4000`\n```\n## 然后测试是否在新的电脑上面能不能发表新的文章\n```\nhexo new '测试'\n\nhexo s --debug 然后打开`localhost:4000`就可以看见刚才发表的测试文章了\n```\n## 编译到git上面\n```\nhexo clean\nhexo g\nhexo d\n然后打开你自己的网站，我的是fgyong.cn，查看文章上去没了没。\n```\n我执行`hexo d`好几次都成功了，但是 网站上面的内容都没有更新，我就纳闷了。\n## 最终大招\n最后在知乎偶尔看见一个答案说是 删除仓库中的`.deploy_git`文件夹，然后在重新编译，部署。OK，新的文章出现了。\n\n","source":"_posts/hexo换了电脑处理方法.md","raw":"title: hexo换了电脑处理方法\ndate: 2016-01-31 12:02:22\ntags:\n- 建站\n- hexo\ncategories: 建站\n---\n\n## hexo换了电脑处理方法\n为了可以在多个电脑上面都处理hexo博客，所以我把source文件和网站的文件分别放在hexo和master分支上面了。\n克隆到本地你的仓库\n```\ngit clone git@github.com:ifgyongifgyong.github.io.git\n```\n## 然后切换到hexo分支上面\n```\ngit checkout hexo\n\n运行 `hexo s --debug` 看看能不能正常启动。\n在浏览器打开 `localhost:4000`\n```\n## 然后测试是否在新的电脑上面能不能发表新的文章\n```\nhexo new '测试'\n\nhexo s --debug 然后打开`localhost:4000`就可以看见刚才发表的测试文章了\n```\n## 编译到git上面\n```\nhexo clean\nhexo g\nhexo d\n然后打开你自己的网站，我的是fgyong.cn，查看文章上去没了没。\n```\n我执行`hexo d`好几次都成功了，但是 网站上面的内容都没有更新，我就纳闷了。\n## 最终大招\n最后在知乎偶尔看见一个答案说是 删除仓库中的`.deploy_git`文件夹，然后在重新编译，部署。OK，新的文章出现了。\n\n","slug":"hexo换了电脑处理方法","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj3w0006nhmfpvw4b3ax","content":"<h2 id=\"hexo_u6362_u4E86_u7535_u8111_u5904_u7406_u65B9_u6CD5\"><a href=\"#hexo_u6362_u4E86_u7535_u8111_u5904_u7406_u65B9_u6CD5\" class=\"headerlink\" title=\"hexo换了电脑处理方法\"></a>hexo换了电脑处理方法</h2><p>为了可以在多个电脑上面都处理hexo博客，所以我把source文件和网站的文件分别放在hexo和master分支上面了。<br>克隆到本地你的仓库<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git@github<span class=\"selector-class\">.com</span>:ifgyongifgyong<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span><span class=\"selector-class\">.git</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"u7136_u540E_u5207_u6362_u5230hexo_u5206_u652F_u4E0A_u9762\"><a href=\"#u7136_u540E_u5207_u6362_u5230hexo_u5206_u652F_u4E0A_u9762\" class=\"headerlink\" title=\"然后切换到hexo分支上面\"></a>然后切换到hexo分支上面</h2><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout hexo</div><div class=\"line\"></div><div class=\"line\">运行 `hexo s --debug` 看看能不能正常启动。</div><div class=\"line\">在浏览器打开 `localhost:<span class=\"number\">4000</span>`</div></pre></td></tr></table></figure>\n<h2 id=\"u7136_u540E_u6D4B_u8BD5_u662F_u5426_u5728_u65B0_u7684_u7535_u8111_u4E0A_u9762_u80FD_u4E0D_u80FD_u53D1_u8868_u65B0_u7684_u6587_u7AE0\"><a href=\"#u7136_u540E_u6D4B_u8BD5_u662F_u5426_u5728_u65B0_u7684_u7535_u8111_u4E0A_u9762_u80FD_u4E0D_u80FD_u53D1_u8868_u65B0_u7684_u6587_u7AE0\" class=\"headerlink\" title=\"然后测试是否在新的电脑上面能不能发表新的文章\"></a>然后测试是否在新的电脑上面能不能发表新的文章</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">'测试'</span></div><div class=\"line\"></div><div class=\"line\">hexo s --<span class=\"keyword\">debug</span> 然后打开`localhos<span class=\"variable\">t:4000</span>`就可以看见刚才发表的测试文章了</div></pre></td></tr></table></figure>\n<h2 id=\"u7F16_u8BD1_u5230git_u4E0A_u9762\"><a href=\"#u7F16_u8BD1_u5230git_u4E0A_u9762\" class=\"headerlink\" title=\"编译到git上面\"></a>编译到git上面</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">hexo</span> <span class=\"selector-tag\">clean</span></div><div class=\"line\"><span class=\"selector-tag\">hexo</span> <span class=\"selector-tag\">g</span></div><div class=\"line\"><span class=\"selector-tag\">hexo</span> <span class=\"selector-tag\">d</span></div><div class=\"line\">然后打开你自己的网站，我的是<span class=\"selector-tag\">fgyong</span><span class=\"selector-class\">.cn</span>，查看文章上去没了没。</div></pre></td></tr></table></figure>\n<p>我执行<code>hexo d</code>好几次都成功了，但是 网站上面的内容都没有更新，我就纳闷了。</p>\n<h2 id=\"u6700_u7EC8_u5927_u62DB\"><a href=\"#u6700_u7EC8_u5927_u62DB\" class=\"headerlink\" title=\"最终大招\"></a>最终大招</h2><p>最后在知乎偶尔看见一个答案说是 删除仓库中的<code>.deploy_git</code>文件夹，然后在重新编译，部署。OK，新的文章出现了。</p>\n","excerpt":"","more":"<h2 id=\"hexo_u6362_u4E86_u7535_u8111_u5904_u7406_u65B9_u6CD5\"><a href=\"#hexo_u6362_u4E86_u7535_u8111_u5904_u7406_u65B9_u6CD5\" class=\"headerlink\" title=\"hexo换了电脑处理方法\"></a>hexo换了电脑处理方法</h2><p>为了可以在多个电脑上面都处理hexo博客，所以我把source文件和网站的文件分别放在hexo和master分支上面了。<br>克隆到本地你的仓库<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git@github<span class=\"selector-class\">.com</span>:ifgyongifgyong<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span><span class=\"selector-class\">.git</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"u7136_u540E_u5207_u6362_u5230hexo_u5206_u652F_u4E0A_u9762\"><a href=\"#u7136_u540E_u5207_u6362_u5230hexo_u5206_u652F_u4E0A_u9762\" class=\"headerlink\" title=\"然后切换到hexo分支上面\"></a>然后切换到hexo分支上面</h2><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout hexo</div><div class=\"line\"></div><div class=\"line\">运行 `hexo s --debug` 看看能不能正常启动。</div><div class=\"line\">在浏览器打开 `localhost:<span class=\"number\">4000</span>`</div></pre></td></tr></table></figure>\n<h2 id=\"u7136_u540E_u6D4B_u8BD5_u662F_u5426_u5728_u65B0_u7684_u7535_u8111_u4E0A_u9762_u80FD_u4E0D_u80FD_u53D1_u8868_u65B0_u7684_u6587_u7AE0\"><a href=\"#u7136_u540E_u6D4B_u8BD5_u662F_u5426_u5728_u65B0_u7684_u7535_u8111_u4E0A_u9762_u80FD_u4E0D_u80FD_u53D1_u8868_u65B0_u7684_u6587_u7AE0\" class=\"headerlink\" title=\"然后测试是否在新的电脑上面能不能发表新的文章\"></a>然后测试是否在新的电脑上面能不能发表新的文章</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">'测试'</span></div><div class=\"line\"></div><div class=\"line\">hexo s --<span class=\"keyword\">debug</span> 然后打开`localhos<span class=\"variable\">t:4000</span>`就可以看见刚才发表的测试文章了</div></pre></td></tr></table></figure>\n<h2 id=\"u7F16_u8BD1_u5230git_u4E0A_u9762\"><a href=\"#u7F16_u8BD1_u5230git_u4E0A_u9762\" class=\"headerlink\" title=\"编译到git上面\"></a>编译到git上面</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">hexo</span> <span class=\"selector-tag\">clean</span></div><div class=\"line\"><span class=\"selector-tag\">hexo</span> <span class=\"selector-tag\">g</span></div><div class=\"line\"><span class=\"selector-tag\">hexo</span> <span class=\"selector-tag\">d</span></div><div class=\"line\">然后打开你自己的网站，我的是<span class=\"selector-tag\">fgyong</span><span class=\"selector-class\">.cn</span>，查看文章上去没了没。</div></pre></td></tr></table></figure>\n<p>我执行<code>hexo d</code>好几次都成功了，但是 网站上面的内容都没有更新，我就纳闷了。</p>\n<h2 id=\"u6700_u7EC8_u5927_u62DB\"><a href=\"#u6700_u7EC8_u5927_u62DB\" class=\"headerlink\" title=\"最终大招\"></a>最终大招</h2><p>最后在知乎偶尔看见一个答案说是 删除仓库中的<code>.deploy_git</code>文件夹，然后在重新编译，部署。OK，新的文章出现了。</p>\n"},{"title":"hexo自定义域名","date":"2016-01-28T03:44:52.000Z","_content":"## 注册购买域名\n就像买淘宝的宝贝一样简单，[阿里云域名购买](http://wanwang.aliyun.com/domain/?spm=5176.200001.n2.13.iyigkk)\n\n## 设置DNS\n 设置IP地址的时候设置成github的IP具体获取方法是\n  ```\n    $ nslookup fgyong.github.io//这个地址是你自己的地址下边的是输出来的，其中103.245.222.144便是上边需要的IP。\n     Server:        211.162.96.1\n     Address:    211.162.96.1#53\n\n     Non-authoritative answer: \n     fgyong.github.io    canonical name = github.map.fastly.net.\n     Name:    github.map.fastly.net\n     Address: 103.245.222.133\n     ```\n## 新建CNAME\n           在hexo文件目录source下边执行\n           ```\n           vi CNAME //新建文件并打开\n           然后把你买的域名写入文件退出并保存。\n           比如我的是 http://fgyong.cn,写入文件的 网址是fgyong.cn.`没有http字样的`\n           ```\n\n           然后\n           ```\n           编译 hexo g\n           上传github hexo d\n           ```\n\n           大功告成，可以测试查看成果了。\n            \n             \n","source":"_posts/hexo自定义域名.md","raw":"title: hexo自定义域名\ndate: 2016-01-28 11:44:52\ntags:\n- 建站\ncategories: 建站\n---\n## 注册购买域名\n就像买淘宝的宝贝一样简单，[阿里云域名购买](http://wanwang.aliyun.com/domain/?spm=5176.200001.n2.13.iyigkk)\n\n## 设置DNS\n 设置IP地址的时候设置成github的IP具体获取方法是\n  ```\n    $ nslookup fgyong.github.io//这个地址是你自己的地址下边的是输出来的，其中103.245.222.144便是上边需要的IP。\n     Server:        211.162.96.1\n     Address:    211.162.96.1#53\n\n     Non-authoritative answer: \n     fgyong.github.io    canonical name = github.map.fastly.net.\n     Name:    github.map.fastly.net\n     Address: 103.245.222.133\n     ```\n## 新建CNAME\n           在hexo文件目录source下边执行\n           ```\n           vi CNAME //新建文件并打开\n           然后把你买的域名写入文件退出并保存。\n           比如我的是 http://fgyong.cn,写入文件的 网址是fgyong.cn.`没有http字样的`\n           ```\n\n           然后\n           ```\n           编译 hexo g\n           上传github hexo d\n           ```\n\n           大功告成，可以测试查看成果了。\n            \n             \n","slug":"hexo自定义域名","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj3y0007nhmf2bc1f8t0","content":"<h2 id=\"u6CE8_u518C_u8D2D_u4E70_u57DF_u540D\"><a href=\"#u6CE8_u518C_u8D2D_u4E70_u57DF_u540D\" class=\"headerlink\" title=\"注册购买域名\"></a>注册购买域名</h2><p>就像买淘宝的宝贝一样简单，<a href=\"http://wanwang.aliyun.com/domain/?spm=5176.200001.n2.13.iyigkk\" target=\"_blank\" rel=\"external\">阿里云域名购买</a></p>\n<h2 id=\"u8BBE_u7F6EDNS\"><a href=\"#u8BBE_u7F6EDNS\" class=\"headerlink\" title=\"设置DNS\"></a>设置DNS</h2><p> 设置IP地址的时候设置成github的IP具体获取方法是<br>  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nslookup fgyong<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span><span class=\"comment\">//这个地址是你自己的地址下边的是输出来的，其中103.245.222.144便是上边需要的IP。</span></div><div class=\"line\"> Server:        <span class=\"number\">211.162</span>.<span class=\"number\">96.1</span></div><div class=\"line\"> Address:    <span class=\"number\">211.162</span>.<span class=\"number\">96.1</span>#<span class=\"number\">53</span></div><div class=\"line\"></div><div class=\"line\"> Non-authoritative answer: </div><div class=\"line\"> fgyong<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span>    canonical name = github<span class=\"selector-class\">.map</span><span class=\"selector-class\">.fastly</span><span class=\"selector-class\">.net</span>.</div><div class=\"line\"> Name:    github<span class=\"selector-class\">.map</span><span class=\"selector-class\">.fastly</span><span class=\"selector-class\">.net</span></div><div class=\"line\"> Address: <span class=\"number\">103.245</span>.<span class=\"number\">222.133</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"u65B0_u5EFACNAME\"><a href=\"#u65B0_u5EFACNAME\" class=\"headerlink\" title=\"新建CNAME\"></a>新建CNAME</h2><pre><code>在hexo文件目录source下边执行\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi CNAME <span class=\"comment\">//新建文件并打开</span></div><div class=\"line\">然后把你买的域名写入文件退出并保存。</div><div class=\"line\">比如我的是 <span class=\"string\">http:</span><span class=\"comment\">//fgyong.cn,写入文件的 网址是fgyong.cn.`没有http字样的`</span></div></pre></td></tr></table></figure>\n\n然后\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">编译 hexo <span class=\"keyword\">g</span></div><div class=\"line\">上传github hexo <span class=\"built_in\">d</span></div></pre></td></tr></table></figure>\n\n大功告成，可以测试查看成果了。\n</code></pre>","excerpt":"","more":"<h2 id=\"u6CE8_u518C_u8D2D_u4E70_u57DF_u540D\"><a href=\"#u6CE8_u518C_u8D2D_u4E70_u57DF_u540D\" class=\"headerlink\" title=\"注册购买域名\"></a>注册购买域名</h2><p>就像买淘宝的宝贝一样简单，<a href=\"http://wanwang.aliyun.com/domain/?spm=5176.200001.n2.13.iyigkk\">阿里云域名购买</a></p>\n<h2 id=\"u8BBE_u7F6EDNS\"><a href=\"#u8BBE_u7F6EDNS\" class=\"headerlink\" title=\"设置DNS\"></a>设置DNS</h2><p> 设置IP地址的时候设置成github的IP具体获取方法是<br>  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nslookup fgyong<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span><span class=\"comment\">//这个地址是你自己的地址下边的是输出来的，其中103.245.222.144便是上边需要的IP。</span></div><div class=\"line\"> Server:        <span class=\"number\">211.162</span>.<span class=\"number\">96.1</span></div><div class=\"line\"> Address:    <span class=\"number\">211.162</span>.<span class=\"number\">96.1</span>#<span class=\"number\">53</span></div><div class=\"line\"></div><div class=\"line\"> Non-authoritative answer: </div><div class=\"line\"> fgyong<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span>    canonical name = github<span class=\"selector-class\">.map</span><span class=\"selector-class\">.fastly</span><span class=\"selector-class\">.net</span>.</div><div class=\"line\"> Name:    github<span class=\"selector-class\">.map</span><span class=\"selector-class\">.fastly</span><span class=\"selector-class\">.net</span></div><div class=\"line\"> Address: <span class=\"number\">103.245</span>.<span class=\"number\">222.133</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"u65B0_u5EFACNAME\"><a href=\"#u65B0_u5EFACNAME\" class=\"headerlink\" title=\"新建CNAME\"></a>新建CNAME</h2><pre><code>在hexo文件目录source下边执行\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi CNAME <span class=\"comment\">//新建文件并打开</span></div><div class=\"line\">然后把你买的域名写入文件退出并保存。</div><div class=\"line\">比如我的是 <span class=\"string\">http:</span><span class=\"comment\">//fgyong.cn,写入文件的 网址是fgyong.cn.`没有http字样的`</span></div></pre></td></tr></table></figure>\n\n然后\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">编译 hexo <span class=\"keyword\">g</span></div><div class=\"line\">上传github hexo <span class=\"built_in\">d</span></div></pre></td></tr></table></figure>\n\n大功告成，可以测试查看成果了。\n</code></pre>"},{"title":"iOS WebView设置cookie","date":"2016-01-28T03:13:58.000Z","_content":"\n## 添加cookie的时候必须先设置可以接受cookie\n```\n[[NSHTTPCookieStorage sharedHTTPCookieStorage] setCookieAcceptPolicy:NSHTTPCookieAcceptPolicyAlways];\n```\n然后设置cookie内容\n\n\n```\nNSMutableDictionary *cookiePropertiesUser = [NSMutableDictionary dictionary];\nNSString *cook = [[MDUserCache getInstance].user objectForKey:@\"cookie_key\"];\nif ([cook length]) {\n    [cookiePropertiesUser setObject:@\"user_info\" forKey:NSHTTPCookieName];//cookie的名字\n    [cookiePropertiesUser setObject:cook forKey:NSHTTPCookieValue];//cookie的值\n    [cookiePropertiesUser setObject:[[NSDate date] dateByAddingTimeInterval:2629743] forKey:NSHTTPCookieExpires];//过期时间\n    [cookiePropertiesUser setObject:@\"baidu.com\" forKey:NSHTTPCookieDomain];//给那个网址设置\n    [cookiePropertiesUser setObject:@\"/\" forKey:NSHTTPCookiePath];\n    [cookiePropertiesUser setObject:@\"0\" forKey:NSHTTPCookieVersion];\n}\n\nNSHTTPCookie *cookieuser = [NSHTTPCookie cookieWithProperties:cookiePropertiesUser];\n```\n\n\n## 删除cookie\n```\n[[NSHTTPCookieStorage sharedHTTPCookieStorage] setCookie:cookieuser];\n删除cookie\n\n- (nullable NSArray *)cookiesForURL:(NSURL *)URL;//先获取某个域名下的cookie然后删除\n\n- (void)deleteCookie:(NSHTTPCookie *)cookie; //删除cookie\n```\n","source":"_posts/iOS-WebView设置cookie.md","raw":"title: iOS WebView设置cookie\ndate: 2016-01-28 11:13:58\ntags:\n- iOS\ncategories: iOS\n---\n\n## 添加cookie的时候必须先设置可以接受cookie\n```\n[[NSHTTPCookieStorage sharedHTTPCookieStorage] setCookieAcceptPolicy:NSHTTPCookieAcceptPolicyAlways];\n```\n然后设置cookie内容\n\n\n```\nNSMutableDictionary *cookiePropertiesUser = [NSMutableDictionary dictionary];\nNSString *cook = [[MDUserCache getInstance].user objectForKey:@\"cookie_key\"];\nif ([cook length]) {\n    [cookiePropertiesUser setObject:@\"user_info\" forKey:NSHTTPCookieName];//cookie的名字\n    [cookiePropertiesUser setObject:cook forKey:NSHTTPCookieValue];//cookie的值\n    [cookiePropertiesUser setObject:[[NSDate date] dateByAddingTimeInterval:2629743] forKey:NSHTTPCookieExpires];//过期时间\n    [cookiePropertiesUser setObject:@\"baidu.com\" forKey:NSHTTPCookieDomain];//给那个网址设置\n    [cookiePropertiesUser setObject:@\"/\" forKey:NSHTTPCookiePath];\n    [cookiePropertiesUser setObject:@\"0\" forKey:NSHTTPCookieVersion];\n}\n\nNSHTTPCookie *cookieuser = [NSHTTPCookie cookieWithProperties:cookiePropertiesUser];\n```\n\n\n## 删除cookie\n```\n[[NSHTTPCookieStorage sharedHTTPCookieStorage] setCookie:cookieuser];\n删除cookie\n\n- (nullable NSArray *)cookiesForURL:(NSURL *)URL;//先获取某个域名下的cookie然后删除\n\n- (void)deleteCookie:(NSHTTPCookie *)cookie; //删除cookie\n```\n","slug":"iOS-WebView设置cookie","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj400008nhmfre3srvbt","content":"<h2 id=\"u6DFB_u52A0cookie_u7684_u65F6_u5019_u5FC5_u987B_u5148_u8BBE_u7F6E_u53EF_u4EE5_u63A5_u53D7cookie\"><a href=\"#u6DFB_u52A0cookie_u7684_u65F6_u5019_u5FC5_u987B_u5148_u8BBE_u7F6E_u53EF_u4EE5_u63A5_u53D7cookie\" class=\"headerlink\" title=\"添加cookie的时候必须先设置可以接受cookie\"></a>添加cookie的时候必须先设置可以接受cookie</h2><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[NSHTTPCookieStorage sharedHTTPCookieStorage] setCookieAcceptPolicy:NSHTTPCookieAcceptPolicyAlways]<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>然后设置cookie内容</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSMutableDictionary *cookiePropertiesUser = [NSMutableDictionary dictionary];</div><div class=\"line\">NSString *cook = [[MDUserCache getInstance].user <span class=\"string\">objectForKey:</span>@<span class=\"string\">\"cookie_key\"</span>];</div><div class=\"line\"><span class=\"keyword\">if</span> ([cook length]) &#123;</div><div class=\"line\">    [cookiePropertiesUser <span class=\"string\">setObject:</span>@<span class=\"string\">\"user_info\"</span> <span class=\"string\">forKey:</span>NSHTTPCookieName];<span class=\"comment\">//cookie的名字</span></div><div class=\"line\">    [cookiePropertiesUser <span class=\"string\">setObject:</span>cook <span class=\"string\">forKey:</span>NSHTTPCookieValue];<span class=\"comment\">//cookie的值</span></div><div class=\"line\">    [cookiePropertiesUser <span class=\"string\">setObject:</span>[[NSDate date] <span class=\"string\">dateByAddingTimeInterval:</span><span class=\"number\">2629743</span>] <span class=\"string\">forKey:</span>NSHTTPCookieExpires];<span class=\"comment\">//过期时间</span></div><div class=\"line\">    [cookiePropertiesUser <span class=\"string\">setObject:</span>@<span class=\"string\">\"baidu.com\"</span> <span class=\"string\">forKey:</span>NSHTTPCookieDomain];<span class=\"comment\">//给那个网址设置</span></div><div class=\"line\">    [cookiePropertiesUser <span class=\"string\">setObject:</span>@<span class=\"string\">\"/\"</span> <span class=\"string\">forKey:</span>NSHTTPCookiePath];</div><div class=\"line\">    [cookiePropertiesUser <span class=\"string\">setObject:</span>@<span class=\"string\">\"0\"</span> <span class=\"string\">forKey:</span>NSHTTPCookieVersion];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">NSHTTPCookie *cookieuser = [NSHTTPCookie <span class=\"string\">cookieWithProperties:</span>cookiePropertiesUser];</div></pre></td></tr></table></figure>\n<h2 id=\"u5220_u9664cookie\"><a href=\"#u5220_u9664cookie\" class=\"headerlink\" title=\"删除cookie\"></a>删除cookie</h2><figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[<span class=\"name\">NSHTTPCookieStorage</span> sharedHTTPCookieStorage] setCookie:cookieuser]<span class=\"comment\">;</span></div><div class=\"line\">删除cookie</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"name\">nullable</span> NSArray *)cookiesForURL:(<span class=\"name\">NSURL</span> *)URL<span class=\"comment\">;//先获取某个域名下的cookie然后删除</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"name\">void</span>)deleteCookie:(<span class=\"name\">NSHTTPCookie</span> *)cookie<span class=\"comment\">; //删除cookie</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"u6DFB_u52A0cookie_u7684_u65F6_u5019_u5FC5_u987B_u5148_u8BBE_u7F6E_u53EF_u4EE5_u63A5_u53D7cookie\"><a href=\"#u6DFB_u52A0cookie_u7684_u65F6_u5019_u5FC5_u987B_u5148_u8BBE_u7F6E_u53EF_u4EE5_u63A5_u53D7cookie\" class=\"headerlink\" title=\"添加cookie的时候必须先设置可以接受cookie\"></a>添加cookie的时候必须先设置可以接受cookie</h2><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[NSHTTPCookieStorage sharedHTTPCookieStorage] setCookieAcceptPolicy:NSHTTPCookieAcceptPolicyAlways]<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>然后设置cookie内容</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSMutableDictionary *cookiePropertiesUser = [NSMutableDictionary dictionary];</div><div class=\"line\">NSString *cook = [[MDUserCache getInstance].user <span class=\"string\">objectForKey:</span>@<span class=\"string\">\"cookie_key\"</span>];</div><div class=\"line\"><span class=\"keyword\">if</span> ([cook length]) &#123;</div><div class=\"line\">    [cookiePropertiesUser <span class=\"string\">setObject:</span>@<span class=\"string\">\"user_info\"</span> <span class=\"string\">forKey:</span>NSHTTPCookieName];<span class=\"comment\">//cookie的名字</span></div><div class=\"line\">    [cookiePropertiesUser <span class=\"string\">setObject:</span>cook <span class=\"string\">forKey:</span>NSHTTPCookieValue];<span class=\"comment\">//cookie的值</span></div><div class=\"line\">    [cookiePropertiesUser <span class=\"string\">setObject:</span>[[NSDate date] <span class=\"string\">dateByAddingTimeInterval:</span><span class=\"number\">2629743</span>] <span class=\"string\">forKey:</span>NSHTTPCookieExpires];<span class=\"comment\">//过期时间</span></div><div class=\"line\">    [cookiePropertiesUser <span class=\"string\">setObject:</span>@<span class=\"string\">\"baidu.com\"</span> <span class=\"string\">forKey:</span>NSHTTPCookieDomain];<span class=\"comment\">//给那个网址设置</span></div><div class=\"line\">    [cookiePropertiesUser <span class=\"string\">setObject:</span>@<span class=\"string\">\"/\"</span> <span class=\"string\">forKey:</span>NSHTTPCookiePath];</div><div class=\"line\">    [cookiePropertiesUser <span class=\"string\">setObject:</span>@<span class=\"string\">\"0\"</span> <span class=\"string\">forKey:</span>NSHTTPCookieVersion];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">NSHTTPCookie *cookieuser = [NSHTTPCookie <span class=\"string\">cookieWithProperties:</span>cookiePropertiesUser];</div></pre></td></tr></table></figure>\n<h2 id=\"u5220_u9664cookie\"><a href=\"#u5220_u9664cookie\" class=\"headerlink\" title=\"删除cookie\"></a>删除cookie</h2><figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[<span class=\"name\">NSHTTPCookieStorage</span> sharedHTTPCookieStorage] setCookie:cookieuser]<span class=\"comment\">;</span></div><div class=\"line\">删除cookie</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"name\">nullable</span> NSArray *)cookiesForURL:(<span class=\"name\">NSURL</span> *)URL<span class=\"comment\">;//先获取某个域名下的cookie然后删除</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"name\">void</span>)deleteCookie:(<span class=\"name\">NSHTTPCookie</span> *)cookie<span class=\"comment\">; //删除cookie</span></div></pre></td></tr></table></figure>\n"},{"title":"iOS static const extern 用法技巧","date":"2016-01-28T03:07:58.000Z","_content":"## 通俗的讲：\n\nextern字段使用的时候，声明的变量为全局变量，都可以调用，也有这样一种比较狭义的说法：extern可以扩展一个类中的变量到另一个类中；\n\nstatic声明的变量是静态变量，变量值改变过之后，保存这次改变，每次使用的时候都要读取一遍值；\n\nconst声明过得变量值是不可改变的，是readonly的属性，不可以改变变量的值。<!--more-->\n\n## 具体用法：\n\n1.static的用法：static NSString *str = @\"哈哈\";\n\n2.const的用法：NSString *const str = @\"哈哈\";\n\n3.extern的用法：在A.h里边声明一个变量extern NSString *str = @\"123\";\n\n 这样就声明了一个全局变量，在B.h里边同样写入代码extern NSString *str；然后再B.m里边直接打印str就可以打印出123来，使用的时候不需要导入A.h文件头，也不区分类是否已经创建等等因素。\n\n 希望对大家有所帮助，以后写代码的时候可以更加高大上一些，也是一种技巧。\n","source":"_posts/iOS-static-const-extern-用法技巧.md","raw":"title: iOS static const extern 用法技巧\ndate: 2016-01-28 11:07:58\ntags:\n- iOS\n---\n## 通俗的讲：\n\nextern字段使用的时候，声明的变量为全局变量，都可以调用，也有这样一种比较狭义的说法：extern可以扩展一个类中的变量到另一个类中；\n\nstatic声明的变量是静态变量，变量值改变过之后，保存这次改变，每次使用的时候都要读取一遍值；\n\nconst声明过得变量值是不可改变的，是readonly的属性，不可以改变变量的值。<!--more-->\n\n## 具体用法：\n\n1.static的用法：static NSString *str = @\"哈哈\";\n\n2.const的用法：NSString *const str = @\"哈哈\";\n\n3.extern的用法：在A.h里边声明一个变量extern NSString *str = @\"123\";\n\n 这样就声明了一个全局变量，在B.h里边同样写入代码extern NSString *str；然后再B.m里边直接打印str就可以打印出123来，使用的时候不需要导入A.h文件头，也不区分类是否已经创建等等因素。\n\n 希望对大家有所帮助，以后写代码的时候可以更加高大上一些，也是一种技巧。\n","slug":"iOS-static-const-extern-用法技巧","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj430009nhmfhqxz7k0c","content":"<h2 id=\"u901A_u4FD7_u7684_u8BB2_uFF1A\"><a href=\"#u901A_u4FD7_u7684_u8BB2_uFF1A\" class=\"headerlink\" title=\"通俗的讲：\"></a>通俗的讲：</h2><p>extern字段使用的时候，声明的变量为全局变量，都可以调用，也有这样一种比较狭义的说法：extern可以扩展一个类中的变量到另一个类中；</p>\n<p>static声明的变量是静态变量，变量值改变过之后，保存这次改变，每次使用的时候都要读取一遍值；</p>\n<p>const声明过得变量值是不可改变的，是readonly的属性，不可以改变变量的值。<a id=\"more\"></a></p>\n<h2 id=\"u5177_u4F53_u7528_u6CD5_uFF1A\"><a href=\"#u5177_u4F53_u7528_u6CD5_uFF1A\" class=\"headerlink\" title=\"具体用法：\"></a>具体用法：</h2><p>1.static的用法：static NSString *str = @”哈哈”;</p>\n<p>2.const的用法：NSString *const str = @”哈哈”;</p>\n<p>3.extern的用法：在A.h里边声明一个变量extern NSString *str = @”123”;</p>\n<p> 这样就声明了一个全局变量，在B.h里边同样写入代码extern NSString *str；然后再B.m里边直接打印str就可以打印出123来，使用的时候不需要导入A.h文件头，也不区分类是否已经创建等等因素。</p>\n<p> 希望对大家有所帮助，以后写代码的时候可以更加高大上一些，也是一种技巧。</p>\n","excerpt":"<h2 id=\"u901A_u4FD7_u7684_u8BB2_uFF1A\"><a href=\"#u901A_u4FD7_u7684_u8BB2_uFF1A\" class=\"headerlink\" title=\"通俗的讲：\"></a>通俗的讲：</h2><p>extern字段使用的时候，声明的变量为全局变量，都可以调用，也有这样一种比较狭义的说法：extern可以扩展一个类中的变量到另一个类中；</p>\n<p>static声明的变量是静态变量，变量值改变过之后，保存这次改变，每次使用的时候都要读取一遍值；</p>\n<p>const声明过得变量值是不可改变的，是readonly的属性，不可以改变变量的值。","more":"</p>\n<h2 id=\"u5177_u4F53_u7528_u6CD5_uFF1A\"><a href=\"#u5177_u4F53_u7528_u6CD5_uFF1A\" class=\"headerlink\" title=\"具体用法：\"></a>具体用法：</h2><p>1.static的用法：static NSString *str = @”哈哈”;</p>\n<p>2.const的用法：NSString *const str = @”哈哈”;</p>\n<p>3.extern的用法：在A.h里边声明一个变量extern NSString *str = @”123”;</p>\n<p> 这样就声明了一个全局变量，在B.h里边同样写入代码extern NSString *str；然后再B.m里边直接打印str就可以打印出123来，使用的时候不需要导入A.h文件头，也不区分类是否已经创建等等因素。</p>\n<p> 希望对大家有所帮助，以后写代码的时候可以更加高大上一些，也是一种技巧。</p>"},{"title":"iOS之Safari之添加到主屏幕应用","date":"2016-11-21T08:39:24.000Z","_content":"\n先写好的DemoHtml先需要在手机上试验一下，结果mac上面的文件不能用手机打开，我就想了个办法，直接开一个服务，把mac当成服务器访问服务器上面的文件，这个问题就解决了。\n\n### 1.启动mac py 服务\n首先进入到你要共享的文件夹，直接运行下边的命令，然后就可以再手机浏览器中查看mac上面的电脑了。\n```\npython -m SimpleHTTPServer 8000  启动本地端口8000\n```\n\n### 2.查看电脑IP[局域网的ip]\n```\n我的是：192.168.99.1\n```\n### 3.手机Safari打开\n```\n192.168.99.1:8000\n```\n\n![IMG_0853.PNG](http://upload-images.jianshu.io/upload_images/783986-f559dd371ab3227d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 4.js代码\nhtml代码和正常的布局一样，想要什么样子自己可以随意写，这里只是提供了比较特殊的 js代码。\n```\n<script>\n    var alone = window.navigator.standalone;//是否是从桌面启动\n   var url = \"taobao\"; //url可以换成自己的\n        if(alone){\n        window.open(url+\":\",'_self');//打开淘宝app url可以换成自己的app scheme\n    }     else {  \n      window.open(url+\":\",'_self');  \n  }</script>\n```\n打开这个html文件点击Safari保存到主屏幕。\n在此打开之后的效果：\n\n![IMG_0854.PNG](http://upload-images.jianshu.io/upload_images/783986-bb3c3fadbd9cf618.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其实做这个功能就是方面用户直接点击icon启动app并且调用某个功能，省了不少时间。\n","source":"_posts/iOS之Safari之添加到主屏幕应用.md","raw":"title: iOS之Safari之添加到主屏幕应用\ndate: 2016-11-21 16:39:24\ntags: iOS高级开发\ncategories: iOS\n---\n\n先写好的DemoHtml先需要在手机上试验一下，结果mac上面的文件不能用手机打开，我就想了个办法，直接开一个服务，把mac当成服务器访问服务器上面的文件，这个问题就解决了。\n\n### 1.启动mac py 服务\n首先进入到你要共享的文件夹，直接运行下边的命令，然后就可以再手机浏览器中查看mac上面的电脑了。\n```\npython -m SimpleHTTPServer 8000  启动本地端口8000\n```\n\n### 2.查看电脑IP[局域网的ip]\n```\n我的是：192.168.99.1\n```\n### 3.手机Safari打开\n```\n192.168.99.1:8000\n```\n\n![IMG_0853.PNG](http://upload-images.jianshu.io/upload_images/783986-f559dd371ab3227d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 4.js代码\nhtml代码和正常的布局一样，想要什么样子自己可以随意写，这里只是提供了比较特殊的 js代码。\n```\n<script>\n    var alone = window.navigator.standalone;//是否是从桌面启动\n   var url = \"taobao\"; //url可以换成自己的\n        if(alone){\n        window.open(url+\":\",'_self');//打开淘宝app url可以换成自己的app scheme\n    }     else {  \n      window.open(url+\":\",'_self');  \n  }</script>\n```\n打开这个html文件点击Safari保存到主屏幕。\n在此打开之后的效果：\n\n![IMG_0854.PNG](http://upload-images.jianshu.io/upload_images/783986-bb3c3fadbd9cf618.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其实做这个功能就是方面用户直接点击icon启动app并且调用某个功能，省了不少时间。\n","slug":"iOS之Safari之添加到主屏幕应用","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj44000anhmf2wiy1n4q","content":"<p>先写好的DemoHtml先需要在手机上试验一下，结果mac上面的文件不能用手机打开，我就想了个办法，直接开一个服务，把mac当成服务器访问服务器上面的文件，这个问题就解决了。</p>\n<h3 id=\"1-_u542F_u52A8mac_py__u670D_u52A1\"><a href=\"#1-_u542F_u52A8mac_py__u670D_u52A1\" class=\"headerlink\" title=\"1.启动mac py 服务\"></a>1.启动mac py 服务</h3><p>首先进入到你要共享的文件夹，直接运行下边的命令，然后就可以再手机浏览器中查看mac上面的电脑了。<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python -m SimpleHTTPServer <span class=\"number\">8000</span>  启动本地端口<span class=\"number\">8000</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-_u67E5_u770B_u7535_u8111IP_5B_u5C40_u57DF_u7F51_u7684ip_5D\"><a href=\"#2-_u67E5_u770B_u7535_u8111IP_5B_u5C40_u57DF_u7F51_u7684ip_5D\" class=\"headerlink\" title=\"2.查看电脑IP[局域网的ip]\"></a>2.查看电脑IP[局域网的ip]</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">我的是：192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.99</span><span class=\"selector-class\">.1</span></div></pre></td></tr></table></figure>\n<h3 id=\"3-_u624B_u673ASafari_u6253_u5F00\"><a href=\"#3-_u624B_u673ASafari_u6253_u5F00\" class=\"headerlink\" title=\"3.手机Safari打开\"></a>3.手机Safari打开</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.99</span><span class=\"selector-class\">.1</span><span class=\"selector-pseudo\">:8000</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/783986-f559dd371ab3227d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"IMG_0853.PNG\"></p>\n<h3 id=\"4-js_u4EE3_u7801\"><a href=\"#4-js_u4EE3_u7801\" class=\"headerlink\" title=\"4.js代码\"></a>4.js代码</h3><p>html代码和正常的布局一样，想要什么样子自己可以随意写，这里只是提供了比较特殊的 js代码。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> alone = <span class=\"built_in\">window</span>.navigator.standalone;<span class=\"comment\">//是否是从桌面启动</span></div><div class=\"line\">   <span class=\"keyword\">var</span> url = <span class=\"string\">\"taobao\"</span>; <span class=\"comment\">//url可以换成自己的</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(alone)&#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.open(url+<span class=\"string\">\":\"</span>,<span class=\"string\">'_self'</span>);<span class=\"comment\">//打开淘宝app url可以换成自己的app scheme</span></div><div class=\"line\">    &#125;     <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">      <span class=\"built_in\">window</span>.open(url+<span class=\"string\">\":\"</span>,<span class=\"string\">'_self'</span>);  </div><div class=\"line\">  &#125;<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>打开这个html文件点击Safari保存到主屏幕。<br>在此打开之后的效果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/783986-bb3c3fadbd9cf618.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"IMG_0854.PNG\"></p>\n<p>其实做这个功能就是方面用户直接点击icon启动app并且调用某个功能，省了不少时间。</p>\n","excerpt":"","more":"<p>先写好的DemoHtml先需要在手机上试验一下，结果mac上面的文件不能用手机打开，我就想了个办法，直接开一个服务，把mac当成服务器访问服务器上面的文件，这个问题就解决了。</p>\n<h3 id=\"1-_u542F_u52A8mac_py__u670D_u52A1\"><a href=\"#1-_u542F_u52A8mac_py__u670D_u52A1\" class=\"headerlink\" title=\"1.启动mac py 服务\"></a>1.启动mac py 服务</h3><p>首先进入到你要共享的文件夹，直接运行下边的命令，然后就可以再手机浏览器中查看mac上面的电脑了。<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python -m SimpleHTTPServer <span class=\"number\">8000</span>  启动本地端口<span class=\"number\">8000</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-_u67E5_u770B_u7535_u8111IP_5B_u5C40_u57DF_u7F51_u7684ip_5D\"><a href=\"#2-_u67E5_u770B_u7535_u8111IP_5B_u5C40_u57DF_u7F51_u7684ip_5D\" class=\"headerlink\" title=\"2.查看电脑IP[局域网的ip]\"></a>2.查看电脑IP[局域网的ip]</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">我的是：192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.99</span><span class=\"selector-class\">.1</span></div></pre></td></tr></table></figure>\n<h3 id=\"3-_u624B_u673ASafari_u6253_u5F00\"><a href=\"#3-_u624B_u673ASafari_u6253_u5F00\" class=\"headerlink\" title=\"3.手机Safari打开\"></a>3.手机Safari打开</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.99</span><span class=\"selector-class\">.1</span><span class=\"selector-pseudo\">:8000</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/783986-f559dd371ab3227d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"IMG_0853.PNG\"></p>\n<h3 id=\"4-js_u4EE3_u7801\"><a href=\"#4-js_u4EE3_u7801\" class=\"headerlink\" title=\"4.js代码\"></a>4.js代码</h3><p>html代码和正常的布局一样，想要什么样子自己可以随意写，这里只是提供了比较特殊的 js代码。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    <span class=\"keyword\">var</span> alone = <span class=\"built_in\">window</span>.navigator.standalone;<span class=\"comment\">//是否是从桌面启动</span></div><div class=\"line\">   <span class=\"keyword\">var</span> url = <span class=\"string\">\"taobao\"</span>; <span class=\"comment\">//url可以换成自己的</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(alone)&#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.open(url+<span class=\"string\">\":\"</span>,<span class=\"string\">'_self'</span>);<span class=\"comment\">//打开淘宝app url可以换成自己的app scheme</span></div><div class=\"line\">    &#125;     <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">      <span class=\"built_in\">window</span>.open(url+<span class=\"string\">\":\"</span>,<span class=\"string\">'_self'</span>);  </div><div class=\"line\">  &#125;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>打开这个html文件点击Safari保存到主屏幕。<br>在此打开之后的效果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/783986-bb3c3fadbd9cf618.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"IMG_0854.PNG\"></p>\n<p>其实做这个功能就是方面用户直接点击icon启动app并且调用某个功能，省了不少时间。</p>\n"},{"title":"iOS线程之GCD初探","date":"2016-03-28T09:47:47.000Z","_content":"\n简述：\n       说道线程，离不开并行和串行，所谓并行，就是100赛跑，每个赛道就是一个线程，每个线程之间互不影响，同时都可以运行事件，就是10个赛道都可以有运动员跑步了，谁跑的慢或者跑的快，都不影响其他的人。串行就不一样了，串行是1个赛道10个运动员再跑接力赛，第一个跑到终点第二个在接着跑，依次类推，前边的不走，后边的也走不了的，所以串行上面的事件是一个一个运行的，同时只能是一个人再跑。\n\n在iOS或者OS里面，一般用GCD就能吃处理较多的事务，下面就谈一下GCD的用法。\n\n### 什么是GCD？\n全称是Grand Central Dispatch，可译为“牛逼的中枢调度器”\n纯C语言，提供了非常多强大的函数\n\n### methodList info\n```\n\n//获取主线程 就是更新UI的线程\ndispatch_queue_t dispatch_get_main_queue(void);\n\n //获取全局队列\ndispatch_queue_t dispatch_get_global_queue( long identifier, unsigned long flags);\n\n//创建一个队列 名字是label 属性可以写为NULL  \ndispatch_queue_t dispatch_queue_create( const char *label dispatch_queue_attr_t attr);\ndispatch_release(queue)//释放队列\n\n//获取代码现在运行的queue\ndispatch_queue_t dispatch_get_current_queue( void);\n\n //获取队列的名字\nconst char * dispatch_queue_get_label(dispatch_queue_t queue);\n\n//异步把代码块block交给queue队列中处理\ndispatch_async(dispatch_queue_t queue, dispatch_block_t block);\n\n// 同步将block加入到queue中并且执行。\nvoid dispatch_sync( dispatch_queue_t queue, dispatch_block_t block);\n\n //block 在指定时间在queue中执行\nvoid dispatch_after( dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block);\n\n \n//几个调度事件同事加入到queue中去，最好是全局队列才行。\nvoid dispatch_apply( size_t iterations, dispatch_queue_t queue, void (^block)( size_t));\n\n// block 是否执行过\nvoid dispatch_once( dispatch_once_t *predicate, dispatch_block_t block);\n \n//在分组group中的queue队列执行block\nvoid dispatch_group_async( dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block);\n\n//创建线程分组\ndispatch_group_t dispatch_group_create( void);\n\n //分组的计数+1\nvoid dispatch_group_enter( dispatch_group_t group);\n\n//分组计数 -1\nvoid dispatch_group_leave( dispatch_group_t group);\n\n// 当分组中的事务处理完了执行block\nvoid dispatch_group_notify( dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block);\n\n//等待timeout时间后执行 group中的事务\nlong dispatch_group_wait( dispatch_group_t group, dispatch_time_t timeout);\n\n //并行状态下 queue前面的并行事务处理完成了在执行block，然后执行下边的并行代码\n//比如 ABCDEF D事务等到ABC都完成了在执行EF事务的\nvoid dispatch_barrier_async( dispatch_queue_t queue, dispatch_block_t block);\n\n```\n### 实战演练全局队列\n\n```\n    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\n\ndispatch_async(queue, ^{\n        //异步执行\n        dispatch_sync(dispatch_get_main_queue(), ^{\n            //这里面更新UI\n        });\n    });\n    dispatch_sync(queue, ^{\n       //同步执行\n    });\n```\n### 自定义队列\n```\ndispatch_queue_t queue = dispatch_queue_create(\"com.apple.fgyong\", DISPATCH_QUEUE_SERIAL);\n    //\n//#define DISPATCH_QUEUE_SERIAL   同步队列\n//#define DISPATCH_QUEUE_CONCURRENT 异步队列\n    dispatch_async(queue, ^{\n        NSLog(@\"下载图片1=====%@\",[NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"下载图片2=====%@\",[NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"下载图片3=====%@\",[NSThread currentThread]);\n    });\n    NSLog(@\"main:%@\",[NSThread mainThread]);\n当queue属性为 DISPATCH_QUEUE_CONCURRENT输出：\n**2016-03-28 16:53:25.848 GCD_Demo[12338:347984] ****下载图片****3=====<NSThread: 0x7fabda100250>{number = 4, name = (null)}**\n**2016-03-28 16:53:25.848 GCD_Demo[12338:347982] ****下载图片****2=====<NSThread: 0x7fabda2008a0>{number = 3, name = (null)}**\n**2016-03-28 16:53:25.848 GCD_Demo[12338:347937] main:<NSThread: 0x7fabd8c04ee0>{number = 1, name = main}**\n**2016-03-28 16:53:25.848 GCD_Demo[12338:347981] ****下载图片****1=====<NSThread: 0x7fabd8c0a010>{number = 2, name = (null)}** 线程达到了4个\n当queue属性为DISPATCH_QUEUE_SERIAL输出：\n**2016-03-28 16:46:54.501 GCD_Demo[12272:344348] main:<NSThread: 0x7fd379704cf0>{number = 1, name = main}**\n**2016-03-28 16:46:54.501 GCD_Demo[12272:344382] ****下载图片****1=====<NSThread: 0x7fd37971bda0>{number = 2, name = (null)}**\n**2016-03-28 16:46:54.502 GCD_Demo[12272:344382] ****下载图片****2=====<NSThread: 0x7fd37971bda0>{number = 2, name = (null)}**\n**2016-03-28 16:46:54.502 GCD_Demo[12272:344382] ****下载图片****3=====<NSThread: 0x7fd37971bda0>{number = 2, name = (null)}**\n线程只有2个\n\n ```\n### 多个异步线程问题\n```\n# 当ABC 3个异步线程，要求前两个个执行完再去执行后面的三个的时候例子：\n     dispatch_queue_t queue = dispatch_queue_create(\"com.apple.fgyong\", DISPATCH_QUEUE_CONCURRENT);\n\n    dispatch_async(queue, ^{\n        NSLog(@\"queue1 begin\");\n        sleep(2);\n        NSLog(@\"queue1 end\");\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"queue2 begin\");\n        sleep(2);\n        NSLog(@\"queue2 end\");\n    });\n    dispatch_barrier_sync(queue, ^{\n        NSLog(@\"main:%@\",[NSThread mainThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"queue3 begin\");\n        sleep(2);\n        NSLog(@\"queue3 end\");\n    });\n输出：\n\n**2016-03-28 17:01:01.319 GCD_Demo[12463:353702] queue2 begin**\n**2016-03-28 17:01:01.319 GCD_Demo[12463:353703] queue1 begin**\n**2016-03-28 17:01:03.324 GCD_Demo[12463:353703] queue1 end**\n**2016-03-28 17:01:03.324 GCD_Demo[12463:353702] queue2 end**\n**2016-03-28 17:01:03.325 GCD_Demo[12463:353657] main:<NSThread: 0x7f97ea604bf0>{number = 1, name = main}**\n**2016-03-28 17:01:03.325 GCD_Demo[12463:353702] queue3 begin**\n**2016-03-28 17:01:05.330 GCD_Demo[12463:353702] queue3 end**\n```\n### 线程分组\n```\n# 当多个任务同时进行的时候，也可以用group，ABCD任务进行完成的时候，最后在执行task。\n \n\n  dispatch_queue_t queue = dispatch_queue_create(\"com.apple.fgyong\", DISPATCH_QUEUE_CONCURRENT);\n    dispatch_group_t group = dispatch_group_create();\n    dispatch_group_async(group, queue, ^{\n        \n        NSLog(@\"task1 begin\");\n        sleep(2);\n        NSLog(@\"task1 end\");\n    });\n    \n    dispatch_group_async(group, queue, ^{\n        \n        NSLog(@\"task2 begin\");\n        sleep(2);\n        NSLog(@\"task2 end\");\n    });\n    dispatch_group_notify(group, queue, ^{\n        NSLog(@\"=================\");\n    });\n    dispatch_group_async(group, queue, ^{\n        \n        NSLog(@\"task3 begin\");\n        sleep(2);\n        NSLog(@\"task3 end\");\n    });\n    \n    dispatch_group_async(group, queue, ^{\n        \n        NSLog(@\"task4 begin\");\n        sleep(2);\n        NSLog(@\"task4 end\");\n    });\n输出：\n**2016-03-28 17:08:45.002 GCD_Demo[12557:357162] task1 begin**\n**2016-03-28 17:08:45.002 GCD_Demo[12557:357164] task4 begin**\n**2016-03-28 17:08:45.002 GCD_Demo[12557:357161] task2 begin**\n**2016-03-28 17:08:45.002 GCD_Demo[12557:357163] task3 begin**\n**2016-03-28 17:08:47.005 GCD_Demo[12557:357162] task1 end**\n**2016-03-28 17:08:47.005 GCD_Demo[12557:357163] task3 end**\n**2016-03-28 17:08:47.005 GCD_Demo[12557:357164] task4 end**\n**2016-03-28 17:08:47.005 GCD_Demo[12557:357161] task2 end**\n**2016-03-28 17:08:47.006 GCD_Demo[12557:357161] =================**\n一个组内的所有任务都进行完了才会执行task的函数。\n\n\n# 分组多任务等待 ABCDEF ，ABCD执行5秒，5秒之后就执行EF任务，不管ABCD是否成功。\n\n    dispatch_queue_t queue = dispatch_queue_create(\"com.apple.fgyong\", DISPATCH_QUEUE_CONCURRENT);\n    dispatch_group_t group = dispatch_group_create();\n    dispatch_group_async(group, queue, ^{\n        \n        NSLog(@\"task1 begin\");\n        sleep(2);\n        NSLog(@\"task1 end\");\n    });\n    \n    dispatch_group_async(group, queue, ^{\n        \n        NSLog(@\"task2 begin\");\n        sleep(2);\n        NSLog(@\"task2 end\");\n    });\n    dispatch_group_notify(group, queue, ^{\n        NSLog(@\"=================\");\n    });\n    dispatch_group_async(group, queue, ^{\n        \n        NSLog(@\"task3 begin\");\n        sleep(6);\n        NSLog(@\"task3 end\");\n    });\n    dispatch_group_wait(group, dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5*NSEC_PER_SEC)));\n    NSLog(@\"all end\");\n    dispatch_group_async(group, queue, ^{\n        \n        NSLog(@\"task4 begin\");\n        sleep(2);\n        NSLog(@\"task4 end\");\n    });\n输出：\n# 代码执行到wait的时候会等待5秒之后再执行wait下边的代码，和sleep有点相似。\n**2016-03-28 17:26:31.335 GCD_Demo[12745:366983] task3 begin**\n**2016-03-28 17:26:31.335 GCD_Demo[12745:366978] task1 begin**\n**2016-03-28 17:26:31.335 GCD_Demo[12745:366979] task2 begin**\n**2016-03-28 17:26:33.340 GCD_Demo[12745:366978] task1 end**\n**2016-03-28 17:26:33.340 GCD_Demo[12745:366979] task2 end**\n**2016-03-28 17:26:36.336 GCD_Demo[12745:366894] all end**\n**2016-03-28 17:26:36.336 GCD_Demo[12745:366979] task4 begin**\n**2016-03-28 17:26:37.340 GCD_Demo[12745:366983] task3 end**\n**2016-03-28 17:26:38.342 GCD_Demo[12745:366979] task4 end**\n**2016-03-28 17:26:38.342 GCD_Demo[12745:366983] =================**\n```\n### 同时处理多数据不管顺序\n```\n          dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\n    \n    \n          /*! dispatch_apply函数说明\n           10      *\n           11      *  @brief  dispatch_apply函数是dispatch_sync函数和Dispatch Group的关联API\n           12      *         该函数按指定的次数将指定的Block追加到指定的Dispatch Queue中,并等到全部的处理执行结束\n           13      *\n           14      *  @param 10    指定重复次数  指定10次\n           15      *  @param queue 追加对象的Dispatch Queue\n           16      *  @param index 带有参数的Block, index的作用是为了按执行的顺序区分各个Block\n           17      *\n           18      */\n          dispatch_apply(10, queue, ^(size_t index) {\n                  NSLog(@\"%d\", index);\n              \n              });\n          NSLog(@\"done\");\n输出：\n# 这个和上边讲的分组类似，多事务处理，处理结束后再执行代码。\n# 这个是同步的，代码按顺序执行，分组的是异步执行的block\n**2016-03-28 17:36:35.698 GCD_Demo[12857:372458] 1**\n**2016-03-28 17:36:35.698 GCD_Demo[12857:372463] 5**\n**2016-03-28 17:36:35.698 GCD_Demo[12857:372429] 4**\n**2016-03-28 17:36:35.698 GCD_Demo[12857:372464] 6**\n**2016-03-28 17:36:35.698 GCD_Demo[12857:372465] 7**\n**2016-03-28 17:36:35.698 GCD_Demo[12857:372462] 2**\n**2016-03-28 17:36:35.698 GCD_Demo[12857:372457] 0**\n**2016-03-28 17:36:35.698 GCD_Demo[12857:372461] 3**\n**2016-03-28 17:36:35.699 GCD_Demo[12857:372458] 8**\n**2016-03-28 17:36:35.699 GCD_Demo[12857:372429] 9**\n**2016-03-28 17:36:35.699 GCD_Demo[12857:372429] done**\n    \n```\n参考文章：[Grand Central Dispatch (GCD) Reference](https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/index.html#//apple_ref/c/macro/DISPATCH_QUEUE_CONCURRENT)\nGCD提供的接口蛮多的,适用场景还是要熟练掌握，才能运用自如。","source":"_posts/iOS线程之GCD初探.md","raw":"title: iOS线程之GCD初探\ndate: 2016-03-28 17:47:47\ntags:\n- iOS\n- iOS高级\ncategories: iOS\n---\n\n简述：\n       说道线程，离不开并行和串行，所谓并行，就是100赛跑，每个赛道就是一个线程，每个线程之间互不影响，同时都可以运行事件，就是10个赛道都可以有运动员跑步了，谁跑的慢或者跑的快，都不影响其他的人。串行就不一样了，串行是1个赛道10个运动员再跑接力赛，第一个跑到终点第二个在接着跑，依次类推，前边的不走，后边的也走不了的，所以串行上面的事件是一个一个运行的，同时只能是一个人再跑。\n\n在iOS或者OS里面，一般用GCD就能吃处理较多的事务，下面就谈一下GCD的用法。\n\n### 什么是GCD？\n全称是Grand Central Dispatch，可译为“牛逼的中枢调度器”\n纯C语言，提供了非常多强大的函数\n\n### methodList info\n```\n\n//获取主线程 就是更新UI的线程\ndispatch_queue_t dispatch_get_main_queue(void);\n\n //获取全局队列\ndispatch_queue_t dispatch_get_global_queue( long identifier, unsigned long flags);\n\n//创建一个队列 名字是label 属性可以写为NULL  \ndispatch_queue_t dispatch_queue_create( const char *label dispatch_queue_attr_t attr);\ndispatch_release(queue)//释放队列\n\n//获取代码现在运行的queue\ndispatch_queue_t dispatch_get_current_queue( void);\n\n //获取队列的名字\nconst char * dispatch_queue_get_label(dispatch_queue_t queue);\n\n//异步把代码块block交给queue队列中处理\ndispatch_async(dispatch_queue_t queue, dispatch_block_t block);\n\n// 同步将block加入到queue中并且执行。\nvoid dispatch_sync( dispatch_queue_t queue, dispatch_block_t block);\n\n //block 在指定时间在queue中执行\nvoid dispatch_after( dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block);\n\n \n//几个调度事件同事加入到queue中去，最好是全局队列才行。\nvoid dispatch_apply( size_t iterations, dispatch_queue_t queue, void (^block)( size_t));\n\n// block 是否执行过\nvoid dispatch_once( dispatch_once_t *predicate, dispatch_block_t block);\n \n//在分组group中的queue队列执行block\nvoid dispatch_group_async( dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block);\n\n//创建线程分组\ndispatch_group_t dispatch_group_create( void);\n\n //分组的计数+1\nvoid dispatch_group_enter( dispatch_group_t group);\n\n//分组计数 -1\nvoid dispatch_group_leave( dispatch_group_t group);\n\n// 当分组中的事务处理完了执行block\nvoid dispatch_group_notify( dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block);\n\n//等待timeout时间后执行 group中的事务\nlong dispatch_group_wait( dispatch_group_t group, dispatch_time_t timeout);\n\n //并行状态下 queue前面的并行事务处理完成了在执行block，然后执行下边的并行代码\n//比如 ABCDEF D事务等到ABC都完成了在执行EF事务的\nvoid dispatch_barrier_async( dispatch_queue_t queue, dispatch_block_t block);\n\n```\n### 实战演练全局队列\n\n```\n    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\n\ndispatch_async(queue, ^{\n        //异步执行\n        dispatch_sync(dispatch_get_main_queue(), ^{\n            //这里面更新UI\n        });\n    });\n    dispatch_sync(queue, ^{\n       //同步执行\n    });\n```\n### 自定义队列\n```\ndispatch_queue_t queue = dispatch_queue_create(\"com.apple.fgyong\", DISPATCH_QUEUE_SERIAL);\n    //\n//#define DISPATCH_QUEUE_SERIAL   同步队列\n//#define DISPATCH_QUEUE_CONCURRENT 异步队列\n    dispatch_async(queue, ^{\n        NSLog(@\"下载图片1=====%@\",[NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"下载图片2=====%@\",[NSThread currentThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"下载图片3=====%@\",[NSThread currentThread]);\n    });\n    NSLog(@\"main:%@\",[NSThread mainThread]);\n当queue属性为 DISPATCH_QUEUE_CONCURRENT输出：\n**2016-03-28 16:53:25.848 GCD_Demo[12338:347984] ****下载图片****3=====<NSThread: 0x7fabda100250>{number = 4, name = (null)}**\n**2016-03-28 16:53:25.848 GCD_Demo[12338:347982] ****下载图片****2=====<NSThread: 0x7fabda2008a0>{number = 3, name = (null)}**\n**2016-03-28 16:53:25.848 GCD_Demo[12338:347937] main:<NSThread: 0x7fabd8c04ee0>{number = 1, name = main}**\n**2016-03-28 16:53:25.848 GCD_Demo[12338:347981] ****下载图片****1=====<NSThread: 0x7fabd8c0a010>{number = 2, name = (null)}** 线程达到了4个\n当queue属性为DISPATCH_QUEUE_SERIAL输出：\n**2016-03-28 16:46:54.501 GCD_Demo[12272:344348] main:<NSThread: 0x7fd379704cf0>{number = 1, name = main}**\n**2016-03-28 16:46:54.501 GCD_Demo[12272:344382] ****下载图片****1=====<NSThread: 0x7fd37971bda0>{number = 2, name = (null)}**\n**2016-03-28 16:46:54.502 GCD_Demo[12272:344382] ****下载图片****2=====<NSThread: 0x7fd37971bda0>{number = 2, name = (null)}**\n**2016-03-28 16:46:54.502 GCD_Demo[12272:344382] ****下载图片****3=====<NSThread: 0x7fd37971bda0>{number = 2, name = (null)}**\n线程只有2个\n\n ```\n### 多个异步线程问题\n```\n# 当ABC 3个异步线程，要求前两个个执行完再去执行后面的三个的时候例子：\n     dispatch_queue_t queue = dispatch_queue_create(\"com.apple.fgyong\", DISPATCH_QUEUE_CONCURRENT);\n\n    dispatch_async(queue, ^{\n        NSLog(@\"queue1 begin\");\n        sleep(2);\n        NSLog(@\"queue1 end\");\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"queue2 begin\");\n        sleep(2);\n        NSLog(@\"queue2 end\");\n    });\n    dispatch_barrier_sync(queue, ^{\n        NSLog(@\"main:%@\",[NSThread mainThread]);\n    });\n    dispatch_async(queue, ^{\n        NSLog(@\"queue3 begin\");\n        sleep(2);\n        NSLog(@\"queue3 end\");\n    });\n输出：\n\n**2016-03-28 17:01:01.319 GCD_Demo[12463:353702] queue2 begin**\n**2016-03-28 17:01:01.319 GCD_Demo[12463:353703] queue1 begin**\n**2016-03-28 17:01:03.324 GCD_Demo[12463:353703] queue1 end**\n**2016-03-28 17:01:03.324 GCD_Demo[12463:353702] queue2 end**\n**2016-03-28 17:01:03.325 GCD_Demo[12463:353657] main:<NSThread: 0x7f97ea604bf0>{number = 1, name = main}**\n**2016-03-28 17:01:03.325 GCD_Demo[12463:353702] queue3 begin**\n**2016-03-28 17:01:05.330 GCD_Demo[12463:353702] queue3 end**\n```\n### 线程分组\n```\n# 当多个任务同时进行的时候，也可以用group，ABCD任务进行完成的时候，最后在执行task。\n \n\n  dispatch_queue_t queue = dispatch_queue_create(\"com.apple.fgyong\", DISPATCH_QUEUE_CONCURRENT);\n    dispatch_group_t group = dispatch_group_create();\n    dispatch_group_async(group, queue, ^{\n        \n        NSLog(@\"task1 begin\");\n        sleep(2);\n        NSLog(@\"task1 end\");\n    });\n    \n    dispatch_group_async(group, queue, ^{\n        \n        NSLog(@\"task2 begin\");\n        sleep(2);\n        NSLog(@\"task2 end\");\n    });\n    dispatch_group_notify(group, queue, ^{\n        NSLog(@\"=================\");\n    });\n    dispatch_group_async(group, queue, ^{\n        \n        NSLog(@\"task3 begin\");\n        sleep(2);\n        NSLog(@\"task3 end\");\n    });\n    \n    dispatch_group_async(group, queue, ^{\n        \n        NSLog(@\"task4 begin\");\n        sleep(2);\n        NSLog(@\"task4 end\");\n    });\n输出：\n**2016-03-28 17:08:45.002 GCD_Demo[12557:357162] task1 begin**\n**2016-03-28 17:08:45.002 GCD_Demo[12557:357164] task4 begin**\n**2016-03-28 17:08:45.002 GCD_Demo[12557:357161] task2 begin**\n**2016-03-28 17:08:45.002 GCD_Demo[12557:357163] task3 begin**\n**2016-03-28 17:08:47.005 GCD_Demo[12557:357162] task1 end**\n**2016-03-28 17:08:47.005 GCD_Demo[12557:357163] task3 end**\n**2016-03-28 17:08:47.005 GCD_Demo[12557:357164] task4 end**\n**2016-03-28 17:08:47.005 GCD_Demo[12557:357161] task2 end**\n**2016-03-28 17:08:47.006 GCD_Demo[12557:357161] =================**\n一个组内的所有任务都进行完了才会执行task的函数。\n\n\n# 分组多任务等待 ABCDEF ，ABCD执行5秒，5秒之后就执行EF任务，不管ABCD是否成功。\n\n    dispatch_queue_t queue = dispatch_queue_create(\"com.apple.fgyong\", DISPATCH_QUEUE_CONCURRENT);\n    dispatch_group_t group = dispatch_group_create();\n    dispatch_group_async(group, queue, ^{\n        \n        NSLog(@\"task1 begin\");\n        sleep(2);\n        NSLog(@\"task1 end\");\n    });\n    \n    dispatch_group_async(group, queue, ^{\n        \n        NSLog(@\"task2 begin\");\n        sleep(2);\n        NSLog(@\"task2 end\");\n    });\n    dispatch_group_notify(group, queue, ^{\n        NSLog(@\"=================\");\n    });\n    dispatch_group_async(group, queue, ^{\n        \n        NSLog(@\"task3 begin\");\n        sleep(6);\n        NSLog(@\"task3 end\");\n    });\n    dispatch_group_wait(group, dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5*NSEC_PER_SEC)));\n    NSLog(@\"all end\");\n    dispatch_group_async(group, queue, ^{\n        \n        NSLog(@\"task4 begin\");\n        sleep(2);\n        NSLog(@\"task4 end\");\n    });\n输出：\n# 代码执行到wait的时候会等待5秒之后再执行wait下边的代码，和sleep有点相似。\n**2016-03-28 17:26:31.335 GCD_Demo[12745:366983] task3 begin**\n**2016-03-28 17:26:31.335 GCD_Demo[12745:366978] task1 begin**\n**2016-03-28 17:26:31.335 GCD_Demo[12745:366979] task2 begin**\n**2016-03-28 17:26:33.340 GCD_Demo[12745:366978] task1 end**\n**2016-03-28 17:26:33.340 GCD_Demo[12745:366979] task2 end**\n**2016-03-28 17:26:36.336 GCD_Demo[12745:366894] all end**\n**2016-03-28 17:26:36.336 GCD_Demo[12745:366979] task4 begin**\n**2016-03-28 17:26:37.340 GCD_Demo[12745:366983] task3 end**\n**2016-03-28 17:26:38.342 GCD_Demo[12745:366979] task4 end**\n**2016-03-28 17:26:38.342 GCD_Demo[12745:366983] =================**\n```\n### 同时处理多数据不管顺序\n```\n          dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);\n    \n    \n          /*! dispatch_apply函数说明\n           10      *\n           11      *  @brief  dispatch_apply函数是dispatch_sync函数和Dispatch Group的关联API\n           12      *         该函数按指定的次数将指定的Block追加到指定的Dispatch Queue中,并等到全部的处理执行结束\n           13      *\n           14      *  @param 10    指定重复次数  指定10次\n           15      *  @param queue 追加对象的Dispatch Queue\n           16      *  @param index 带有参数的Block, index的作用是为了按执行的顺序区分各个Block\n           17      *\n           18      */\n          dispatch_apply(10, queue, ^(size_t index) {\n                  NSLog(@\"%d\", index);\n              \n              });\n          NSLog(@\"done\");\n输出：\n# 这个和上边讲的分组类似，多事务处理，处理结束后再执行代码。\n# 这个是同步的，代码按顺序执行，分组的是异步执行的block\n**2016-03-28 17:36:35.698 GCD_Demo[12857:372458] 1**\n**2016-03-28 17:36:35.698 GCD_Demo[12857:372463] 5**\n**2016-03-28 17:36:35.698 GCD_Demo[12857:372429] 4**\n**2016-03-28 17:36:35.698 GCD_Demo[12857:372464] 6**\n**2016-03-28 17:36:35.698 GCD_Demo[12857:372465] 7**\n**2016-03-28 17:36:35.698 GCD_Demo[12857:372462] 2**\n**2016-03-28 17:36:35.698 GCD_Demo[12857:372457] 0**\n**2016-03-28 17:36:35.698 GCD_Demo[12857:372461] 3**\n**2016-03-28 17:36:35.699 GCD_Demo[12857:372458] 8**\n**2016-03-28 17:36:35.699 GCD_Demo[12857:372429] 9**\n**2016-03-28 17:36:35.699 GCD_Demo[12857:372429] done**\n    \n```\n参考文章：[Grand Central Dispatch (GCD) Reference](https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/index.html#//apple_ref/c/macro/DISPATCH_QUEUE_CONCURRENT)\nGCD提供的接口蛮多的,适用场景还是要熟练掌握，才能运用自如。","slug":"iOS线程之GCD初探","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj45000bnhmfma5c9l91","content":"<p>简述：<br>       说道线程，离不开并行和串行，所谓并行，就是100赛跑，每个赛道就是一个线程，每个线程之间互不影响，同时都可以运行事件，就是10个赛道都可以有运动员跑步了，谁跑的慢或者跑的快，都不影响其他的人。串行就不一样了，串行是1个赛道10个运动员再跑接力赛，第一个跑到终点第二个在接着跑，依次类推，前边的不走，后边的也走不了的，所以串行上面的事件是一个一个运行的，同时只能是一个人再跑。</p>\n<p>在iOS或者OS里面，一般用GCD就能吃处理较多的事务，下面就谈一下GCD的用法。</p>\n<h3 id=\"u4EC0_u4E48_u662FGCD_uFF1F\"><a href=\"#u4EC0_u4E48_u662FGCD_uFF1F\" class=\"headerlink\" title=\"什么是GCD？\"></a>什么是GCD？</h3><p>全称是Grand Central Dispatch，可译为“牛逼的中枢调度器”<br>纯C语言，提供了非常多强大的函数</p>\n<h3 id=\"methodList_info\"><a href=\"#methodList_info\" class=\"headerlink\" title=\"methodList info\"></a>methodList info</h3><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取主线程 就是更新UI的线程</span></div><div class=\"line\"><span class=\"function\">dispatch_queue_t <span class=\"title\">dispatch_get_main_queue</span>(<span class=\"params\"><span class=\"keyword\">void</span></span>)</span>;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//获取全局队列</span></div><div class=\"line\"><span class=\"function\">dispatch_queue_t <span class=\"title\">dispatch_get_global_queue</span>(<span class=\"params\"> <span class=\"keyword\">long</span> identifier, unsigned <span class=\"keyword\">long</span> flags</span>)</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建一个队列 名字是label 属性可以写为NULL  </span></div><div class=\"line\"><span class=\"function\">dispatch_queue_t <span class=\"title\">dispatch_queue_create</span>(<span class=\"params\"> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *label dispatch_queue_attr_t attr</span>)</span>;</div><div class=\"line\">dispatch_release(queue)<span class=\"comment\">//释放队列</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取代码现在运行的queue</span></div><div class=\"line\"><span class=\"function\">dispatch_queue_t <span class=\"title\">dispatch_get_current_queue</span>(<span class=\"params\"> <span class=\"keyword\">void</span></span>)</span>;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//获取队列的名字</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * dispatch_queue_get_label(dispatch_queue_t queue);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//异步把代码块block交给queue队列中处理</span></div><div class=\"line\">dispatch_async(dispatch_queue_t queue, dispatch_block_t block);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 同步将block加入到queue中并且执行。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_sync</span>(<span class=\"params\"> dispatch_queue_t queue, dispatch_block_t block</span>)</span>;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//block 在指定时间在queue中执行</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_after</span>(<span class=\"params\"> dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block</span>)</span>;</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//几个调度事件同事加入到queue中去，最好是全局队列才行。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_apply</span>(<span class=\"params\"> size_t iterations, dispatch_queue_t queue, <span class=\"keyword\">void</span> (^block</span>)(<span class=\"params\"> size_t</span>))</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// block 是否执行过</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_once</span>(<span class=\"params\"> dispatch_once_t *predicate, dispatch_block_t block</span>)</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//在分组group中的queue队列执行block</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_group_async</span>(<span class=\"params\"> dispatch_group_t <span class=\"keyword\">group</span>, dispatch_queue_t queue, dispatch_block_t block</span>)</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建线程分组</span></div><div class=\"line\"><span class=\"function\">dispatch_group_t <span class=\"title\">dispatch_group_create</span>(<span class=\"params\"> <span class=\"keyword\">void</span></span>)</span>;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//分组的计数+1</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_group_enter</span>(<span class=\"params\"> dispatch_group_t <span class=\"keyword\">group</span></span>)</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//分组计数 -1</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_group_leave</span>(<span class=\"params\"> dispatch_group_t <span class=\"keyword\">group</span></span>)</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 当分组中的事务处理完了执行block</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_group_notify</span>(<span class=\"params\"> dispatch_group_t <span class=\"keyword\">group</span>, dispatch_queue_t queue, dispatch_block_t block</span>)</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//等待timeout时间后执行 group中的事务</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">dispatch_group_wait</span>(<span class=\"params\"> dispatch_group_t <span class=\"keyword\">group</span>, dispatch_time_t timeout</span>)</span>;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//并行状态下 queue前面的并行事务处理完成了在执行block，然后执行下边的并行代码</span></div><div class=\"line\"><span class=\"comment\">//比如 ABCDEF D事务等到ABC都完成了在执行EF事务的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_barrier_async</span>(<span class=\"params\"> dispatch_queue_t queue, dispatch_block_t block</span>)</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"u5B9E_u6218_u6F14_u7EC3_u5168_u5C40_u961F_u5217\"><a href=\"#u5B9E_u6218_u6F14_u7EC3_u5168_u5C40_u961F_u5217\" class=\"headerlink\" title=\"实战演练全局队列\"></a>实战演练全局队列</h3><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">    dispatch_queue_t queue = dispatch_get_global_queue(<span class=\"name\">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">dispatch_async(<span class=\"name\">queue</span>, ^&#123;</div><div class=\"line\">        //异步执行</div><div class=\"line\">        dispatch_sync(<span class=\"name\">dispatch_get_main_queue</span>(), ^&#123;</div><div class=\"line\">            //这里面更新UI</div><div class=\"line\">        &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    dispatch_sync(<span class=\"name\">queue</span>, ^&#123;</div><div class=\"line\">       //同步执行</div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<h3 id=\"u81EA_u5B9A_u4E49_u961F_u5217\"><a href=\"#u81EA_u5B9A_u4E49_u961F_u5217\" class=\"headerlink\" title=\"自定义队列\"></a>自定义队列</h3><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t <span class=\"attr\">queue</span> = dispatch_queue_create(<span class=\"string\">\"com.apple.fgyong\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">    //</div><div class=\"line\">//<span class=\"comment\">#define DISPATCH_QUEUE_SERIAL   同步队列</span></div><div class=\"line\">//<span class=\"comment\">#define DISPATCH_QUEUE_CONCURRENT 异步队列</span></div><div class=\"line\">    dispatch_async(queue, ^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"下载图片1=====%@\"</span>,[NSThread currentThread]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    dispatch_async(queue, ^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"下载图片2=====%@\"</span>,[NSThread currentThread]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    dispatch_async(queue, ^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"下载图片3=====%@\"</span>,[NSThread currentThread]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    NSLog(@<span class=\"string\">\"main:%@\"</span>,[NSThread mainThread]);</div><div class=\"line\">当queue属性为 DISPATCH_QUEUE_CONCURRENT输出：</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">28</span> <span class=\"number\">16</span>:<span class=\"number\">53</span>:<span class=\"number\">25.848</span> GCD_Demo[<span class=\"number\">12338</span>:<span class=\"number\">347984</span>] ****下载图片****<span class=\"number\">3</span>=====&lt;NSThread: <span class=\"number\">0</span>x7fabda100250&gt;&#123;<span class=\"attr\">number</span> = <span class=\"number\">4</span>, <span class=\"attr\">name</span> = (<span class=\"literal\">null</span>)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">28</span> <span class=\"number\">16</span>:<span class=\"number\">53</span>:<span class=\"number\">25.848</span> GCD_Demo[<span class=\"number\">12338</span>:<span class=\"number\">347982</span>] ****下载图片****<span class=\"number\">2</span>=====&lt;NSThread: <span class=\"number\">0</span>x7fabda2008a0&gt;&#123;<span class=\"attr\">number</span> = <span class=\"number\">3</span>, <span class=\"attr\">name</span> = (<span class=\"literal\">null</span>)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">28</span> <span class=\"number\">16</span>:<span class=\"number\">53</span>:<span class=\"number\">25.848</span> GCD_Demo[<span class=\"number\">12338</span>:<span class=\"number\">347937</span>] main:&lt;NSThread: <span class=\"number\">0</span>x7fabd8c04ee0&gt;&#123;<span class=\"attr\">number</span> = <span class=\"number\">1</span>, <span class=\"attr\">name</span> = main&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">28</span> <span class=\"number\">16</span>:<span class=\"number\">53</span>:<span class=\"number\">25.848</span> GCD_Demo[<span class=\"number\">12338</span>:<span class=\"number\">347981</span>] ****下载图片****<span class=\"number\">1</span>=====&lt;NSThread: <span class=\"number\">0</span>x7fabd8c0a010&gt;&#123;<span class=\"attr\">number</span> = <span class=\"number\">2</span>, <span class=\"attr\">name</span> = (<span class=\"literal\">null</span>)&#125;** 线程达到了<span class=\"number\">4</span>个</div><div class=\"line\">当queue属性为DISPATCH_QUEUE_SERIAL输出：</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">28</span> <span class=\"number\">16</span>:<span class=\"number\">46</span>:<span class=\"number\">54.501</span> GCD_Demo[<span class=\"number\">12272</span>:<span class=\"number\">344348</span>] main:&lt;NSThread: <span class=\"number\">0</span>x7fd379704cf0&gt;&#123;<span class=\"attr\">number</span> = <span class=\"number\">1</span>, <span class=\"attr\">name</span> = main&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">28</span> <span class=\"number\">16</span>:<span class=\"number\">46</span>:<span class=\"number\">54.501</span> GCD_Demo[<span class=\"number\">12272</span>:<span class=\"number\">344382</span>] ****下载图片****<span class=\"number\">1</span>=====&lt;NSThread: <span class=\"number\">0</span>x7fd37971bda0&gt;&#123;<span class=\"attr\">number</span> = <span class=\"number\">2</span>, <span class=\"attr\">name</span> = (<span class=\"literal\">null</span>)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">28</span> <span class=\"number\">16</span>:<span class=\"number\">46</span>:<span class=\"number\">54.502</span> GCD_Demo[<span class=\"number\">12272</span>:<span class=\"number\">344382</span>] ****下载图片****<span class=\"number\">2</span>=====&lt;NSThread: <span class=\"number\">0</span>x7fd37971bda0&gt;&#123;<span class=\"attr\">number</span> = <span class=\"number\">2</span>, <span class=\"attr\">name</span> = (<span class=\"literal\">null</span>)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">28</span> <span class=\"number\">16</span>:<span class=\"number\">46</span>:<span class=\"number\">54.502</span> GCD_Demo[<span class=\"number\">12272</span>:<span class=\"number\">344382</span>] ****下载图片****<span class=\"number\">3</span>=====&lt;NSThread: <span class=\"number\">0</span>x7fd37971bda0&gt;&#123;<span class=\"attr\">number</span> = <span class=\"number\">2</span>, <span class=\"attr\">name</span> = (<span class=\"literal\">null</span>)&#125;**</div><div class=\"line\">线程只有<span class=\"number\">2</span>个</div></pre></td></tr></table></figure>\n<h3 id=\"u591A_u4E2A_u5F02_u6B65_u7EBF_u7A0B_u95EE_u9898\"><a href=\"#u591A_u4E2A_u5F02_u6B65_u7EBF_u7A0B_u95EE_u9898\" class=\"headerlink\" title=\"多个异步线程问题\"></a>多个异步线程问题</h3><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 当ABC 3个异步线程，要求前两个个执行完再去执行后面的三个的时候例子：</span></div><div class=\"line\">     <span class=\"keyword\">dispatch_queue_t </span>queue = <span class=\"keyword\">dispatch_queue_create(\"com.apple.fgyong\", </span><span class=\"keyword\">DISPATCH_QUEUE_CONCURRENT);</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">dispatch_async(queue, </span>^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"queue1 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"queue1 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_async(queue, </span>^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"queue2 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"queue2 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_barrier_sync(queue, </span>^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"main:%@\"</span>,[NSThread mainThread])<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_async(queue, </span>^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"queue3 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"queue3 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">输出：</div><div class=\"line\"></div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">01</span>:<span class=\"number\">01</span>.<span class=\"number\">319</span> GCD_Demo[<span class=\"number\">12463</span>:<span class=\"number\">353702</span>] queue2 <span class=\"keyword\">begin**</span></div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">01</span>:<span class=\"number\">01</span>.<span class=\"number\">319</span> GCD_Demo[<span class=\"number\">12463</span>:<span class=\"number\">353703</span>] queue1 <span class=\"keyword\">begin**</span></div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">01</span>:<span class=\"number\">03</span>.<span class=\"number\">324</span> GCD_Demo[<span class=\"number\">12463</span>:<span class=\"number\">353703</span>] queue1 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">01</span>:<span class=\"number\">03</span>.<span class=\"number\">324</span> GCD_Demo[<span class=\"number\">12463</span>:<span class=\"number\">353702</span>] queue2 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">01</span>:<span class=\"number\">03</span>.<span class=\"number\">325</span> GCD_Demo[<span class=\"number\">12463</span>:<span class=\"number\">353657</span>] main:&lt;NSThread: <span class=\"number\">0x7f97ea604bf0</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">01</span>:<span class=\"number\">03</span>.<span class=\"number\">325</span> GCD_Demo[<span class=\"number\">12463</span>:<span class=\"number\">353702</span>] queue3 <span class=\"keyword\">begin**</span></div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">01</span>:<span class=\"number\">05</span>.<span class=\"number\">330</span> GCD_Demo[<span class=\"number\">12463</span>:<span class=\"number\">353702</span>] queue3 end**</div></pre></td></tr></table></figure>\n<h3 id=\"u7EBF_u7A0B_u5206_u7EC4\"><a href=\"#u7EBF_u7A0B_u5206_u7EC4\" class=\"headerlink\" title=\"线程分组\"></a>线程分组</h3><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 当多个任务同时进行的时候，也可以用group，ABCD任务进行完成的时候，最后在执行task。</span></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">dispatch_queue_t </span>queue = <span class=\"keyword\">dispatch_queue_create(\"com.apple.fgyong\", </span><span class=\"keyword\">DISPATCH_QUEUE_CONCURRENT);</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_group_t </span>group = <span class=\"keyword\">dispatch_group_create();</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_group_async(group, </span>queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@<span class=\"string\">\"task1 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"task1 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">dispatch_group_async(group, </span>queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@<span class=\"string\">\"task2 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"task2 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_group_notify(group, </span>queue, ^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"=================\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_group_async(group, </span>queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@<span class=\"string\">\"task3 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"task3 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">dispatch_group_async(group, </span>queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@<span class=\"string\">\"task4 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"task4 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">输出：</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">45</span>.<span class=\"number\">002</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357162</span>] task1 <span class=\"keyword\">begin**</span></div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">45</span>.<span class=\"number\">002</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357164</span>] task4 <span class=\"keyword\">begin**</span></div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">45</span>.<span class=\"number\">002</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357161</span>] task2 <span class=\"keyword\">begin**</span></div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">45</span>.<span class=\"number\">002</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357163</span>] task3 <span class=\"keyword\">begin**</span></div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">47</span>.<span class=\"number\">005</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357162</span>] task1 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">47</span>.<span class=\"number\">005</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357163</span>] task3 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">47</span>.<span class=\"number\">005</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357164</span>] task4 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">47</span>.<span class=\"number\">005</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357161</span>] task2 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">47</span>.<span class=\"number\">006</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357161</span>] =================**</div><div class=\"line\">一个组内的所有任务都进行完了才会执行task的函数。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 分组多任务等待 ABCDEF ，ABCD执行5秒，5秒之后就执行EF任务，不管ABCD是否成功。</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">dispatch_queue_t </span>queue = <span class=\"keyword\">dispatch_queue_create(\"com.apple.fgyong\", </span><span class=\"keyword\">DISPATCH_QUEUE_CONCURRENT);</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_group_t </span>group = <span class=\"keyword\">dispatch_group_create();</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_group_async(group, </span>queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@<span class=\"string\">\"task1 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"task1 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">dispatch_group_async(group, </span>queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@<span class=\"string\">\"task2 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"task2 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_group_notify(group, </span>queue, ^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"=================\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_group_async(group, </span>queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@<span class=\"string\">\"task3 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">6</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"task3 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_group_wait(group, </span><span class=\"keyword\">dispatch_time(DISPATCH_TIME_NOW, </span>(int64_t)(<span class=\"number\">5</span>*NSEC_PER_SEC)))<span class=\"comment\">;</span></div><div class=\"line\">    NSLog(@<span class=\"string\">\"all end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_group_async(group, </span>queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@<span class=\"string\">\"task4 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"task4 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">输出：</div><div class=\"line\"><span class=\"comment\"># 代码执行到wait的时候会等待5秒之后再执行wait下边的代码，和sleep有点相似。</span></div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">31</span>.<span class=\"number\">335</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366983</span>] task3 <span class=\"keyword\">begin**</span></div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">31</span>.<span class=\"number\">335</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366978</span>] task1 <span class=\"keyword\">begin**</span></div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">31</span>.<span class=\"number\">335</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366979</span>] task2 <span class=\"keyword\">begin**</span></div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">33</span>.<span class=\"number\">340</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366978</span>] task1 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">33</span>.<span class=\"number\">340</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366979</span>] task2 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">36</span>.<span class=\"number\">336</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366894</span>] all end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">36</span>.<span class=\"number\">336</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366979</span>] task4 <span class=\"keyword\">begin**</span></div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">37</span>.<span class=\"number\">340</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366983</span>] task3 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">38</span>.<span class=\"number\">342</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366979</span>] task4 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">38</span>.<span class=\"number\">342</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366983</span>] =================**</div></pre></td></tr></table></figure>\n<h3 id=\"u540C_u65F6_u5904_u7406_u591A_u6570_u636E_u4E0D_u7BA1_u987A_u5E8F\"><a href=\"#u540C_u65F6_u5904_u7406_u591A_u6570_u636E_u4E0D_u7BA1_u987A_u5E8F\" class=\"headerlink\" title=\"同时处理多数据不管顺序\"></a>同时处理多数据不管顺序</h3><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">          dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">          /*! dispatch_apply函数说明</div><div class=\"line\">           <span class=\"number\">10</span>      *</div><div class=\"line\">           <span class=\"number\">11</span>      *  @brief  dispatch_apply函数是dispatch_sync函数和Dispatch Group的关联API</div><div class=\"line\">           <span class=\"number\">12</span>      *         该函数按指定的次数将指定的Block追加到指定的Dispatch Queue中,并等到全部的处理执行结束</div><div class=\"line\">           <span class=\"number\">13</span>      *</div><div class=\"line\">           <span class=\"number\">14</span>      *  @param <span class=\"number\">10</span>    指定重复次数  指定<span class=\"number\">10</span>次</div><div class=\"line\">           <span class=\"number\">15</span>      *  @param queue 追加对象的Dispatch Queue</div><div class=\"line\">           <span class=\"number\">16</span>      *  @param index 带有参数的Block, index的作用是为了按执行的顺序区分各个Block</div><div class=\"line\">           <span class=\"number\">17</span>      *</div><div class=\"line\">           <span class=\"number\">18</span>      */</div><div class=\"line\">          dispatch_apply(<span class=\"number\">10</span>, queue, ^(size_t index) &#123;</div><div class=\"line\">                  NSLog(@\"%d\", index)<span class=\"comment\">;</span></div><div class=\"line\">              </div><div class=\"line\">              &#125;)<span class=\"comment\">;</span></div><div class=\"line\">          NSLog(@\"done\")<span class=\"comment\">;</span></div><div class=\"line\">输出：</div><div class=\"line\"># 这个和上边讲的分组类似，多事务处理，处理结束后再执行代码。</div><div class=\"line\"># 这个是同步的，代码按顺序执行，分组的是异步执行的block</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.698</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372458</span>] <span class=\"number\">1</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.698</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372463</span>] <span class=\"number\">5</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.698</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372429</span>] <span class=\"number\">4</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.698</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372464</span>] <span class=\"number\">6</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.698</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372465</span>] <span class=\"number\">7</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.698</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372462</span>] <span class=\"number\">2</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.698</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372457</span>] <span class=\"number\">0</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.698</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372461</span>] <span class=\"number\">3</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.699</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372458</span>] <span class=\"number\">8</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.699</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372429</span>] <span class=\"number\">9</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.699</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372429</span>] done**</div></pre></td></tr></table></figure>\n<p>参考文章：<a href=\"https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/index.html#//apple_ref/c/macro/DISPATCH_QUEUE_CONCURRENT\" target=\"_blank\" rel=\"external\">Grand Central Dispatch (GCD) Reference</a><br>GCD提供的接口蛮多的,适用场景还是要熟练掌握，才能运用自如。</p>\n","excerpt":"","more":"<p>简述：<br>       说道线程，离不开并行和串行，所谓并行，就是100赛跑，每个赛道就是一个线程，每个线程之间互不影响，同时都可以运行事件，就是10个赛道都可以有运动员跑步了，谁跑的慢或者跑的快，都不影响其他的人。串行就不一样了，串行是1个赛道10个运动员再跑接力赛，第一个跑到终点第二个在接着跑，依次类推，前边的不走，后边的也走不了的，所以串行上面的事件是一个一个运行的，同时只能是一个人再跑。</p>\n<p>在iOS或者OS里面，一般用GCD就能吃处理较多的事务，下面就谈一下GCD的用法。</p>\n<h3 id=\"u4EC0_u4E48_u662FGCD_uFF1F\"><a href=\"#u4EC0_u4E48_u662FGCD_uFF1F\" class=\"headerlink\" title=\"什么是GCD？\"></a>什么是GCD？</h3><p>全称是Grand Central Dispatch，可译为“牛逼的中枢调度器”<br>纯C语言，提供了非常多强大的函数</p>\n<h3 id=\"methodList_info\"><a href=\"#methodList_info\" class=\"headerlink\" title=\"methodList info\"></a>methodList info</h3><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取主线程 就是更新UI的线程</span></div><div class=\"line\"><span class=\"function\">dispatch_queue_t <span class=\"title\">dispatch_get_main_queue</span>(<span class=\"params\"><span class=\"keyword\">void</span></span>)</span>;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//获取全局队列</span></div><div class=\"line\"><span class=\"function\">dispatch_queue_t <span class=\"title\">dispatch_get_global_queue</span>(<span class=\"params\"> <span class=\"keyword\">long</span> identifier, unsigned <span class=\"keyword\">long</span> flags</span>)</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建一个队列 名字是label 属性可以写为NULL  </span></div><div class=\"line\"><span class=\"function\">dispatch_queue_t <span class=\"title\">dispatch_queue_create</span>(<span class=\"params\"> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *label dispatch_queue_attr_t attr</span>)</span>;</div><div class=\"line\">dispatch_release(queue)<span class=\"comment\">//释放队列</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取代码现在运行的queue</span></div><div class=\"line\"><span class=\"function\">dispatch_queue_t <span class=\"title\">dispatch_get_current_queue</span>(<span class=\"params\"> <span class=\"keyword\">void</span></span>)</span>;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//获取队列的名字</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * dispatch_queue_get_label(dispatch_queue_t queue);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//异步把代码块block交给queue队列中处理</span></div><div class=\"line\">dispatch_async(dispatch_queue_t queue, dispatch_block_t block);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 同步将block加入到queue中并且执行。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_sync</span>(<span class=\"params\"> dispatch_queue_t queue, dispatch_block_t block</span>)</span>;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//block 在指定时间在queue中执行</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_after</span>(<span class=\"params\"> dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block</span>)</span>;</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//几个调度事件同事加入到queue中去，最好是全局队列才行。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_apply</span>(<span class=\"params\"> size_t iterations, dispatch_queue_t queue, <span class=\"keyword\">void</span> (^block</span>)(<span class=\"params\"> size_t</span>))</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// block 是否执行过</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_once</span>(<span class=\"params\"> dispatch_once_t *predicate, dispatch_block_t block</span>)</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//在分组group中的queue队列执行block</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_group_async</span>(<span class=\"params\"> dispatch_group_t <span class=\"keyword\">group</span>, dispatch_queue_t queue, dispatch_block_t block</span>)</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建线程分组</span></div><div class=\"line\"><span class=\"function\">dispatch_group_t <span class=\"title\">dispatch_group_create</span>(<span class=\"params\"> <span class=\"keyword\">void</span></span>)</span>;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//分组的计数+1</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_group_enter</span>(<span class=\"params\"> dispatch_group_t <span class=\"keyword\">group</span></span>)</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//分组计数 -1</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_group_leave</span>(<span class=\"params\"> dispatch_group_t <span class=\"keyword\">group</span></span>)</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 当分组中的事务处理完了执行block</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_group_notify</span>(<span class=\"params\"> dispatch_group_t <span class=\"keyword\">group</span>, dispatch_queue_t queue, dispatch_block_t block</span>)</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//等待timeout时间后执行 group中的事务</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">dispatch_group_wait</span>(<span class=\"params\"> dispatch_group_t <span class=\"keyword\">group</span>, dispatch_time_t timeout</span>)</span>;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//并行状态下 queue前面的并行事务处理完成了在执行block，然后执行下边的并行代码</span></div><div class=\"line\"><span class=\"comment\">//比如 ABCDEF D事务等到ABC都完成了在执行EF事务的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatch_barrier_async</span>(<span class=\"params\"> dispatch_queue_t queue, dispatch_block_t block</span>)</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"u5B9E_u6218_u6F14_u7EC3_u5168_u5C40_u961F_u5217\"><a href=\"#u5B9E_u6218_u6F14_u7EC3_u5168_u5C40_u961F_u5217\" class=\"headerlink\" title=\"实战演练全局队列\"></a>实战演练全局队列</h3><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">    dispatch_queue_t queue = dispatch_get_global_queue(<span class=\"name\">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">dispatch_async(<span class=\"name\">queue</span>, ^&#123;</div><div class=\"line\">        //异步执行</div><div class=\"line\">        dispatch_sync(<span class=\"name\">dispatch_get_main_queue</span>(), ^&#123;</div><div class=\"line\">            //这里面更新UI</div><div class=\"line\">        &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    dispatch_sync(<span class=\"name\">queue</span>, ^&#123;</div><div class=\"line\">       //同步执行</div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<h3 id=\"u81EA_u5B9A_u4E49_u961F_u5217\"><a href=\"#u81EA_u5B9A_u4E49_u961F_u5217\" class=\"headerlink\" title=\"自定义队列\"></a>自定义队列</h3><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_queue_t <span class=\"attr\">queue</span> = dispatch_queue_create(<span class=\"string\">\"com.apple.fgyong\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">    //</div><div class=\"line\">//<span class=\"comment\">#define DISPATCH_QUEUE_SERIAL   同步队列</span></div><div class=\"line\">//<span class=\"comment\">#define DISPATCH_QUEUE_CONCURRENT 异步队列</span></div><div class=\"line\">    dispatch_async(queue, ^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"下载图片1=====%@\"</span>,[NSThread currentThread]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    dispatch_async(queue, ^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"下载图片2=====%@\"</span>,[NSThread currentThread]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    dispatch_async(queue, ^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"下载图片3=====%@\"</span>,[NSThread currentThread]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    NSLog(@<span class=\"string\">\"main:%@\"</span>,[NSThread mainThread]);</div><div class=\"line\">当queue属性为 DISPATCH_QUEUE_CONCURRENT输出：</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">28</span> <span class=\"number\">16</span>:<span class=\"number\">53</span>:<span class=\"number\">25.848</span> GCD_Demo[<span class=\"number\">12338</span>:<span class=\"number\">347984</span>] ****下载图片****<span class=\"number\">3</span>=====&lt;NSThread: <span class=\"number\">0</span>x7fabda100250&gt;&#123;<span class=\"attr\">number</span> = <span class=\"number\">4</span>, <span class=\"attr\">name</span> = (<span class=\"literal\">null</span>)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">28</span> <span class=\"number\">16</span>:<span class=\"number\">53</span>:<span class=\"number\">25.848</span> GCD_Demo[<span class=\"number\">12338</span>:<span class=\"number\">347982</span>] ****下载图片****<span class=\"number\">2</span>=====&lt;NSThread: <span class=\"number\">0</span>x7fabda2008a0&gt;&#123;<span class=\"attr\">number</span> = <span class=\"number\">3</span>, <span class=\"attr\">name</span> = (<span class=\"literal\">null</span>)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">28</span> <span class=\"number\">16</span>:<span class=\"number\">53</span>:<span class=\"number\">25.848</span> GCD_Demo[<span class=\"number\">12338</span>:<span class=\"number\">347937</span>] main:&lt;NSThread: <span class=\"number\">0</span>x7fabd8c04ee0&gt;&#123;<span class=\"attr\">number</span> = <span class=\"number\">1</span>, <span class=\"attr\">name</span> = main&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">28</span> <span class=\"number\">16</span>:<span class=\"number\">53</span>:<span class=\"number\">25.848</span> GCD_Demo[<span class=\"number\">12338</span>:<span class=\"number\">347981</span>] ****下载图片****<span class=\"number\">1</span>=====&lt;NSThread: <span class=\"number\">0</span>x7fabd8c0a010&gt;&#123;<span class=\"attr\">number</span> = <span class=\"number\">2</span>, <span class=\"attr\">name</span> = (<span class=\"literal\">null</span>)&#125;** 线程达到了<span class=\"number\">4</span>个</div><div class=\"line\">当queue属性为DISPATCH_QUEUE_SERIAL输出：</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">28</span> <span class=\"number\">16</span>:<span class=\"number\">46</span>:<span class=\"number\">54.501</span> GCD_Demo[<span class=\"number\">12272</span>:<span class=\"number\">344348</span>] main:&lt;NSThread: <span class=\"number\">0</span>x7fd379704cf0&gt;&#123;<span class=\"attr\">number</span> = <span class=\"number\">1</span>, <span class=\"attr\">name</span> = main&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">28</span> <span class=\"number\">16</span>:<span class=\"number\">46</span>:<span class=\"number\">54.501</span> GCD_Demo[<span class=\"number\">12272</span>:<span class=\"number\">344382</span>] ****下载图片****<span class=\"number\">1</span>=====&lt;NSThread: <span class=\"number\">0</span>x7fd37971bda0&gt;&#123;<span class=\"attr\">number</span> = <span class=\"number\">2</span>, <span class=\"attr\">name</span> = (<span class=\"literal\">null</span>)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">28</span> <span class=\"number\">16</span>:<span class=\"number\">46</span>:<span class=\"number\">54.502</span> GCD_Demo[<span class=\"number\">12272</span>:<span class=\"number\">344382</span>] ****下载图片****<span class=\"number\">2</span>=====&lt;NSThread: <span class=\"number\">0</span>x7fd37971bda0&gt;&#123;<span class=\"attr\">number</span> = <span class=\"number\">2</span>, <span class=\"attr\">name</span> = (<span class=\"literal\">null</span>)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">28</span> <span class=\"number\">16</span>:<span class=\"number\">46</span>:<span class=\"number\">54.502</span> GCD_Demo[<span class=\"number\">12272</span>:<span class=\"number\">344382</span>] ****下载图片****<span class=\"number\">3</span>=====&lt;NSThread: <span class=\"number\">0</span>x7fd37971bda0&gt;&#123;<span class=\"attr\">number</span> = <span class=\"number\">2</span>, <span class=\"attr\">name</span> = (<span class=\"literal\">null</span>)&#125;**</div><div class=\"line\">线程只有<span class=\"number\">2</span>个</div></pre></td></tr></table></figure>\n<h3 id=\"u591A_u4E2A_u5F02_u6B65_u7EBF_u7A0B_u95EE_u9898\"><a href=\"#u591A_u4E2A_u5F02_u6B65_u7EBF_u7A0B_u95EE_u9898\" class=\"headerlink\" title=\"多个异步线程问题\"></a>多个异步线程问题</h3><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 当ABC 3个异步线程，要求前两个个执行完再去执行后面的三个的时候例子：</span></div><div class=\"line\">     <span class=\"keyword\">dispatch_queue_t </span>queue = <span class=\"keyword\">dispatch_queue_create(\"com.apple.fgyong\", </span><span class=\"keyword\">DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\"></span></div><div class=\"line\">    <span class=\"keyword\">dispatch_async(queue, </span>^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"queue1 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"queue1 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_async(queue, </span>^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"queue2 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"queue2 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_barrier_sync(queue, </span>^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"main:%@\"</span>,[NSThread mainThread])<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_async(queue, </span>^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"queue3 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"queue3 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">输出：</div><div class=\"line\"></div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">01</span>:<span class=\"number\">01</span>.<span class=\"number\">319</span> GCD_Demo[<span class=\"number\">12463</span>:<span class=\"number\">353702</span>] queue2 <span class=\"keyword\">begin**</div><div class=\"line\"></span>**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">01</span>:<span class=\"number\">01</span>.<span class=\"number\">319</span> GCD_Demo[<span class=\"number\">12463</span>:<span class=\"number\">353703</span>] queue1 <span class=\"keyword\">begin**</div><div class=\"line\"></span>**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">01</span>:<span class=\"number\">03</span>.<span class=\"number\">324</span> GCD_Demo[<span class=\"number\">12463</span>:<span class=\"number\">353703</span>] queue1 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">01</span>:<span class=\"number\">03</span>.<span class=\"number\">324</span> GCD_Demo[<span class=\"number\">12463</span>:<span class=\"number\">353702</span>] queue2 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">01</span>:<span class=\"number\">03</span>.<span class=\"number\">325</span> GCD_Demo[<span class=\"number\">12463</span>:<span class=\"number\">353657</span>] main:&lt;NSThread: <span class=\"number\">0x7f97ea604bf0</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">01</span>:<span class=\"number\">03</span>.<span class=\"number\">325</span> GCD_Demo[<span class=\"number\">12463</span>:<span class=\"number\">353702</span>] queue3 <span class=\"keyword\">begin**</div><div class=\"line\"></span>**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">01</span>:<span class=\"number\">05</span>.<span class=\"number\">330</span> GCD_Demo[<span class=\"number\">12463</span>:<span class=\"number\">353702</span>] queue3 end**</div></pre></td></tr></table></figure>\n<h3 id=\"u7EBF_u7A0B_u5206_u7EC4\"><a href=\"#u7EBF_u7A0B_u5206_u7EC4\" class=\"headerlink\" title=\"线程分组\"></a>线程分组</h3><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 当多个任务同时进行的时候，也可以用group，ABCD任务进行完成的时候，最后在执行task。</span></div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">dispatch_queue_t </span>queue = <span class=\"keyword\">dispatch_queue_create(\"com.apple.fgyong\", </span><span class=\"keyword\">DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\"></span>    <span class=\"keyword\">dispatch_group_t </span>group = <span class=\"keyword\">dispatch_group_create();</div><div class=\"line\"></span>    <span class=\"keyword\">dispatch_group_async(group, </span>queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@<span class=\"string\">\"task1 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"task1 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">dispatch_group_async(group, </span>queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@<span class=\"string\">\"task2 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"task2 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_group_notify(group, </span>queue, ^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"=================\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_group_async(group, </span>queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@<span class=\"string\">\"task3 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"task3 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">dispatch_group_async(group, </span>queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@<span class=\"string\">\"task4 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"task4 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">输出：</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">45</span>.<span class=\"number\">002</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357162</span>] task1 <span class=\"keyword\">begin**</div><div class=\"line\"></span>**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">45</span>.<span class=\"number\">002</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357164</span>] task4 <span class=\"keyword\">begin**</div><div class=\"line\"></span>**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">45</span>.<span class=\"number\">002</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357161</span>] task2 <span class=\"keyword\">begin**</div><div class=\"line\"></span>**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">45</span>.<span class=\"number\">002</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357163</span>] task3 <span class=\"keyword\">begin**</div><div class=\"line\"></span>**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">47</span>.<span class=\"number\">005</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357162</span>] task1 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">47</span>.<span class=\"number\">005</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357163</span>] task3 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">47</span>.<span class=\"number\">005</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357164</span>] task4 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">47</span>.<span class=\"number\">005</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357161</span>] task2 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">08</span>:<span class=\"number\">47</span>.<span class=\"number\">006</span> GCD_Demo[<span class=\"number\">12557</span>:<span class=\"number\">357161</span>] =================**</div><div class=\"line\">一个组内的所有任务都进行完了才会执行task的函数。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 分组多任务等待 ABCDEF ，ABCD执行5秒，5秒之后就执行EF任务，不管ABCD是否成功。</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">dispatch_queue_t </span>queue = <span class=\"keyword\">dispatch_queue_create(\"com.apple.fgyong\", </span><span class=\"keyword\">DISPATCH_QUEUE_CONCURRENT);</div><div class=\"line\"></span>    <span class=\"keyword\">dispatch_group_t </span>group = <span class=\"keyword\">dispatch_group_create();</div><div class=\"line\"></span>    <span class=\"keyword\">dispatch_group_async(group, </span>queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@<span class=\"string\">\"task1 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"task1 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">dispatch_group_async(group, </span>queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@<span class=\"string\">\"task2 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"task2 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_group_notify(group, </span>queue, ^&#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"=================\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_group_async(group, </span>queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@<span class=\"string\">\"task3 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">6</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"task3 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_group_wait(group, </span><span class=\"keyword\">dispatch_time(DISPATCH_TIME_NOW, </span>(int64_t)(<span class=\"number\">5</span>*NSEC_PER_SEC)))<span class=\"comment\">;</span></div><div class=\"line\">    NSLog(@<span class=\"string\">\"all end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    <span class=\"keyword\">dispatch_group_async(group, </span>queue, ^&#123;</div><div class=\"line\">        </div><div class=\"line\">        NSLog(@<span class=\"string\">\"task4 begin\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(@<span class=\"string\">\"task4 end\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">输出：</div><div class=\"line\"><span class=\"comment\"># 代码执行到wait的时候会等待5秒之后再执行wait下边的代码，和sleep有点相似。</span></div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">31</span>.<span class=\"number\">335</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366983</span>] task3 <span class=\"keyword\">begin**</div><div class=\"line\"></span>**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">31</span>.<span class=\"number\">335</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366978</span>] task1 <span class=\"keyword\">begin**</div><div class=\"line\"></span>**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">31</span>.<span class=\"number\">335</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366979</span>] task2 <span class=\"keyword\">begin**</div><div class=\"line\"></span>**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">33</span>.<span class=\"number\">340</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366978</span>] task1 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">33</span>.<span class=\"number\">340</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366979</span>] task2 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">36</span>.<span class=\"number\">336</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366894</span>] all end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">36</span>.<span class=\"number\">336</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366979</span>] task4 <span class=\"keyword\">begin**</div><div class=\"line\"></span>**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">37</span>.<span class=\"number\">340</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366983</span>] task3 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">38</span>.<span class=\"number\">342</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366979</span>] task4 end**</div><div class=\"line\">**<span class=\"number\">2016</span>-03-28 <span class=\"number\">17</span>:<span class=\"number\">26</span>:<span class=\"number\">38</span>.<span class=\"number\">342</span> GCD_Demo[<span class=\"number\">12745</span>:<span class=\"number\">366983</span>] =================**</div></pre></td></tr></table></figure>\n<h3 id=\"u540C_u65F6_u5904_u7406_u591A_u6570_u636E_u4E0D_u7BA1_u987A_u5E8F\"><a href=\"#u540C_u65F6_u5904_u7406_u591A_u6570_u636E_u4E0D_u7BA1_u987A_u5E8F\" class=\"headerlink\" title=\"同时处理多数据不管顺序\"></a>同时处理多数据不管顺序</h3><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">          dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">          /*! dispatch_apply函数说明</div><div class=\"line\">           <span class=\"number\">10</span>      *</div><div class=\"line\">           <span class=\"number\">11</span>      *  @brief  dispatch_apply函数是dispatch_sync函数和Dispatch Group的关联API</div><div class=\"line\">           <span class=\"number\">12</span>      *         该函数按指定的次数将指定的Block追加到指定的Dispatch Queue中,并等到全部的处理执行结束</div><div class=\"line\">           <span class=\"number\">13</span>      *</div><div class=\"line\">           <span class=\"number\">14</span>      *  @param <span class=\"number\">10</span>    指定重复次数  指定<span class=\"number\">10</span>次</div><div class=\"line\">           <span class=\"number\">15</span>      *  @param queue 追加对象的Dispatch Queue</div><div class=\"line\">           <span class=\"number\">16</span>      *  @param index 带有参数的Block, index的作用是为了按执行的顺序区分各个Block</div><div class=\"line\">           <span class=\"number\">17</span>      *</div><div class=\"line\">           <span class=\"number\">18</span>      */</div><div class=\"line\">          dispatch_apply(<span class=\"number\">10</span>, queue, ^(size_t index) &#123;</div><div class=\"line\">                  NSLog(@\"%d\", index)<span class=\"comment\">;</span></div><div class=\"line\">              </div><div class=\"line\">              &#125;)<span class=\"comment\">;</span></div><div class=\"line\">          NSLog(@\"done\")<span class=\"comment\">;</span></div><div class=\"line\">输出：</div><div class=\"line\"># 这个和上边讲的分组类似，多事务处理，处理结束后再执行代码。</div><div class=\"line\"># 这个是同步的，代码按顺序执行，分组的是异步执行的block</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.698</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372458</span>] <span class=\"number\">1</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.698</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372463</span>] <span class=\"number\">5</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.698</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372429</span>] <span class=\"number\">4</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.698</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372464</span>] <span class=\"number\">6</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.698</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372465</span>] <span class=\"number\">7</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.698</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372462</span>] <span class=\"number\">2</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.698</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372457</span>] <span class=\"number\">0</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.698</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372461</span>] <span class=\"number\">3</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.699</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372458</span>] <span class=\"number\">8</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.699</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372429</span>] <span class=\"number\">9</span>**</div><div class=\"line\">**<span class=\"number\">2016-03-28</span> <span class=\"number\">17</span>:<span class=\"number\">36:35.699</span> GCD_Demo[<span class=\"number\">12857</span>:<span class=\"number\">372429</span>] done**</div></pre></td></tr></table></figure>\n<p>参考文章：<a href=\"https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/index.html#//apple_ref/c/macro/DISPATCH_QUEUE_CONCURRENT\">Grand Central Dispatch (GCD) Reference</a><br>GCD提供的接口蛮多的,适用场景还是要熟练掌握，才能运用自如。</p>\n"},{"title":"iOS线程之NSOperation","date":"2016-03-31T06:47:47.000Z","_content":"\n前篇文章已经讲了GCD了，那么这两者有什么区别？\n### GCD VS   NSOperation \n>\"NSOperationQueue predates Grand Central Dispatch and on iOS it doesn't use GCD to execute operations (this is different on Mac OS X). It uses regular background threads which have a little more overhead than GCD dispatch queues.\nOn the other hand, NSOperationQueue gives you a lot more control over how your operations are executed. You can define dependencies between individual operations for example, which isn't possible with plain GCD queues. It is also possible to cancel operations that have been enqueued in an NSOperationQueue (as far as the operations support it). When you enqueue a block in a GCD dispatch queue, it will definitely be executed at some point.\nTo sum it up, NSOperationQueue can be more suitable for long-running operations that may need to be cancelled or have complex dependencies. GCD dispatch queues are better for short tasks that should have minimum performance and memory overhead.\"\n\n简单来说就是GCD偏底层点，性能好，依赖关系少，并发耗费资源少。\nNSOperation可观察状态，性能也不错，处理事务更简单操作。\n\n对于这两种都熟练运用的人来说，无所谓了，APP大多数事务这两者都能完美解决。至于代码用哪个这个取决于你的兴趣了。\n\n下面详细说一下NSOperation\n\n```\n@interface NSOperation : NSObject {\n\n- (void)start; //开始执行 默认是同步执行的\n- (void)main; //主任务的函数 \n\n@property (readonly, getter=isCancelled) BOOL cancelled; //是否取消\n- (void)cancel; //取消任务\n\n@property (readonly, getter=isExecuting) BOOL executing;//是否正在执行\n@property (readonly, getter=isFinished) BOOL finished; //是否完成\n@property (readonly, getter=isConcurrent) BOOL concurrent; // To be deprecated; use and override 'asynchronous' below 是否并行\n@property (readonly, getter=isAsynchronous) BOOL asynchronous NS_AVAILABLE(10_8, 7_0); //是否异步\n@property (readonly, getter=isReady) BOOL ready; //是否正在等待\n\n- (void)addDependency:(NSOperation *)op; //添加依赖\n- (void)removeDependency:(NSOperation *)op; //删除依赖关系\n\n@property (readonly, copy) NSArray<NSOperation *> *dependencies; //所有依赖关系的数组\n\ntypedef NS_ENUM(NSInteger, NSOperationQueuePriority) {\n//队列优先级  优先级高的先执行 一般设置为0 即 NSOperationQueuePriorityNormal。\n NSOperationQueuePriorityVeryLow = -8L,\n NSOperationQueuePriorityLow = -4L,\n NSOperationQueuePriorityNormal = 0,\n NSOperationQueuePriorityHigh = 4,\n NSOperationQueuePriorityVeryHigh = 8\n};\n\n@property NSOperationQueuePriority queuePriority;//队列优先级\n\n@property (nullable, copy) void (^completionBlock)(void)  NS_AVAILABLE(10_6, 4_0);//完成时候执行的代码块\n//等待直到完成\n- (void)waitUntilFinished NS_AVAILABLE(10_6, 4_0);\n//线程优先级\n@property double threadPriority NS_DEPRECATED(10_6, 10_10, 4_0, 8_0);\n\n@property NSQualityOfService qualityOfService NS_AVAILABLE(10_10, 8_0);\nNSQualityOfService 的几个枚举值：\n  NSQualityOfServiceUserInteractive：最高优先级，主要用于提供交互UI的操作，比如处理点击事件，绘制图像到屏幕上\n  NSQualityOfServiceUserInitiated：次高优先级，主要用于执行需要立即返回的任务\n  NSQualityOfServiceDefault：默认优先级，当没有设置优先级的时候，线程默认优先级\n  NSQualityOfServiceUtility：普通优先级，主要用于不需要立即返回的任务\n  NSQualityOfServiceBackground：后台优先级，用于完全不紧急的任务\n\n\n//名字\n@property (nullable, copy) NSString *name NS_AVAILABLE(10_10, 8_0);\n```\n### NSBlockOperation \n```\n- (void)print{\n    NSLog(@\"线程info : %@\",[NSThread currentThread]);\n}\n- (void)test4{\n    NSBlockOperation * blop = [[NSBlockOperation alloc]init];\n    [blop addExecutionBlock:^{//添加同时执行的task\n        NSLog(@\"1 start\");\n        [self print];\n        sleep(2);\n        \n        NSLog(@\"1 end\");\n    }];\n    [blop addExecutionBlock:^{ //添加同时执行的task\n        NSLog(@\"2 start\");\n        [self print];\n        sleep(4);\n        \n        NSLog(@\"2 end\");\n    }];\n    [blop addExecutionBlock:^{ //添加同时执行的task\n        NSLog(@\"3 start\");\n        [self print];\n        sleep(1);\n        \n        NSLog(@\"3 end\");\n    }];\n    [blop setCompletionBlock:^{ //添加同时执行的task\n        NSLog(@\"blop end\");\n    }];\n    \n    [blop start];\n}\n输出：\n**2016-03-29 16:47:44.857 GCD_Demo[17555:562249] 1 start**\n**2016-03-29 16:47:44.857 GCD_Demo[17555:562287] 3 start**\n**2016-03-29 16:47:44.857 GCD_Demo[17555:562288] 2 start**\n**2016-03-29 16:47:44.857 GCD_Demo[17555:562249] ****线程****info : <NSThread: 0x7fea68408b30>{number = 1, name = main}**\n**2016-03-29 16:47:44.857 GCD_Demo[17555:562288] ****线程****info : <NSThread: 0x7fea6861fb30>{number = 3, name = (null)}**\n**2016-03-29 16:47:44.857 GCD_Demo[17555:562287] ****线程****info : <NSThread: 0x7fea69300470>{number = 2, name = (null)}**\n**2016-03-29 16:47:45.922 GCD_Demo[17555:562287] 3 end**\n**2016-03-29 16:47:46.858 GCD_Demo[17555:562249] 1 end**\n**2016-03-29 16:47:48.928 GCD_Demo[17555:562288] 2 end**\n**2016-03-29 16:47:48.929 GCD_Demo[17555:562288] blop end**\n```\n可以看出来，NSBlockOperation当任务是1的时候在main线程中执行，任务大于1的时候，其他的个自独自开了线程，而且互不影响。\n\n### 依赖关系\n```\n- (void)print{\n    NSLog(@\"线程info : %@\",[NSThread currentThread]);\n}\n- (void)test4{\n    NSBlockOperation * blop = [[NSBlockOperation alloc]init];\n    [blop addExecutionBlock:^{\n        NSLog(@\"blop1_1 start\");\n        [self print];\n        sleep(2);\n        NSLog(@\"blop1_1 end\");\n    }];\n    [blop addExecutionBlock:^{\n        NSLog(@\"blop1_2 start\");\n        [self print];\n        sleep(4);\n        NSLog(@\"blop1_2 end\");\n    }];\n    NSLog(@\"blop will start\");\n    [blop start];\n    NSLog(@\"blop did start\");\n    \n    NSBlockOperation * blop2 =[NSBlockOperation blockOperationWithBlock:^{\n        NSLog(@\"blop2 start\");\n        [self print];\n        sleep(2);\n        NSLog(@\"blop2 end\");\n    }];\n   // [blop2 addDependency:blop];//blop2 依赖blop 就是blopExecutionBlock 执行完之后再执行blop2的任务【blop2 执行task和blop 的CompletionBlock基本是同时执行的】\n    [blop2 start];\n输出：\n**2016-03-29 17:06:53.217 GCD_Demo[17806:574416] blop will start**\n**2016-03-29 17:06:53.217 GCD_Demo[17806:574416] blop1_1 start**\n**2016-03-29 17:06:53.217 GCD_Demo[17806:574455] blop1_2 start**\n**2016-03-29 17:06:53.217 GCD_Demo[17806:574416] ****线程****info : <NSThread: 0x7f839a004ff0>{number = 1, name = main}**\n**2016-03-29 17:06:53.218 GCD_Demo[17806:574455] ****线程****info : <NSThread: 0x7f8398416d80>{number = 2, name = (null)}**\n**2016-03-29 17:06:55.219 GCD_Demo[17806:574416] blop1_1 end**\n**2016-03-29 17:06:57.272 GCD_Demo[17806:574455] blop1_2 end**\n**2016-03-29 17:06:57.272 GCD_Demo[17806:574416] blop did start**\n**2016-03-29 17:06:57.273 GCD_Demo[17806:574416] blop2 start**\n**2016-03-29 17:06:57.273 GCD_Demo[17806:574416] ****线程****info : <NSThread: 0x7f839a004ff0>{number = 1, name = main}**\n**2016-03-29 17:06:59.274 GCD_Demo[17806:574416] blop2 end**\n\n```\n从输出的信息可以看出来，block是同步执行的，虽然多任务是多线程，但是主线程还是在阻塞中，只有上一个所有 task 执行完的时候，才会执行下边的task。所以在这里依赖关系不那么重要了，注释掉运行结果也一样的。\n###   NSInvocationOperation\n```\nNSInvocationOperation 是NSOperation的子类，负责实现operation的SEL方法。\n这样子operation就可以start的时候执行一些函数了。\n在swift中已经废弃\n看文档：\nNS_SWIFT_UNAVAILABLE(\"NSInvocation and related APIs not available\")\n```\n\n### NSOperationQueue \n```\n//添加操作\n- (void)addOperation:(NSOperation *)op;\n//添加操作数组 在完成操作的时候\n- (void)addOperations:(NSArray<NSOperation *> *)ops waitUntilFinished:(BOOL)wait NS_AVAILABLE(10_6, 4_0);\n//添加携带代码块的operation\n- (void)addOperationWithBlock:(void (^)(void))block NS_AVAILABLE(10_6, 4_0);\n//所有的操作 组成的数组 可读属性\n@property (readonly, copy) NSArray<__kindof NSOperation *> *operations;\n//操作个数\n@property (readonly) NSUInteger operationCount NS_AVAILABLE(10_6, 4_0);\n//设置最大并行的任务数 ps:operation 其实 一个operation可以同时开启几个线程的。\n@property NSInteger maxConcurrentOperationCount;\n//挂起\n@property (getter=isSuspended) BOOL suspended;\n//队列的名字\n@property (nullable, copy) NSString *name NS_AVAILABLE(10_6, 4_0);\n//优先级\n@property NSQualityOfService qualityOfService NS_AVAILABLE(10_10, 8_0);\n队列\n@property (nullable, assign /* actually retain */) dispatch_queue_t underlyingQueue NS_AVAILABLE(10_10, 8_0);\n//取消所有的操作\n- (void)cancelAllOperations;\n//等到他们的操作结束\n- (void)waitUntilAllOperationsAreFinished;\n//当前的队列\n+ (nullable NSOperationQueue *)currentQueue NS_AVAILABLE(10_6, 4_0);\n//主队列\n+ (NSOperationQueue *)mainQueue NS_AVAILABLE(10_6, 4_0);\n\n \n# 队列的例子\n#队列中添加的operation都是在子线程中执行的。\n- (void)print{\n    NSLog(@\"线程info : %@\",[NSThread currentThread]);\n}\n- (void)op1{\n     NSLog(@\"op1 开始运行了\");\n     sleep(3);\n     NSLog(@\"op1 结束\");\n}\n\n- (void)test5{\n    NSInvocationOperation * op1 =[[NSInvocationOperation alloc]initWithTarget:self selector:@selector(op1) object:nil];\n    NSOperationQueue * queue =[[NSOperationQueue alloc]init];\n    [queue addOperation:op1]; //添加操作\n    queue.maxConcurrentOperationCount = 1;//同时允许一个operation运行\n    NSBlockOperation *block = [self test4];//任务块\n    [queue addOperation:block];//添加任务块并运行\n\n// sleep(2);  \n   // [queue cancelAllOperations];\n}\n- (NSBlockOperation *)test4{\n    NSBlockOperation * blop = [[NSBlockOperation alloc]init];\n    [blop addExecutionBlock:^{\n        NSLog(@\"blop1_1 start\");\n        [self print];\n        sleep(2);\n        NSLog(@\"blop1_1 end\");\n    }];\n    [blop addExecutionBlock:^{\n        NSLog(@\"blop1_2 start\");\n        [self print];\n        sleep(4);\n        NSLog(@\"blop1_2 end\");\n    }];\n    return blop;\n}\n输出：\n**2016-03-31 11:22:16.663 GCD_Demo[26038:889212] op1 ****开始运行了**\n**2016-03-31 11:22:19.737 GCD_Demo[26038:889212] op1 ****结束**\n**2016-03-31 11:22:19.738 GCD_Demo[26038:889213] blop1_1 start**\n**2016-03-31 11:22:19.738 GCD_Demo[26038:889226] blop1_2 start**\n**2016-03-31 11:22:19.738 GCD_Demo[26038:889213] ****线程****info : <NSThread: 0x7fea3061d110>{number = 2, name = (null)}**\n**2016-03-31 11:22:19.738 GCD_Demo[26038:889226] ****线程****info : <NSThread: 0x7fea31800140>{number = 3, name = (null)}**\n**2016-03-31 11:22:21.808 GCD_Demo[26038:889213] blop1_1 end**\n**2016-03-31 11:22:23.784 GCD_Demo[26038:889226] blop1_2 end**\n# 从输出的信息可以看出来，当设置最大的operation为1的时候，相当于这个队列同步运行了，不过这个同步的单位不是线程，而是operation。\n\n当把这两句代码加到 test5最后边输出结果是：\n**2016-03-31 11:28:59.267 GCD_Demo[26113:892737] op1 ****开始运行了**\n**2016-03-31 11:29:02.341 GCD_Demo[26113:892737] op1 ****结束**\n从输出结果得出：正在执行的Operation无法stop，正在ready的operation直接跳过start，执行complateBlock.状态由ready改为canceld。ps：注意看官方文档\n`Canceling the operations does not automatically remove them from the queue or stop those that are currently executing.`\n正在执行的不会从队列中删除也不会stop。\n`For operations that are queued and waiting execution, the queue must still attempt to execute the operation before recognizing that it is canceled and moving it to the finished state. \nFor operations that are already executing, the operation object itself must check for cancellation and stop what it is doing so that it can move to the finished state. \nIn both cases, a finished (or canceled) operation is still given a chance to execute its completion block before it is removed from the queue.` \n正在队列中等待的operation执行的时候会检测是否被cancenld，如果状态是canceld，那么直接执行completion block 在它被队列删除的时候。\n```\n### 在子线程中耗时的操作完成了，那么该在主线程中更新UI\n```\n#将上面的test5 改成下面的代码\n- (void)test5{\n    NSInvocationOperation * op1 =[[NSInvocationOperation alloc]initWithTarget:self selector:@selector(op1) object:nil];\n    NSOperationQueue * queue =[[NSOperationQueue alloc]init];\n    [queue addOperation:op1];\n    queue.maxConcurrentOperationCount = 3;//根据需要设置数量\n    NSBlockOperation *block = [self test4];\n    [queue addOperation:block];\n//这句话一定要添加，这句话的意思等到所有的operation都完成了在执行后面的代码，\n其实就是上面的操作执行到这里要等待他们直到他们都完成了。\n#     [queue waitUntilAllOperationsAreFinished]; \n    NSBlockOperation * blockUpdateMainUI=[NSBlockOperation blockOperationWithBlock:^{\n        NSLog(@\"update UI\");\n    }];\n    [[NSOperationQueue mainQueue] addOperation:blockUpdateMainUI];//在主队列中执行更新UI的操作\n}\n上面的代码 和GCD中的分组有些类似，但是 这个OperationQueue基本单位是operation而不是线程，一定要理解。\noperation和线程的关系是 一个operation可能对应多个线程，也可能对应一个线程。\n```\n关于NSOperationQueue的了解和使用我想到的基本就这么多场景，后期有其他的场景再补充。\n预告：下期节目是NSThread的介绍和使用。\nps:广告时间\n- - -\n有问题可以发我邮箱讨论共同交流技术。\nfgyong@yeah.net","source":"_posts/iOS线程之NSOperation.md","raw":"title: iOS线程之NSOperation\ndate: 2016-03-31 14:47:47\ntags:\n- iOS\n- iOS高级\ncategories: iOS\n---\n\n前篇文章已经讲了GCD了，那么这两者有什么区别？\n### GCD VS   NSOperation \n>\"NSOperationQueue predates Grand Central Dispatch and on iOS it doesn't use GCD to execute operations (this is different on Mac OS X). It uses regular background threads which have a little more overhead than GCD dispatch queues.\nOn the other hand, NSOperationQueue gives you a lot more control over how your operations are executed. You can define dependencies between individual operations for example, which isn't possible with plain GCD queues. It is also possible to cancel operations that have been enqueued in an NSOperationQueue (as far as the operations support it). When you enqueue a block in a GCD dispatch queue, it will definitely be executed at some point.\nTo sum it up, NSOperationQueue can be more suitable for long-running operations that may need to be cancelled or have complex dependencies. GCD dispatch queues are better for short tasks that should have minimum performance and memory overhead.\"\n\n简单来说就是GCD偏底层点，性能好，依赖关系少，并发耗费资源少。\nNSOperation可观察状态，性能也不错，处理事务更简单操作。\n\n对于这两种都熟练运用的人来说，无所谓了，APP大多数事务这两者都能完美解决。至于代码用哪个这个取决于你的兴趣了。\n\n下面详细说一下NSOperation\n\n```\n@interface NSOperation : NSObject {\n\n- (void)start; //开始执行 默认是同步执行的\n- (void)main; //主任务的函数 \n\n@property (readonly, getter=isCancelled) BOOL cancelled; //是否取消\n- (void)cancel; //取消任务\n\n@property (readonly, getter=isExecuting) BOOL executing;//是否正在执行\n@property (readonly, getter=isFinished) BOOL finished; //是否完成\n@property (readonly, getter=isConcurrent) BOOL concurrent; // To be deprecated; use and override 'asynchronous' below 是否并行\n@property (readonly, getter=isAsynchronous) BOOL asynchronous NS_AVAILABLE(10_8, 7_0); //是否异步\n@property (readonly, getter=isReady) BOOL ready; //是否正在等待\n\n- (void)addDependency:(NSOperation *)op; //添加依赖\n- (void)removeDependency:(NSOperation *)op; //删除依赖关系\n\n@property (readonly, copy) NSArray<NSOperation *> *dependencies; //所有依赖关系的数组\n\ntypedef NS_ENUM(NSInteger, NSOperationQueuePriority) {\n//队列优先级  优先级高的先执行 一般设置为0 即 NSOperationQueuePriorityNormal。\n NSOperationQueuePriorityVeryLow = -8L,\n NSOperationQueuePriorityLow = -4L,\n NSOperationQueuePriorityNormal = 0,\n NSOperationQueuePriorityHigh = 4,\n NSOperationQueuePriorityVeryHigh = 8\n};\n\n@property NSOperationQueuePriority queuePriority;//队列优先级\n\n@property (nullable, copy) void (^completionBlock)(void)  NS_AVAILABLE(10_6, 4_0);//完成时候执行的代码块\n//等待直到完成\n- (void)waitUntilFinished NS_AVAILABLE(10_6, 4_0);\n//线程优先级\n@property double threadPriority NS_DEPRECATED(10_6, 10_10, 4_0, 8_0);\n\n@property NSQualityOfService qualityOfService NS_AVAILABLE(10_10, 8_0);\nNSQualityOfService 的几个枚举值：\n  NSQualityOfServiceUserInteractive：最高优先级，主要用于提供交互UI的操作，比如处理点击事件，绘制图像到屏幕上\n  NSQualityOfServiceUserInitiated：次高优先级，主要用于执行需要立即返回的任务\n  NSQualityOfServiceDefault：默认优先级，当没有设置优先级的时候，线程默认优先级\n  NSQualityOfServiceUtility：普通优先级，主要用于不需要立即返回的任务\n  NSQualityOfServiceBackground：后台优先级，用于完全不紧急的任务\n\n\n//名字\n@property (nullable, copy) NSString *name NS_AVAILABLE(10_10, 8_0);\n```\n### NSBlockOperation \n```\n- (void)print{\n    NSLog(@\"线程info : %@\",[NSThread currentThread]);\n}\n- (void)test4{\n    NSBlockOperation * blop = [[NSBlockOperation alloc]init];\n    [blop addExecutionBlock:^{//添加同时执行的task\n        NSLog(@\"1 start\");\n        [self print];\n        sleep(2);\n        \n        NSLog(@\"1 end\");\n    }];\n    [blop addExecutionBlock:^{ //添加同时执行的task\n        NSLog(@\"2 start\");\n        [self print];\n        sleep(4);\n        \n        NSLog(@\"2 end\");\n    }];\n    [blop addExecutionBlock:^{ //添加同时执行的task\n        NSLog(@\"3 start\");\n        [self print];\n        sleep(1);\n        \n        NSLog(@\"3 end\");\n    }];\n    [blop setCompletionBlock:^{ //添加同时执行的task\n        NSLog(@\"blop end\");\n    }];\n    \n    [blop start];\n}\n输出：\n**2016-03-29 16:47:44.857 GCD_Demo[17555:562249] 1 start**\n**2016-03-29 16:47:44.857 GCD_Demo[17555:562287] 3 start**\n**2016-03-29 16:47:44.857 GCD_Demo[17555:562288] 2 start**\n**2016-03-29 16:47:44.857 GCD_Demo[17555:562249] ****线程****info : <NSThread: 0x7fea68408b30>{number = 1, name = main}**\n**2016-03-29 16:47:44.857 GCD_Demo[17555:562288] ****线程****info : <NSThread: 0x7fea6861fb30>{number = 3, name = (null)}**\n**2016-03-29 16:47:44.857 GCD_Demo[17555:562287] ****线程****info : <NSThread: 0x7fea69300470>{number = 2, name = (null)}**\n**2016-03-29 16:47:45.922 GCD_Demo[17555:562287] 3 end**\n**2016-03-29 16:47:46.858 GCD_Demo[17555:562249] 1 end**\n**2016-03-29 16:47:48.928 GCD_Demo[17555:562288] 2 end**\n**2016-03-29 16:47:48.929 GCD_Demo[17555:562288] blop end**\n```\n可以看出来，NSBlockOperation当任务是1的时候在main线程中执行，任务大于1的时候，其他的个自独自开了线程，而且互不影响。\n\n### 依赖关系\n```\n- (void)print{\n    NSLog(@\"线程info : %@\",[NSThread currentThread]);\n}\n- (void)test4{\n    NSBlockOperation * blop = [[NSBlockOperation alloc]init];\n    [blop addExecutionBlock:^{\n        NSLog(@\"blop1_1 start\");\n        [self print];\n        sleep(2);\n        NSLog(@\"blop1_1 end\");\n    }];\n    [blop addExecutionBlock:^{\n        NSLog(@\"blop1_2 start\");\n        [self print];\n        sleep(4);\n        NSLog(@\"blop1_2 end\");\n    }];\n    NSLog(@\"blop will start\");\n    [blop start];\n    NSLog(@\"blop did start\");\n    \n    NSBlockOperation * blop2 =[NSBlockOperation blockOperationWithBlock:^{\n        NSLog(@\"blop2 start\");\n        [self print];\n        sleep(2);\n        NSLog(@\"blop2 end\");\n    }];\n   // [blop2 addDependency:blop];//blop2 依赖blop 就是blopExecutionBlock 执行完之后再执行blop2的任务【blop2 执行task和blop 的CompletionBlock基本是同时执行的】\n    [blop2 start];\n输出：\n**2016-03-29 17:06:53.217 GCD_Demo[17806:574416] blop will start**\n**2016-03-29 17:06:53.217 GCD_Demo[17806:574416] blop1_1 start**\n**2016-03-29 17:06:53.217 GCD_Demo[17806:574455] blop1_2 start**\n**2016-03-29 17:06:53.217 GCD_Demo[17806:574416] ****线程****info : <NSThread: 0x7f839a004ff0>{number = 1, name = main}**\n**2016-03-29 17:06:53.218 GCD_Demo[17806:574455] ****线程****info : <NSThread: 0x7f8398416d80>{number = 2, name = (null)}**\n**2016-03-29 17:06:55.219 GCD_Demo[17806:574416] blop1_1 end**\n**2016-03-29 17:06:57.272 GCD_Demo[17806:574455] blop1_2 end**\n**2016-03-29 17:06:57.272 GCD_Demo[17806:574416] blop did start**\n**2016-03-29 17:06:57.273 GCD_Demo[17806:574416] blop2 start**\n**2016-03-29 17:06:57.273 GCD_Demo[17806:574416] ****线程****info : <NSThread: 0x7f839a004ff0>{number = 1, name = main}**\n**2016-03-29 17:06:59.274 GCD_Demo[17806:574416] blop2 end**\n\n```\n从输出的信息可以看出来，block是同步执行的，虽然多任务是多线程，但是主线程还是在阻塞中，只有上一个所有 task 执行完的时候，才会执行下边的task。所以在这里依赖关系不那么重要了，注释掉运行结果也一样的。\n###   NSInvocationOperation\n```\nNSInvocationOperation 是NSOperation的子类，负责实现operation的SEL方法。\n这样子operation就可以start的时候执行一些函数了。\n在swift中已经废弃\n看文档：\nNS_SWIFT_UNAVAILABLE(\"NSInvocation and related APIs not available\")\n```\n\n### NSOperationQueue \n```\n//添加操作\n- (void)addOperation:(NSOperation *)op;\n//添加操作数组 在完成操作的时候\n- (void)addOperations:(NSArray<NSOperation *> *)ops waitUntilFinished:(BOOL)wait NS_AVAILABLE(10_6, 4_0);\n//添加携带代码块的operation\n- (void)addOperationWithBlock:(void (^)(void))block NS_AVAILABLE(10_6, 4_0);\n//所有的操作 组成的数组 可读属性\n@property (readonly, copy) NSArray<__kindof NSOperation *> *operations;\n//操作个数\n@property (readonly) NSUInteger operationCount NS_AVAILABLE(10_6, 4_0);\n//设置最大并行的任务数 ps:operation 其实 一个operation可以同时开启几个线程的。\n@property NSInteger maxConcurrentOperationCount;\n//挂起\n@property (getter=isSuspended) BOOL suspended;\n//队列的名字\n@property (nullable, copy) NSString *name NS_AVAILABLE(10_6, 4_0);\n//优先级\n@property NSQualityOfService qualityOfService NS_AVAILABLE(10_10, 8_0);\n队列\n@property (nullable, assign /* actually retain */) dispatch_queue_t underlyingQueue NS_AVAILABLE(10_10, 8_0);\n//取消所有的操作\n- (void)cancelAllOperations;\n//等到他们的操作结束\n- (void)waitUntilAllOperationsAreFinished;\n//当前的队列\n+ (nullable NSOperationQueue *)currentQueue NS_AVAILABLE(10_6, 4_0);\n//主队列\n+ (NSOperationQueue *)mainQueue NS_AVAILABLE(10_6, 4_0);\n\n \n# 队列的例子\n#队列中添加的operation都是在子线程中执行的。\n- (void)print{\n    NSLog(@\"线程info : %@\",[NSThread currentThread]);\n}\n- (void)op1{\n     NSLog(@\"op1 开始运行了\");\n     sleep(3);\n     NSLog(@\"op1 结束\");\n}\n\n- (void)test5{\n    NSInvocationOperation * op1 =[[NSInvocationOperation alloc]initWithTarget:self selector:@selector(op1) object:nil];\n    NSOperationQueue * queue =[[NSOperationQueue alloc]init];\n    [queue addOperation:op1]; //添加操作\n    queue.maxConcurrentOperationCount = 1;//同时允许一个operation运行\n    NSBlockOperation *block = [self test4];//任务块\n    [queue addOperation:block];//添加任务块并运行\n\n// sleep(2);  \n   // [queue cancelAllOperations];\n}\n- (NSBlockOperation *)test4{\n    NSBlockOperation * blop = [[NSBlockOperation alloc]init];\n    [blop addExecutionBlock:^{\n        NSLog(@\"blop1_1 start\");\n        [self print];\n        sleep(2);\n        NSLog(@\"blop1_1 end\");\n    }];\n    [blop addExecutionBlock:^{\n        NSLog(@\"blop1_2 start\");\n        [self print];\n        sleep(4);\n        NSLog(@\"blop1_2 end\");\n    }];\n    return blop;\n}\n输出：\n**2016-03-31 11:22:16.663 GCD_Demo[26038:889212] op1 ****开始运行了**\n**2016-03-31 11:22:19.737 GCD_Demo[26038:889212] op1 ****结束**\n**2016-03-31 11:22:19.738 GCD_Demo[26038:889213] blop1_1 start**\n**2016-03-31 11:22:19.738 GCD_Demo[26038:889226] blop1_2 start**\n**2016-03-31 11:22:19.738 GCD_Demo[26038:889213] ****线程****info : <NSThread: 0x7fea3061d110>{number = 2, name = (null)}**\n**2016-03-31 11:22:19.738 GCD_Demo[26038:889226] ****线程****info : <NSThread: 0x7fea31800140>{number = 3, name = (null)}**\n**2016-03-31 11:22:21.808 GCD_Demo[26038:889213] blop1_1 end**\n**2016-03-31 11:22:23.784 GCD_Demo[26038:889226] blop1_2 end**\n# 从输出的信息可以看出来，当设置最大的operation为1的时候，相当于这个队列同步运行了，不过这个同步的单位不是线程，而是operation。\n\n当把这两句代码加到 test5最后边输出结果是：\n**2016-03-31 11:28:59.267 GCD_Demo[26113:892737] op1 ****开始运行了**\n**2016-03-31 11:29:02.341 GCD_Demo[26113:892737] op1 ****结束**\n从输出结果得出：正在执行的Operation无法stop，正在ready的operation直接跳过start，执行complateBlock.状态由ready改为canceld。ps：注意看官方文档\n`Canceling the operations does not automatically remove them from the queue or stop those that are currently executing.`\n正在执行的不会从队列中删除也不会stop。\n`For operations that are queued and waiting execution, the queue must still attempt to execute the operation before recognizing that it is canceled and moving it to the finished state. \nFor operations that are already executing, the operation object itself must check for cancellation and stop what it is doing so that it can move to the finished state. \nIn both cases, a finished (or canceled) operation is still given a chance to execute its completion block before it is removed from the queue.` \n正在队列中等待的operation执行的时候会检测是否被cancenld，如果状态是canceld，那么直接执行completion block 在它被队列删除的时候。\n```\n### 在子线程中耗时的操作完成了，那么该在主线程中更新UI\n```\n#将上面的test5 改成下面的代码\n- (void)test5{\n    NSInvocationOperation * op1 =[[NSInvocationOperation alloc]initWithTarget:self selector:@selector(op1) object:nil];\n    NSOperationQueue * queue =[[NSOperationQueue alloc]init];\n    [queue addOperation:op1];\n    queue.maxConcurrentOperationCount = 3;//根据需要设置数量\n    NSBlockOperation *block = [self test4];\n    [queue addOperation:block];\n//这句话一定要添加，这句话的意思等到所有的operation都完成了在执行后面的代码，\n其实就是上面的操作执行到这里要等待他们直到他们都完成了。\n#     [queue waitUntilAllOperationsAreFinished]; \n    NSBlockOperation * blockUpdateMainUI=[NSBlockOperation blockOperationWithBlock:^{\n        NSLog(@\"update UI\");\n    }];\n    [[NSOperationQueue mainQueue] addOperation:blockUpdateMainUI];//在主队列中执行更新UI的操作\n}\n上面的代码 和GCD中的分组有些类似，但是 这个OperationQueue基本单位是operation而不是线程，一定要理解。\noperation和线程的关系是 一个operation可能对应多个线程，也可能对应一个线程。\n```\n关于NSOperationQueue的了解和使用我想到的基本就这么多场景，后期有其他的场景再补充。\n预告：下期节目是NSThread的介绍和使用。\nps:广告时间\n- - -\n有问题可以发我邮箱讨论共同交流技术。\nfgyong@yeah.net","slug":"iOS线程之NSOperation","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj46000cnhmf57ot75tm","content":"<p>前篇文章已经讲了GCD了，那么这两者有什么区别？</p>\n<h3 id=\"GCD_VS_NSOperation\"><a href=\"#GCD_VS_NSOperation\" class=\"headerlink\" title=\"GCD VS   NSOperation\"></a>GCD VS   NSOperation</h3><blockquote>\n<p>“NSOperationQueue predates Grand Central Dispatch and on iOS it doesn’t use GCD to execute operations (this is different on Mac OS X). It uses regular background threads which have a little more overhead than GCD dispatch queues.<br>On the other hand, NSOperationQueue gives you a lot more control over how your operations are executed. You can define dependencies between individual operations for example, which isn’t possible with plain GCD queues. It is also possible to cancel operations that have been enqueued in an NSOperationQueue (as far as the operations support it). When you enqueue a block in a GCD dispatch queue, it will definitely be executed at some point.<br>To sum it up, NSOperationQueue can be more suitable for long-running operations that may need to be cancelled or have complex dependencies. GCD dispatch queues are better for short tasks that should have minimum performance and memory overhead.”</p>\n</blockquote>\n<p>简单来说就是GCD偏底层点，性能好，依赖关系少，并发耗费资源少。<br>NSOperation可观察状态，性能也不错，处理事务更简单操作。</p>\n<p>对于这两种都熟练运用的人来说，无所谓了，APP大多数事务这两者都能完美解决。至于代码用哪个这个取决于你的兴趣了。</p>\n<p>下面详细说一下NSOperation</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSOperation</span> : <span class=\"title\">NSObject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)start; <span class=\"comment\">//开始执行 默认是同步执行的</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)main; <span class=\"comment\">//主任务的函数 </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isCancelled) <span class=\"built_in\">BOOL</span> cancelled; <span class=\"comment\">//是否取消</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cancel; <span class=\"comment\">//取消任务</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isExecuting) <span class=\"built_in\">BOOL</span> executing;<span class=\"comment\">//是否正在执行</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isFinished) <span class=\"built_in\">BOOL</span> finished; <span class=\"comment\">//是否完成</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isConcurrent) <span class=\"built_in\">BOOL</span> concurrent; <span class=\"comment\">// To be deprecated; use and override 'asynchronous' below 是否并行</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isAsynchronous) <span class=\"built_in\">BOOL</span> asynchronous <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_8, <span class=\"number\">7</span>_0); <span class=\"comment\">//是否异步</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isReady) <span class=\"built_in\">BOOL</span> ready; <span class=\"comment\">//是否正在等待</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addDependency:(<span class=\"built_in\">NSOperation</span> *)op; <span class=\"comment\">//添加依赖</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)removeDependency:(<span class=\"built_in\">NSOperation</span> *)op; <span class=\"comment\">//删除依赖关系</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSOperation</span> *&gt; *dependencies; <span class=\"comment\">//所有依赖关系的数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSInteger</span>, <span class=\"built_in\">NSOperationQueuePriority</span>) &#123;</div><div class=\"line\"><span class=\"comment\">//队列优先级  优先级高的先执行 一般设置为0 即 NSOperationQueuePriorityNormal。</span></div><div class=\"line\"> <span class=\"built_in\">NSOperationQueuePriorityVeryLow</span> = <span class=\"number\">-8</span>L,</div><div class=\"line\"> <span class=\"built_in\">NSOperationQueuePriorityLow</span> = <span class=\"number\">-4</span>L,</div><div class=\"line\"> <span class=\"built_in\">NSOperationQueuePriorityNormal</span> = <span class=\"number\">0</span>,</div><div class=\"line\"> <span class=\"built_in\">NSOperationQueuePriorityHigh</span> = <span class=\"number\">4</span>,</div><div class=\"line\"> <span class=\"built_in\">NSOperationQueuePriorityVeryHigh</span> = <span class=\"number\">8</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSOperationQueuePriority</span> queuePriority;<span class=\"comment\">//队列优先级</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nullable</span>, <span class=\"keyword\">copy</span>) <span class=\"keyword\">void</span> (^completionBlock)(<span class=\"keyword\">void</span>)  <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_6, <span class=\"number\">4</span>_0);<span class=\"comment\">//完成时候执行的代码块</span></div><div class=\"line\"><span class=\"comment\">//等待直到完成</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)waitUntilFinished <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_6, <span class=\"number\">4</span>_0);</div><div class=\"line\"><span class=\"comment\">//线程优先级</span></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"keyword\">double</span> threadPriority <span class=\"built_in\">NS_DEPRECATED</span>(<span class=\"number\">10</span>_6, <span class=\"number\">10</span>_10, <span class=\"number\">4</span>_0, <span class=\"number\">8</span>_0);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSQualityOfService</span> qualityOfService <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_10, <span class=\"number\">8</span>_0);</div><div class=\"line\"><span class=\"built_in\">NSQualityOfService</span> 的几个枚举值：</div><div class=\"line\">  <span class=\"built_in\">NSQualityOfServiceUserInteractive</span>：最高优先级，主要用于提供交互UI的操作，比如处理点击事件，绘制图像到屏幕上</div><div class=\"line\">  <span class=\"built_in\">NSQualityOfServiceUserInitiated</span>：次高优先级，主要用于执行需要立即返回的任务</div><div class=\"line\">  <span class=\"built_in\">NSQualityOfServiceDefault</span>：默认优先级，当没有设置优先级的时候，线程默认优先级</div><div class=\"line\">  <span class=\"built_in\">NSQualityOfServiceUtility</span>：普通优先级，主要用于不需要立即返回的任务</div><div class=\"line\">  <span class=\"built_in\">NSQualityOfServiceBackground</span>：后台优先级，用于完全不紧急的任务</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//名字</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nullable</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *name <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_10, <span class=\"number\">8</span>_0);</div></pre></td></tr></table></figure>\n<h3 id=\"NSBlockOperation\"><a href=\"#NSBlockOperation\" class=\"headerlink\" title=\"NSBlockOperation\"></a>NSBlockOperation</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)print&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程info : %@\"</span>,[<span class=\"built_in\">NSThread</span> currentThread]);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)test4&#123;</div><div class=\"line\">    <span class=\"built_in\">NSBlockOperation</span> * blop = [[<span class=\"built_in\">NSBlockOperation</span> alloc]init];</div><div class=\"line\">    [blop addExecutionBlock:^&#123;<span class=\"comment\">//添加同时执行的task</span></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 start\"</span>);</div><div class=\"line\">        [<span class=\"keyword\">self</span> print];</div><div class=\"line\">        sleep(<span class=\"number\">2</span>);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 end\"</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    [blop addExecutionBlock:^&#123; <span class=\"comment\">//添加同时执行的task</span></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 start\"</span>);</div><div class=\"line\">        [<span class=\"keyword\">self</span> print];</div><div class=\"line\">        sleep(<span class=\"number\">4</span>);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 end\"</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    [blop addExecutionBlock:^&#123; <span class=\"comment\">//添加同时执行的task</span></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3 start\"</span>);</div><div class=\"line\">        [<span class=\"keyword\">self</span> print];</div><div class=\"line\">        sleep(<span class=\"number\">1</span>);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3 end\"</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    [blop setCompletionBlock:^&#123; <span class=\"comment\">//添加同时执行的task</span></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"blop end\"</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    [blop start];</div><div class=\"line\">&#125;</div><div class=\"line\">输出：</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">44.857</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562249</span>] <span class=\"number\">1</span> start**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">44.857</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562287</span>] <span class=\"number\">3</span> start**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">44.857</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562288</span>] <span class=\"number\">2</span> start**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">44.857</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562249</span>] ****线程****info : &lt;<span class=\"built_in\">NSThread</span>: <span class=\"number\">0x7fea68408b30</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">44.857</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562288</span>] ****线程****info : &lt;<span class=\"built_in\">NSThread</span>: <span class=\"number\">0x7fea6861fb30</span>&gt;&#123;number = <span class=\"number\">3</span>, name = (null)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">44.857</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562287</span>] ****线程****info : &lt;<span class=\"built_in\">NSThread</span>: <span class=\"number\">0x7fea69300470</span>&gt;&#123;number = <span class=\"number\">2</span>, name = (null)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">45.922</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562287</span>] <span class=\"number\">3</span> end**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">46.858</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562249</span>] <span class=\"number\">1</span> end**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">48.928</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562288</span>] <span class=\"number\">2</span> end**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">48.929</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562288</span>] blop end**</div></pre></td></tr></table></figure>\n<p>可以看出来，NSBlockOperation当任务是1的时候在main线程中执行，任务大于1的时候，其他的个自独自开了线程，而且互不影响。</p>\n<h3 id=\"u4F9D_u8D56_u5173_u7CFB\"><a href=\"#u4F9D_u8D56_u5173_u7CFB\" class=\"headerlink\" title=\"依赖关系\"></a>依赖关系</h3><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)print&#123;</div><div class=\"line\">    NSLog(<span class=\"comment\">@\"线程info : %@\",[NSThread currentThread]);</span></div><div class=\"line\">&#125;</div><div class=\"line\">- (void)test4&#123;</div><div class=\"line\">    NSBlockOperation * <span class=\"keyword\">blop </span>= [[NSBlockOperation alloc]init]<span class=\"comment\">;</span></div><div class=\"line\">    [<span class=\"keyword\">blop </span><span class=\"keyword\">addExecutionBlock:^&#123;</span></div><div class=\"line\">        NSLog(<span class=\"comment\">@\"blop1_1 start\");</span></div><div class=\"line\">        [<span class=\"keyword\">self </span>print]<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(<span class=\"comment\">@\"blop1_1 end\");</span></div><div class=\"line\">    &#125;]<span class=\"comment\">;</span></div><div class=\"line\">    [<span class=\"keyword\">blop </span><span class=\"keyword\">addExecutionBlock:^&#123;</span></div><div class=\"line\">        NSLog(<span class=\"comment\">@\"blop1_2 start\");</span></div><div class=\"line\">        [<span class=\"keyword\">self </span>print]<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">4</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(<span class=\"comment\">@\"blop1_2 end\");</span></div><div class=\"line\">    &#125;]<span class=\"comment\">;</span></div><div class=\"line\">    NSLog(<span class=\"comment\">@\"blop will start\");</span></div><div class=\"line\">    [<span class=\"keyword\">blop </span>start]<span class=\"comment\">;</span></div><div class=\"line\">    NSLog(<span class=\"comment\">@\"blop did start\");</span></div><div class=\"line\">    </div><div class=\"line\">    NSBlockOperation * <span class=\"keyword\">blop2 </span>=[NSBlockOperation <span class=\"keyword\">blockOperationWithBlock:^&#123;</span></div><div class=\"line\">        NSLog(<span class=\"comment\">@\"blop2 start\");</span></div><div class=\"line\">        [<span class=\"keyword\">self </span>print]<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(<span class=\"comment\">@\"blop2 end\");</span></div><div class=\"line\">    &#125;]<span class=\"comment\">;</span></div><div class=\"line\">   // [<span class=\"keyword\">blop2 </span><span class=\"keyword\">addDependency:blop];//blop2 </span>依赖<span class=\"keyword\">blop </span>就是<span class=\"keyword\">blopExecutionBlock </span>执行完之后再执行<span class=\"keyword\">blop2的任务【blop2 </span>执行task和<span class=\"keyword\">blop </span>的CompletionBlock基本是同时执行的】</div><div class=\"line\">    [<span class=\"keyword\">blop2 </span>start]<span class=\"comment\">;</span></div><div class=\"line\">输出：</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">53</span>.<span class=\"number\">217</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574416</span>] <span class=\"keyword\">blop </span>will start**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">53</span>.<span class=\"number\">217</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574416</span>] <span class=\"keyword\">blop1_1 </span>start**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">53</span>.<span class=\"number\">217</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574455</span>] <span class=\"keyword\">blop1_2 </span>start**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">53</span>.<span class=\"number\">217</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574416</span>] ****线程****<span class=\"meta\">info</span> : &lt;NSThread: <span class=\"number\">0x7f839a004ff0</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">53</span>.<span class=\"number\">218</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574455</span>] ****线程****<span class=\"meta\">info</span> : &lt;NSThread: <span class=\"number\">0x7f8398416d80</span>&gt;&#123;number = <span class=\"number\">2</span>, name = (null)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">55</span>.<span class=\"number\">219</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574416</span>] <span class=\"keyword\">blop1_1 </span><span class=\"meta\">end</span>**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">57</span>.<span class=\"number\">272</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574455</span>] <span class=\"keyword\">blop1_2 </span><span class=\"meta\">end</span>**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">57</span>.<span class=\"number\">272</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574416</span>] <span class=\"keyword\">blop </span>did start**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">57</span>.<span class=\"number\">273</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574416</span>] <span class=\"keyword\">blop2 </span>start**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">57</span>.<span class=\"number\">273</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574416</span>] ****线程****<span class=\"meta\">info</span> : &lt;NSThread: <span class=\"number\">0x7f839a004ff0</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">59</span>.<span class=\"number\">274</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574416</span>] <span class=\"keyword\">blop2 </span><span class=\"meta\">end</span>**</div></pre></td></tr></table></figure>\n<p>从输出的信息可以看出来，block是同步执行的，虽然多任务是多线程，但是主线程还是在阻塞中，只有上一个所有 task 执行完的时候，才会执行下边的task。所以在这里依赖关系不那么重要了，注释掉运行结果也一样的。</p>\n<h3 id=\"NSInvocationOperation\"><a href=\"#NSInvocationOperation\" class=\"headerlink\" title=\"NSInvocationOperation\"></a>NSInvocationOperation</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSInvocationOperation</span> 是<span class=\"built_in\">NSOperation</span>的子类，负责实现operation的SEL方法。</div><div class=\"line\">这样子operation就可以start的时候执行一些函数了。</div><div class=\"line\">在swift中已经废弃</div><div class=\"line\">看文档：</div><div class=\"line\"><span class=\"built_in\">NS_SWIFT_UNAVAILABLE</span>(<span class=\"string\">\"NSInvocation and related APIs not available\"</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"NSOperationQueue\"><a href=\"#NSOperationQueue\" class=\"headerlink\" title=\"NSOperationQueue\"></a>NSOperationQueue</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//添加操作</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addOperation:(<span class=\"built_in\">NSOperation</span> *)op;</div><div class=\"line\"><span class=\"comment\">//添加操作数组 在完成操作的时候</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addOperations:(<span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSOperation</span> *&gt; *)ops waitUntilFinished:(<span class=\"built_in\">BOOL</span>)wait <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_6, <span class=\"number\">4</span>_0);</div><div class=\"line\"><span class=\"comment\">//添加携带代码块的operation</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addOperationWithBlock:(<span class=\"keyword\">void</span> (^)(<span class=\"keyword\">void</span>))block <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_6, <span class=\"number\">4</span>_0);</div><div class=\"line\"><span class=\"comment\">//所有的操作 组成的数组 可读属性</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSArray</span>&lt;__kindof <span class=\"built_in\">NSOperation</span> *&gt; *operations;</div><div class=\"line\"><span class=\"comment\">//操作个数</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSUInteger</span> operationCount <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_6, <span class=\"number\">4</span>_0);</div><div class=\"line\"><span class=\"comment\">//设置最大并行的任务数 ps:operation 其实 一个operation可以同时开启几个线程的。</span></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSInteger</span> maxConcurrentOperationCount;</div><div class=\"line\"><span class=\"comment\">//挂起</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">getter</span>=isSuspended) <span class=\"built_in\">BOOL</span> suspended;</div><div class=\"line\"><span class=\"comment\">//队列的名字</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nullable</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *name <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_6, <span class=\"number\">4</span>_0);</div><div class=\"line\"><span class=\"comment\">//优先级</span></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSQualityOfService</span> qualityOfService <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_10, <span class=\"number\">8</span>_0);</div><div class=\"line\">队列</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nullable</span>, <span class=\"keyword\">assign</span> <span class=\"comment\">/* actually retain */</span>) <span class=\"built_in\">dispatch_queue_t</span> underlyingQueue <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_10, <span class=\"number\">8</span>_0);</div><div class=\"line\"><span class=\"comment\">//取消所有的操作</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cancelAllOperations;</div><div class=\"line\"><span class=\"comment\">//等到他们的操作结束</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)waitUntilAllOperationsAreFinished;</div><div class=\"line\"><span class=\"comment\">//当前的队列</span></div><div class=\"line\">+ (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSOperationQueue</span> *)currentQueue <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_6, <span class=\"number\">4</span>_0);</div><div class=\"line\"><span class=\"comment\">//主队列</span></div><div class=\"line\">+ (<span class=\"built_in\">NSOperationQueue</span> *)mainQueue <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_6, <span class=\"number\">4</span>_0);</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\"># 队列的例子</span></div><div class=\"line\"><span class=\"meta\">#队列中添加的operation都是在子线程中执行的。</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)print&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程info : %@\"</span>,[<span class=\"built_in\">NSThread</span> currentThread]);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)op1&#123;</div><div class=\"line\">     <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"op1 开始运行了\"</span>);</div><div class=\"line\">     sleep(<span class=\"number\">3</span>);</div><div class=\"line\">     <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"op1 结束\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)test5&#123;</div><div class=\"line\">    <span class=\"built_in\">NSInvocationOperation</span> * op1 =[[<span class=\"built_in\">NSInvocationOperation</span> alloc]initWithTarget:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(op1) object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSOperationQueue</span> * queue =[[<span class=\"built_in\">NSOperationQueue</span> alloc]init];</div><div class=\"line\">    [queue addOperation:op1]; <span class=\"comment\">//添加操作</span></div><div class=\"line\">    queue.maxConcurrentOperationCount = <span class=\"number\">1</span>;<span class=\"comment\">//同时允许一个operation运行</span></div><div class=\"line\">    <span class=\"built_in\">NSBlockOperation</span> *block = [<span class=\"keyword\">self</span> test4];<span class=\"comment\">//任务块</span></div><div class=\"line\">    [queue addOperation:block];<span class=\"comment\">//添加任务块并运行</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// sleep(2);  </span></div><div class=\"line\">   <span class=\"comment\">// [queue cancelAllOperations];</span></div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"built_in\">NSBlockOperation</span> *)test4&#123;</div><div class=\"line\">    <span class=\"built_in\">NSBlockOperation</span> * blop = [[<span class=\"built_in\">NSBlockOperation</span> alloc]init];</div><div class=\"line\">    [blop addExecutionBlock:^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"blop1_1 start\"</span>);</div><div class=\"line\">        [<span class=\"keyword\">self</span> print];</div><div class=\"line\">        sleep(<span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"blop1_1 end\"</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    [blop addExecutionBlock:^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"blop1_2 start\"</span>);</div><div class=\"line\">        [<span class=\"keyword\">self</span> print];</div><div class=\"line\">        sleep(<span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"blop1_2 end\"</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    <span class=\"keyword\">return</span> blop;</div><div class=\"line\">&#125;</div><div class=\"line\">输出：</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span>:<span class=\"number\">16.663</span> GCD_Demo[<span class=\"number\">26038</span>:<span class=\"number\">889212</span>] op1 ****开始运行了**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span>:<span class=\"number\">19.737</span> GCD_Demo[<span class=\"number\">26038</span>:<span class=\"number\">889212</span>] op1 ****结束**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span>:<span class=\"number\">19.738</span> GCD_Demo[<span class=\"number\">26038</span>:<span class=\"number\">889213</span>] blop1_1 start**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span>:<span class=\"number\">19.738</span> GCD_Demo[<span class=\"number\">26038</span>:<span class=\"number\">889226</span>] blop1_2 start**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span>:<span class=\"number\">19.738</span> GCD_Demo[<span class=\"number\">26038</span>:<span class=\"number\">889213</span>] ****线程****info : &lt;<span class=\"built_in\">NSThread</span>: <span class=\"number\">0x7fea3061d110</span>&gt;&#123;number = <span class=\"number\">2</span>, name = (null)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span>:<span class=\"number\">19.738</span> GCD_Demo[<span class=\"number\">26038</span>:<span class=\"number\">889226</span>] ****线程****info : &lt;<span class=\"built_in\">NSThread</span>: <span class=\"number\">0x7fea31800140</span>&gt;&#123;number = <span class=\"number\">3</span>, name = (null)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span>:<span class=\"number\">21.808</span> GCD_Demo[<span class=\"number\">26038</span>:<span class=\"number\">889213</span>] blop1_1 end**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span>:<span class=\"number\">23.784</span> GCD_Demo[<span class=\"number\">26038</span>:<span class=\"number\">889226</span>] blop1_2 end**</div><div class=\"line\"><span class=\"meta\"># 从输出的信息可以看出来，当设置最大的operation为1的时候，相当于这个队列同步运行了，不过这个同步的单位不是线程，而是operation。</span></div><div class=\"line\"></div><div class=\"line\">当把这两句代码加到 test5最后边输出结果是：</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">28</span>:<span class=\"number\">59.267</span> GCD_Demo[<span class=\"number\">26113</span>:<span class=\"number\">892737</span>] op1 ****开始运行了**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">29</span>:<span class=\"number\">02.341</span> GCD_Demo[<span class=\"number\">26113</span>:<span class=\"number\">892737</span>] op1 ****结束**</div><div class=\"line\">从输出结果得出：正在执行的Operation无法stop，正在ready的operation直接跳过start，执行complateBlock.状态由ready改为canceld。ps：注意看官方文档</div><div class=\"line\">`Canceling the operations does not automatically remove them from the queue or stop those that are currently executing.`</div><div class=\"line\">正在执行的不会从队列中删除也不会stop。</div><div class=\"line\">`For operations that are queued and waiting execution, the queue must still attempt to execute the operation before recognizing that it is canceled and moving it to the finished state. </div><div class=\"line\">For operations that are already executing, the operation object itself must check <span class=\"keyword\">for</span> cancellation and stop what it is doing so that it can move to the finished state. </div><div class=\"line\">In both cases, a finished (or canceled) operation is still given a chance to execute its completion block before it is removed from the queue.` </div><div class=\"line\">正在队列中等待的operation执行的时候会检测是否被cancenld，如果状态是canceld，那么直接执行completion block 在它被队列删除的时候。</div></pre></td></tr></table></figure>\n<h3 id=\"u5728_u5B50_u7EBF_u7A0B_u4E2D_u8017_u65F6_u7684_u64CD_u4F5C_u5B8C_u6210_u4E86_uFF0C_u90A3_u4E48_u8BE5_u5728_u4E3B_u7EBF_u7A0B_u4E2D_u66F4_u65B0UI\"><a href=\"#u5728_u5B50_u7EBF_u7A0B_u4E2D_u8017_u65F6_u7684_u64CD_u4F5C_u5B8C_u6210_u4E86_uFF0C_u90A3_u4E48_u8BE5_u5728_u4E3B_u7EBF_u7A0B_u4E2D_u66F4_u65B0UI\" class=\"headerlink\" title=\"在子线程中耗时的操作完成了，那么该在主线程中更新UI\"></a>在子线程中耗时的操作完成了，那么该在主线程中更新UI</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#将上面的test5 改成下面的代码</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)test5&#123;</div><div class=\"line\">    <span class=\"built_in\">NSInvocationOperation</span> * op1 =[[<span class=\"built_in\">NSInvocationOperation</span> alloc]initWithTarget:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(op1) object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSOperationQueue</span> * queue =[[<span class=\"built_in\">NSOperationQueue</span> alloc]init];</div><div class=\"line\">    [queue addOperation:op1];</div><div class=\"line\">    queue.maxConcurrentOperationCount = <span class=\"number\">3</span>;<span class=\"comment\">//根据需要设置数量</span></div><div class=\"line\">    <span class=\"built_in\">NSBlockOperation</span> *block = [<span class=\"keyword\">self</span> test4];</div><div class=\"line\">    [queue addOperation:block];</div><div class=\"line\"><span class=\"comment\">//这句话一定要添加，这句话的意思等到所有的operation都完成了在执行后面的代码，</span></div><div class=\"line\">其实就是上面的操作执行到这里要等待他们直到他们都完成了。</div><div class=\"line\"><span class=\"meta\">#     [queue waitUntilAllOperationsAreFinished]; </span></div><div class=\"line\">    <span class=\"built_in\">NSBlockOperation</span> * blockUpdateMainUI=[<span class=\"built_in\">NSBlockOperation</span> blockOperationWithBlock:^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"update UI\"</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    [[<span class=\"built_in\">NSOperationQueue</span> mainQueue] addOperation:blockUpdateMainUI];<span class=\"comment\">//在主队列中执行更新UI的操作</span></div><div class=\"line\">&#125;</div><div class=\"line\">上面的代码 和GCD中的分组有些类似，但是 这个OperationQueue基本单位是operation而不是线程，一定要理解。</div><div class=\"line\">operation和线程的关系是 一个operation可能对应多个线程，也可能对应一个线程。</div></pre></td></tr></table></figure>\n<p>关于NSOperationQueue的了解和使用我想到的基本就这么多场景，后期有其他的场景再补充。<br>预告：下期节目是NSThread的介绍和使用。<br>ps:广告时间</p>\n<hr>\n<p>有问题可以发我邮箱讨论共同交流技术。<br>fgyong@yeah.net</p>\n","excerpt":"","more":"<p>前篇文章已经讲了GCD了，那么这两者有什么区别？</p>\n<h3 id=\"GCD_VS_NSOperation\"><a href=\"#GCD_VS_NSOperation\" class=\"headerlink\" title=\"GCD VS   NSOperation\"></a>GCD VS   NSOperation</h3><blockquote>\n<p>“NSOperationQueue predates Grand Central Dispatch and on iOS it doesn’t use GCD to execute operations (this is different on Mac OS X). It uses regular background threads which have a little more overhead than GCD dispatch queues.<br>On the other hand, NSOperationQueue gives you a lot more control over how your operations are executed. You can define dependencies between individual operations for example, which isn’t possible with plain GCD queues. It is also possible to cancel operations that have been enqueued in an NSOperationQueue (as far as the operations support it). When you enqueue a block in a GCD dispatch queue, it will definitely be executed at some point.<br>To sum it up, NSOperationQueue can be more suitable for long-running operations that may need to be cancelled or have complex dependencies. GCD dispatch queues are better for short tasks that should have minimum performance and memory overhead.”</p>\n</blockquote>\n<p>简单来说就是GCD偏底层点，性能好，依赖关系少，并发耗费资源少。<br>NSOperation可观察状态，性能也不错，处理事务更简单操作。</p>\n<p>对于这两种都熟练运用的人来说，无所谓了，APP大多数事务这两者都能完美解决。至于代码用哪个这个取决于你的兴趣了。</p>\n<p>下面详细说一下NSOperation</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSOperation</span> : <span class=\"title\">NSObject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)start; <span class=\"comment\">//开始执行 默认是同步执行的</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)main; <span class=\"comment\">//主任务的函数 </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isCancelled) <span class=\"built_in\">BOOL</span> cancelled; <span class=\"comment\">//是否取消</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cancel; <span class=\"comment\">//取消任务</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isExecuting) <span class=\"built_in\">BOOL</span> executing;<span class=\"comment\">//是否正在执行</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isFinished) <span class=\"built_in\">BOOL</span> finished; <span class=\"comment\">//是否完成</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isConcurrent) <span class=\"built_in\">BOOL</span> concurrent; <span class=\"comment\">// To be deprecated; use and override 'asynchronous' below 是否并行</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isAsynchronous) <span class=\"built_in\">BOOL</span> asynchronous <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_8, <span class=\"number\">7</span>_0); <span class=\"comment\">//是否异步</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isReady) <span class=\"built_in\">BOOL</span> ready; <span class=\"comment\">//是否正在等待</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addDependency:(<span class=\"built_in\">NSOperation</span> *)op; <span class=\"comment\">//添加依赖</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)removeDependency:(<span class=\"built_in\">NSOperation</span> *)op; <span class=\"comment\">//删除依赖关系</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSOperation</span> *&gt; *dependencies; <span class=\"comment\">//所有依赖关系的数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSInteger</span>, <span class=\"built_in\">NSOperationQueuePriority</span>) &#123;</div><div class=\"line\"><span class=\"comment\">//队列优先级  优先级高的先执行 一般设置为0 即 NSOperationQueuePriorityNormal。</span></div><div class=\"line\"> <span class=\"built_in\">NSOperationQueuePriorityVeryLow</span> = <span class=\"number\">-8</span>L,</div><div class=\"line\"> <span class=\"built_in\">NSOperationQueuePriorityLow</span> = <span class=\"number\">-4</span>L,</div><div class=\"line\"> <span class=\"built_in\">NSOperationQueuePriorityNormal</span> = <span class=\"number\">0</span>,</div><div class=\"line\"> <span class=\"built_in\">NSOperationQueuePriorityHigh</span> = <span class=\"number\">4</span>,</div><div class=\"line\"> <span class=\"built_in\">NSOperationQueuePriorityVeryHigh</span> = <span class=\"number\">8</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSOperationQueuePriority</span> queuePriority;<span class=\"comment\">//队列优先级</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nullable</span>, <span class=\"keyword\">copy</span>) <span class=\"keyword\">void</span> (^completionBlock)(<span class=\"keyword\">void</span>)  <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_6, <span class=\"number\">4</span>_0);<span class=\"comment\">//完成时候执行的代码块</span></div><div class=\"line\"><span class=\"comment\">//等待直到完成</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)waitUntilFinished <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_6, <span class=\"number\">4</span>_0);</div><div class=\"line\"><span class=\"comment\">//线程优先级</span></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"keyword\">double</span> threadPriority <span class=\"built_in\">NS_DEPRECATED</span>(<span class=\"number\">10</span>_6, <span class=\"number\">10</span>_10, <span class=\"number\">4</span>_0, <span class=\"number\">8</span>_0);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSQualityOfService</span> qualityOfService <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_10, <span class=\"number\">8</span>_0);</div><div class=\"line\"><span class=\"built_in\">NSQualityOfService</span> 的几个枚举值：</div><div class=\"line\">  <span class=\"built_in\">NSQualityOfServiceUserInteractive</span>：最高优先级，主要用于提供交互UI的操作，比如处理点击事件，绘制图像到屏幕上</div><div class=\"line\">  <span class=\"built_in\">NSQualityOfServiceUserInitiated</span>：次高优先级，主要用于执行需要立即返回的任务</div><div class=\"line\">  <span class=\"built_in\">NSQualityOfServiceDefault</span>：默认优先级，当没有设置优先级的时候，线程默认优先级</div><div class=\"line\">  <span class=\"built_in\">NSQualityOfServiceUtility</span>：普通优先级，主要用于不需要立即返回的任务</div><div class=\"line\">  <span class=\"built_in\">NSQualityOfServiceBackground</span>：后台优先级，用于完全不紧急的任务</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//名字</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nullable</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *name <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_10, <span class=\"number\">8</span>_0);</div></pre></td></tr></table></figure>\n<h3 id=\"NSBlockOperation\"><a href=\"#NSBlockOperation\" class=\"headerlink\" title=\"NSBlockOperation\"></a>NSBlockOperation</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)print&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程info : %@\"</span>,[<span class=\"built_in\">NSThread</span> currentThread]);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)test4&#123;</div><div class=\"line\">    <span class=\"built_in\">NSBlockOperation</span> * blop = [[<span class=\"built_in\">NSBlockOperation</span> alloc]init];</div><div class=\"line\">    [blop addExecutionBlock:^&#123;<span class=\"comment\">//添加同时执行的task</span></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 start\"</span>);</div><div class=\"line\">        [<span class=\"keyword\">self</span> print];</div><div class=\"line\">        sleep(<span class=\"number\">2</span>);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 end\"</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    [blop addExecutionBlock:^&#123; <span class=\"comment\">//添加同时执行的task</span></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 start\"</span>);</div><div class=\"line\">        [<span class=\"keyword\">self</span> print];</div><div class=\"line\">        sleep(<span class=\"number\">4</span>);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 end\"</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    [blop addExecutionBlock:^&#123; <span class=\"comment\">//添加同时执行的task</span></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3 start\"</span>);</div><div class=\"line\">        [<span class=\"keyword\">self</span> print];</div><div class=\"line\">        sleep(<span class=\"number\">1</span>);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3 end\"</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    [blop setCompletionBlock:^&#123; <span class=\"comment\">//添加同时执行的task</span></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"blop end\"</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    [blop start];</div><div class=\"line\">&#125;</div><div class=\"line\">输出：</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">44.857</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562249</span>] <span class=\"number\">1</span> start**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">44.857</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562287</span>] <span class=\"number\">3</span> start**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">44.857</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562288</span>] <span class=\"number\">2</span> start**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">44.857</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562249</span>] ****线程****info : &lt;<span class=\"built_in\">NSThread</span>: <span class=\"number\">0x7fea68408b30</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">44.857</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562288</span>] ****线程****info : &lt;<span class=\"built_in\">NSThread</span>: <span class=\"number\">0x7fea6861fb30</span>&gt;&#123;number = <span class=\"number\">3</span>, name = (null)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">44.857</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562287</span>] ****线程****info : &lt;<span class=\"built_in\">NSThread</span>: <span class=\"number\">0x7fea69300470</span>&gt;&#123;number = <span class=\"number\">2</span>, name = (null)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">45.922</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562287</span>] <span class=\"number\">3</span> end**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">46.858</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562249</span>] <span class=\"number\">1</span> end**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">48.928</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562288</span>] <span class=\"number\">2</span> end**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-29</span> <span class=\"number\">16</span>:<span class=\"number\">47</span>:<span class=\"number\">48.929</span> GCD_Demo[<span class=\"number\">17555</span>:<span class=\"number\">562288</span>] blop end**</div></pre></td></tr></table></figure>\n<p>可以看出来，NSBlockOperation当任务是1的时候在main线程中执行，任务大于1的时候，其他的个自独自开了线程，而且互不影响。</p>\n<h3 id=\"u4F9D_u8D56_u5173_u7CFB\"><a href=\"#u4F9D_u8D56_u5173_u7CFB\" class=\"headerlink\" title=\"依赖关系\"></a>依赖关系</h3><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)print&#123;</div><div class=\"line\">    NSLog(<span class=\"comment\">@\"线程info : %@\",[NSThread currentThread]);</span></div><div class=\"line\">&#125;</div><div class=\"line\">- (void)test4&#123;</div><div class=\"line\">    NSBlockOperation * <span class=\"keyword\">blop </span>= [[NSBlockOperation alloc]init]<span class=\"comment\">;</span></div><div class=\"line\">    [<span class=\"keyword\">blop </span><span class=\"keyword\">addExecutionBlock:^&#123;</div><div class=\"line\"></span>        NSLog(<span class=\"comment\">@\"blop1_1 start\");</span></div><div class=\"line\">        [<span class=\"keyword\">self </span>print]<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(<span class=\"comment\">@\"blop1_1 end\");</span></div><div class=\"line\">    &#125;]<span class=\"comment\">;</span></div><div class=\"line\">    [<span class=\"keyword\">blop </span><span class=\"keyword\">addExecutionBlock:^&#123;</div><div class=\"line\"></span>        NSLog(<span class=\"comment\">@\"blop1_2 start\");</span></div><div class=\"line\">        [<span class=\"keyword\">self </span>print]<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">4</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(<span class=\"comment\">@\"blop1_2 end\");</span></div><div class=\"line\">    &#125;]<span class=\"comment\">;</span></div><div class=\"line\">    NSLog(<span class=\"comment\">@\"blop will start\");</span></div><div class=\"line\">    [<span class=\"keyword\">blop </span>start]<span class=\"comment\">;</span></div><div class=\"line\">    NSLog(<span class=\"comment\">@\"blop did start\");</span></div><div class=\"line\">    </div><div class=\"line\">    NSBlockOperation * <span class=\"keyword\">blop2 </span>=[NSBlockOperation <span class=\"keyword\">blockOperationWithBlock:^&#123;</div><div class=\"line\"></span>        NSLog(<span class=\"comment\">@\"blop2 start\");</span></div><div class=\"line\">        [<span class=\"keyword\">self </span>print]<span class=\"comment\">;</span></div><div class=\"line\">        sleep(<span class=\"number\">2</span>)<span class=\"comment\">;</span></div><div class=\"line\">        NSLog(<span class=\"comment\">@\"blop2 end\");</span></div><div class=\"line\">    &#125;]<span class=\"comment\">;</span></div><div class=\"line\">   // [<span class=\"keyword\">blop2 </span><span class=\"keyword\">addDependency:blop];//blop2 </span>依赖<span class=\"keyword\">blop </span>就是<span class=\"keyword\">blopExecutionBlock </span>执行完之后再执行<span class=\"keyword\">blop2的任务【blop2 </span>执行task和<span class=\"keyword\">blop </span>的CompletionBlock基本是同时执行的】</div><div class=\"line\">    [<span class=\"keyword\">blop2 </span>start]<span class=\"comment\">;</span></div><div class=\"line\">输出：</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">53</span>.<span class=\"number\">217</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574416</span>] <span class=\"keyword\">blop </span>will start**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">53</span>.<span class=\"number\">217</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574416</span>] <span class=\"keyword\">blop1_1 </span>start**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">53</span>.<span class=\"number\">217</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574455</span>] <span class=\"keyword\">blop1_2 </span>start**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">53</span>.<span class=\"number\">217</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574416</span>] ****线程****<span class=\"meta\">info</span> : &lt;NSThread: <span class=\"number\">0x7f839a004ff0</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">53</span>.<span class=\"number\">218</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574455</span>] ****线程****<span class=\"meta\">info</span> : &lt;NSThread: <span class=\"number\">0x7f8398416d80</span>&gt;&#123;number = <span class=\"number\">2</span>, name = (null)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">55</span>.<span class=\"number\">219</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574416</span>] <span class=\"keyword\">blop1_1 </span><span class=\"meta\">end</span>**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">57</span>.<span class=\"number\">272</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574455</span>] <span class=\"keyword\">blop1_2 </span><span class=\"meta\">end</span>**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">57</span>.<span class=\"number\">272</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574416</span>] <span class=\"keyword\">blop </span>did start**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">57</span>.<span class=\"number\">273</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574416</span>] <span class=\"keyword\">blop2 </span>start**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">57</span>.<span class=\"number\">273</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574416</span>] ****线程****<span class=\"meta\">info</span> : &lt;NSThread: <span class=\"number\">0x7f839a004ff0</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span>-<span class=\"number\">03</span>-<span class=\"number\">29</span> <span class=\"number\">17</span>:<span class=\"number\">06</span>:<span class=\"number\">59</span>.<span class=\"number\">274</span> GCD_Demo[<span class=\"number\">17806</span>:<span class=\"number\">574416</span>] <span class=\"keyword\">blop2 </span><span class=\"meta\">end</span>**</div></pre></td></tr></table></figure>\n<p>从输出的信息可以看出来，block是同步执行的，虽然多任务是多线程，但是主线程还是在阻塞中，只有上一个所有 task 执行完的时候，才会执行下边的task。所以在这里依赖关系不那么重要了，注释掉运行结果也一样的。</p>\n<h3 id=\"NSInvocationOperation\"><a href=\"#NSInvocationOperation\" class=\"headerlink\" title=\"NSInvocationOperation\"></a>NSInvocationOperation</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSInvocationOperation</span> 是<span class=\"built_in\">NSOperation</span>的子类，负责实现operation的SEL方法。</div><div class=\"line\">这样子operation就可以start的时候执行一些函数了。</div><div class=\"line\">在swift中已经废弃</div><div class=\"line\">看文档：</div><div class=\"line\"><span class=\"built_in\">NS_SWIFT_UNAVAILABLE</span>(<span class=\"string\">\"NSInvocation and related APIs not available\"</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"NSOperationQueue\"><a href=\"#NSOperationQueue\" class=\"headerlink\" title=\"NSOperationQueue\"></a>NSOperationQueue</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//添加操作</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addOperation:(<span class=\"built_in\">NSOperation</span> *)op;</div><div class=\"line\"><span class=\"comment\">//添加操作数组 在完成操作的时候</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addOperations:(<span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSOperation</span> *&gt; *)ops waitUntilFinished:(<span class=\"built_in\">BOOL</span>)wait <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_6, <span class=\"number\">4</span>_0);</div><div class=\"line\"><span class=\"comment\">//添加携带代码块的operation</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addOperationWithBlock:(<span class=\"keyword\">void</span> (^)(<span class=\"keyword\">void</span>))block <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_6, <span class=\"number\">4</span>_0);</div><div class=\"line\"><span class=\"comment\">//所有的操作 组成的数组 可读属性</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSArray</span>&lt;__kindof <span class=\"built_in\">NSOperation</span> *&gt; *operations;</div><div class=\"line\"><span class=\"comment\">//操作个数</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSUInteger</span> operationCount <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_6, <span class=\"number\">4</span>_0);</div><div class=\"line\"><span class=\"comment\">//设置最大并行的任务数 ps:operation 其实 一个operation可以同时开启几个线程的。</span></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSInteger</span> maxConcurrentOperationCount;</div><div class=\"line\"><span class=\"comment\">//挂起</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">getter</span>=isSuspended) <span class=\"built_in\">BOOL</span> suspended;</div><div class=\"line\"><span class=\"comment\">//队列的名字</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nullable</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *name <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_6, <span class=\"number\">4</span>_0);</div><div class=\"line\"><span class=\"comment\">//优先级</span></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSQualityOfService</span> qualityOfService <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_10, <span class=\"number\">8</span>_0);</div><div class=\"line\">队列</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nullable</span>, <span class=\"keyword\">assign</span> <span class=\"comment\">/* actually retain */</span>) <span class=\"built_in\">dispatch_queue_t</span> underlyingQueue <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_10, <span class=\"number\">8</span>_0);</div><div class=\"line\"><span class=\"comment\">//取消所有的操作</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cancelAllOperations;</div><div class=\"line\"><span class=\"comment\">//等到他们的操作结束</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)waitUntilAllOperationsAreFinished;</div><div class=\"line\"><span class=\"comment\">//当前的队列</span></div><div class=\"line\">+ (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSOperationQueue</span> *)currentQueue <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_6, <span class=\"number\">4</span>_0);</div><div class=\"line\"><span class=\"comment\">//主队列</span></div><div class=\"line\">+ (<span class=\"built_in\">NSOperationQueue</span> *)mainQueue <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_6, <span class=\"number\">4</span>_0);</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\"># 队列的例子</span></div><div class=\"line\"><span class=\"meta\">#队列中添加的operation都是在子线程中执行的。</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)print&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程info : %@\"</span>,[<span class=\"built_in\">NSThread</span> currentThread]);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)op1&#123;</div><div class=\"line\">     <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"op1 开始运行了\"</span>);</div><div class=\"line\">     sleep(<span class=\"number\">3</span>);</div><div class=\"line\">     <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"op1 结束\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)test5&#123;</div><div class=\"line\">    <span class=\"built_in\">NSInvocationOperation</span> * op1 =[[<span class=\"built_in\">NSInvocationOperation</span> alloc]initWithTarget:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(op1) object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSOperationQueue</span> * queue =[[<span class=\"built_in\">NSOperationQueue</span> alloc]init];</div><div class=\"line\">    [queue addOperation:op1]; <span class=\"comment\">//添加操作</span></div><div class=\"line\">    queue.maxConcurrentOperationCount = <span class=\"number\">1</span>;<span class=\"comment\">//同时允许一个operation运行</span></div><div class=\"line\">    <span class=\"built_in\">NSBlockOperation</span> *block = [<span class=\"keyword\">self</span> test4];<span class=\"comment\">//任务块</span></div><div class=\"line\">    [queue addOperation:block];<span class=\"comment\">//添加任务块并运行</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// sleep(2);  </span></div><div class=\"line\">   <span class=\"comment\">// [queue cancelAllOperations];</span></div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"built_in\">NSBlockOperation</span> *)test4&#123;</div><div class=\"line\">    <span class=\"built_in\">NSBlockOperation</span> * blop = [[<span class=\"built_in\">NSBlockOperation</span> alloc]init];</div><div class=\"line\">    [blop addExecutionBlock:^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"blop1_1 start\"</span>);</div><div class=\"line\">        [<span class=\"keyword\">self</span> print];</div><div class=\"line\">        sleep(<span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"blop1_1 end\"</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    [blop addExecutionBlock:^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"blop1_2 start\"</span>);</div><div class=\"line\">        [<span class=\"keyword\">self</span> print];</div><div class=\"line\">        sleep(<span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"blop1_2 end\"</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    <span class=\"keyword\">return</span> blop;</div><div class=\"line\">&#125;</div><div class=\"line\">输出：</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span>:<span class=\"number\">16.663</span> GCD_Demo[<span class=\"number\">26038</span>:<span class=\"number\">889212</span>] op1 ****开始运行了**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span>:<span class=\"number\">19.737</span> GCD_Demo[<span class=\"number\">26038</span>:<span class=\"number\">889212</span>] op1 ****结束**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span>:<span class=\"number\">19.738</span> GCD_Demo[<span class=\"number\">26038</span>:<span class=\"number\">889213</span>] blop1_1 start**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span>:<span class=\"number\">19.738</span> GCD_Demo[<span class=\"number\">26038</span>:<span class=\"number\">889226</span>] blop1_2 start**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span>:<span class=\"number\">19.738</span> GCD_Demo[<span class=\"number\">26038</span>:<span class=\"number\">889213</span>] ****线程****info : &lt;<span class=\"built_in\">NSThread</span>: <span class=\"number\">0x7fea3061d110</span>&gt;&#123;number = <span class=\"number\">2</span>, name = (null)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span>:<span class=\"number\">19.738</span> GCD_Demo[<span class=\"number\">26038</span>:<span class=\"number\">889226</span>] ****线程****info : &lt;<span class=\"built_in\">NSThread</span>: <span class=\"number\">0x7fea31800140</span>&gt;&#123;number = <span class=\"number\">3</span>, name = (null)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span>:<span class=\"number\">21.808</span> GCD_Demo[<span class=\"number\">26038</span>:<span class=\"number\">889213</span>] blop1_1 end**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span>:<span class=\"number\">23.784</span> GCD_Demo[<span class=\"number\">26038</span>:<span class=\"number\">889226</span>] blop1_2 end**</div><div class=\"line\"><span class=\"meta\"># 从输出的信息可以看出来，当设置最大的operation为1的时候，相当于这个队列同步运行了，不过这个同步的单位不是线程，而是operation。</span></div><div class=\"line\"></div><div class=\"line\">当把这两句代码加到 test5最后边输出结果是：</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">28</span>:<span class=\"number\">59.267</span> GCD_Demo[<span class=\"number\">26113</span>:<span class=\"number\">892737</span>] op1 ****开始运行了**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">29</span>:<span class=\"number\">02.341</span> GCD_Demo[<span class=\"number\">26113</span>:<span class=\"number\">892737</span>] op1 ****结束**</div><div class=\"line\">从输出结果得出：正在执行的Operation无法stop，正在ready的operation直接跳过start，执行complateBlock.状态由ready改为canceld。ps：注意看官方文档</div><div class=\"line\">`Canceling the operations does not automatically remove them from the queue or stop those that are currently executing.`</div><div class=\"line\">正在执行的不会从队列中删除也不会stop。</div><div class=\"line\">`For operations that are queued and waiting execution, the queue must still attempt to execute the operation before recognizing that it is canceled and moving it to the finished state. </div><div class=\"line\">For operations that are already executing, the operation object itself must check <span class=\"keyword\">for</span> cancellation and stop what it is doing so that it can move to the finished state. </div><div class=\"line\">In both cases, a finished (or canceled) operation is still given a chance to execute its completion block before it is removed from the queue.` </div><div class=\"line\">正在队列中等待的operation执行的时候会检测是否被cancenld，如果状态是canceld，那么直接执行completion block 在它被队列删除的时候。</div></pre></td></tr></table></figure>\n<h3 id=\"u5728_u5B50_u7EBF_u7A0B_u4E2D_u8017_u65F6_u7684_u64CD_u4F5C_u5B8C_u6210_u4E86_uFF0C_u90A3_u4E48_u8BE5_u5728_u4E3B_u7EBF_u7A0B_u4E2D_u66F4_u65B0UI\"><a href=\"#u5728_u5B50_u7EBF_u7A0B_u4E2D_u8017_u65F6_u7684_u64CD_u4F5C_u5B8C_u6210_u4E86_uFF0C_u90A3_u4E48_u8BE5_u5728_u4E3B_u7EBF_u7A0B_u4E2D_u66F4_u65B0UI\" class=\"headerlink\" title=\"在子线程中耗时的操作完成了，那么该在主线程中更新UI\"></a>在子线程中耗时的操作完成了，那么该在主线程中更新UI</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#将上面的test5 改成下面的代码</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)test5&#123;</div><div class=\"line\">    <span class=\"built_in\">NSInvocationOperation</span> * op1 =[[<span class=\"built_in\">NSInvocationOperation</span> alloc]initWithTarget:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(op1) object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSOperationQueue</span> * queue =[[<span class=\"built_in\">NSOperationQueue</span> alloc]init];</div><div class=\"line\">    [queue addOperation:op1];</div><div class=\"line\">    queue.maxConcurrentOperationCount = <span class=\"number\">3</span>;<span class=\"comment\">//根据需要设置数量</span></div><div class=\"line\">    <span class=\"built_in\">NSBlockOperation</span> *block = [<span class=\"keyword\">self</span> test4];</div><div class=\"line\">    [queue addOperation:block];</div><div class=\"line\"><span class=\"comment\">//这句话一定要添加，这句话的意思等到所有的operation都完成了在执行后面的代码，</span></div><div class=\"line\">其实就是上面的操作执行到这里要等待他们直到他们都完成了。</div><div class=\"line\"><span class=\"meta\">#     [queue waitUntilAllOperationsAreFinished]; </span></div><div class=\"line\">    <span class=\"built_in\">NSBlockOperation</span> * blockUpdateMainUI=[<span class=\"built_in\">NSBlockOperation</span> blockOperationWithBlock:^&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"update UI\"</span>);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    [[<span class=\"built_in\">NSOperationQueue</span> mainQueue] addOperation:blockUpdateMainUI];<span class=\"comment\">//在主队列中执行更新UI的操作</span></div><div class=\"line\">&#125;</div><div class=\"line\">上面的代码 和GCD中的分组有些类似，但是 这个OperationQueue基本单位是operation而不是线程，一定要理解。</div><div class=\"line\">operation和线程的关系是 一个operation可能对应多个线程，也可能对应一个线程。</div></pre></td></tr></table></figure>\n<p>关于NSOperationQueue的了解和使用我想到的基本就这么多场景，后期有其他的场景再补充。<br>预告：下期节目是NSThread的介绍和使用。<br>ps:广告时间</p>\n<hr>\n<p>有问题可以发我邮箱讨论共同交流技术。<br>fgyong@yeah.net</p>\n"},{"title":"iOS线程之NSThread","date":"2016-04-13T03:23:40.000Z","_content":"前两篇文章已经将了现在主流的GCD和NSOperationQueue,现在我们在聊一下NSThread。\n### 创建NSThread \n方法一 类方法\n```\n+ (void)detachNewThreadSelector:(SEL)selector toTarget:(id)target withObject:(nullable id)argument;\n```\n方法二 实例方法\n ```\n- (instancetype)initWithTarget:(id)target selector:(SEL)selector object:(nullable id)argument NS_AVAILABLE(10_5, 2_0);\n```\n这两者的区别是 类方法是创建新的线程并且立即启动，而第二个方法是创建线程，但是没有启动，启动需要` [thread start]`。\n### 获取线程的状态\n```\n正在执行\n@property (readonly, getter=isExecuting) BOOL executing NS_AVAILABLE(10_5, 2_0);\n完成\n@property (readonly, getter=isFinished) BOOL finished NS_AVAILABLE(10_5, 2_0);\n取消\n@property (readonly, getter=isCancelled) BOOL cancelled NS_AVAILABLE(10_5, 2_0);\n```\n### 更改线程状态\n```\n取消\n- (void)cancel NS_AVAILABLE(10_5, 2_0);\n开始\n- (void)start NS_AVAILABLE(10_5, 2_0);\n线程的主函数\n- (void)main NS_AVAILABLE(10_5, 2_0);\n```\n在子线程中想要更新UI怎么办，这里官方直接提供了在子线程执行方法的函数，很实用的。\n```\n- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(nullable id)arg waitUntilDone:(BOOL)wait modes:(nullable NSArray<NSString *> *)array;\n在主线程执行\n- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(nullable id)arg waitUntilDone:(BOOL)wait;\n\n // equivalent to the first method with kCFRunLoopCommonModes\n- (void)performSelector:(SEL)aSelector \n                        onThread:(NSThread *)thr \n                      withObject:(nullable id)arg \n                waitUntilDone:(BOOL)wait \n                              modes:(nullable NSArray<NSString *> *)array NS_AVAILABLE(10_5, 2_0);\n- (void)performSelector:(SEL)aSelector \n                          onThread:(NSThread *)thr\n                       withObject:(nullable id)arg \n                waitUntilDone:(BOOL)wait NS_AVAILABLE(10_5, 2_0);\n // equivalent to the first method with kCFRunLoopCommonModes\n- (void)performSelectorInBackground:(SEL)aSelector\n                                                  withObject:(nullable id)arg NS_AVAILABLE(10_5, 2_0);\n```\n### 代码\n```\n- (void)test6{\n    NSThread * thread = [[NSThread alloc]initWithTarget:self selector:@selector(op1) object:nil];\n    thread.name = @\"test6\";\n    [thread start];\n    [self performSelectorInBackground:@selector(print) withObject:nil];\n}\n- (void)print{\n    NSLog(@\"线程info : %@\",[NSThread currentThread]);\n}\n- (void)op1{\n    \n     NSLog(@\"op1 开始运行了\");\n     sleep(3);\n\n     NSLog(@\"op1 结束\");\n}\n输出：\n**2016-04-13 10:34:23.515 GCD_Demo[33904:647479] op1 ****开始运行了**\n**2016-04-13 10:34:23.515 GCD_Demo[33904:647480] ****线程****info : <NSThread: 0x7fcc81a1abe0>{number = 3, name = (null)}**\n**2016-04-13 10:34:26.521 GCD_Demo[33904:647479] op1 ****结束**\n```\n从输出结果看出来`[self performSelectorInBackground:@selector(print) withObject:nil];`又自动生成了子线程并且在子线程执行`print`函数。\n\n把test6函数改成下面的情况\n```\n//当waitUntilDone 是yes的时候，是同步执行\n [self performSelectorOnMainThread:@selector(print) withObject:nil waitUntilDone:NO];\n    _thread = [[NSThread alloc]initWithTarget:self selector:@selector(op1) object:nil];\n    _thread.name = @\"test6\";\n    [_thread start];\n    [self performSelectorInBackground:@selector(print) withObject:nil];\n```\n输出：\n```\n**2016-04-13 10:41:32.534 GCD_Demo[34026:652753] test6 ****开始运行了**\n**2016-04-13 10:41:32.534 GCD_Demo[34026:652754] ****线程****info : <NSThread: 0x7fb7320a1bf0>{number = 3, name = (null)}**\n**2016-04-13 10:41:32.537 GCD_Demo[34026:652708] ****线程****info : <NSThread: 0x7fb730c05a20>{number = 1, name = main}**\n**2016-04-13 10:41:35.539 GCD_Demo[34026:652753] test6 ****结束**\n```\n`[self performSelectorOnMainThread:@selector(print) \n                                                withObject:nil\n                                         waitUntilDone:NO];`\nwaitUntilDone为YES的时候是同步执行代码，为NO的时候异步执行代码。\n`[self performSelectorInBackground:@selector(print) withObject:nil];`开启子线程执行print函数。\n### cancel thread\n```\n- (void)test6{\n    _thread = [[NSThread alloc]initWithTarget:self selector:@selector(op1) object:nil];\n    _thread.name = @\"test6\";\n    [_thread start];\n    sleep(2);\n    [_thread cancel];\n    if (_thread.cancelled) {\n        NSLog(@\"%@ canceld\",_thread.name);\n    } else if(_thread.executing){\n        NSLog(@\"%@ execuitng\",_thread.name);\n    }\n}\n```\n输出：\n```\n**2016-04-13 10:50:46.685 GCD_Demo[34128:657263] test6 ****开始运行了**\n**2016-04-13 10:50:48.686 GCD_Demo[34128:657214] test6 canceld**\n**2016-04-13 10:50:48.692 GCD_Demo[34128:657214] ****线程****info : <NSThread: 0x7ffb34004fb0>{number = 1, name = main}**\n**2016-04-13 10:51:16.689 GCD_Demo[34128:657263] test6 ****结束**\n```\n其实thread取消也是在执行中的线程是没办法直接取消的，`[thread cancel]`紧紧是改了状态，却没有终止线程。和`[NSOperation cancel]`类似，当你cancel之后，如果线程在执行，那么他会执行完毕，如果线程还没执行，那么他会终止执行。\n\n关于thread的通知\n```\n//将要变成多线程 在有新的线程启动的时候会发送此通知\nFOUNDATION_EXPORT NSString * const NSWillBecomeMultiThreadedNotification;\n//将要变成单独线程  官方标注: Not implemented.【没有实现】\nFOUNDATION_EXPORT NSString * const NSDidBecomeSingleThreadedNotification;\n//线程退出\nFOUNDATION_EXPORT NSString * const NSThreadWillExitNotification;\n\n通过这三个通知可以监测线程的启动和现成的退出。\n//监测线程启动，启动的线程是未知的所以object是nil\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(becomeMultiNsthread) name:NSWillBecomeMultiThreadedNotification object:nil];\n\n//监测线程退出\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(exit:) name:NSThreadWillExitNotification object:nil];\n```\n线程的讨论暂时就这么多，有问题我们一起讨论，欢迎留言。。","source":"_posts/iOS线程之NSThread.md","raw":"title: iOS线程之NSThread\ndate: 2016-04-13 11:23:40\ntags:\n- iOS\n- iOS高级\ncategories: iOS\n---\n前两篇文章已经将了现在主流的GCD和NSOperationQueue,现在我们在聊一下NSThread。\n### 创建NSThread \n方法一 类方法\n```\n+ (void)detachNewThreadSelector:(SEL)selector toTarget:(id)target withObject:(nullable id)argument;\n```\n方法二 实例方法\n ```\n- (instancetype)initWithTarget:(id)target selector:(SEL)selector object:(nullable id)argument NS_AVAILABLE(10_5, 2_0);\n```\n这两者的区别是 类方法是创建新的线程并且立即启动，而第二个方法是创建线程，但是没有启动，启动需要` [thread start]`。\n### 获取线程的状态\n```\n正在执行\n@property (readonly, getter=isExecuting) BOOL executing NS_AVAILABLE(10_5, 2_0);\n完成\n@property (readonly, getter=isFinished) BOOL finished NS_AVAILABLE(10_5, 2_0);\n取消\n@property (readonly, getter=isCancelled) BOOL cancelled NS_AVAILABLE(10_5, 2_0);\n```\n### 更改线程状态\n```\n取消\n- (void)cancel NS_AVAILABLE(10_5, 2_0);\n开始\n- (void)start NS_AVAILABLE(10_5, 2_0);\n线程的主函数\n- (void)main NS_AVAILABLE(10_5, 2_0);\n```\n在子线程中想要更新UI怎么办，这里官方直接提供了在子线程执行方法的函数，很实用的。\n```\n- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(nullable id)arg waitUntilDone:(BOOL)wait modes:(nullable NSArray<NSString *> *)array;\n在主线程执行\n- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(nullable id)arg waitUntilDone:(BOOL)wait;\n\n // equivalent to the first method with kCFRunLoopCommonModes\n- (void)performSelector:(SEL)aSelector \n                        onThread:(NSThread *)thr \n                      withObject:(nullable id)arg \n                waitUntilDone:(BOOL)wait \n                              modes:(nullable NSArray<NSString *> *)array NS_AVAILABLE(10_5, 2_0);\n- (void)performSelector:(SEL)aSelector \n                          onThread:(NSThread *)thr\n                       withObject:(nullable id)arg \n                waitUntilDone:(BOOL)wait NS_AVAILABLE(10_5, 2_0);\n // equivalent to the first method with kCFRunLoopCommonModes\n- (void)performSelectorInBackground:(SEL)aSelector\n                                                  withObject:(nullable id)arg NS_AVAILABLE(10_5, 2_0);\n```\n### 代码\n```\n- (void)test6{\n    NSThread * thread = [[NSThread alloc]initWithTarget:self selector:@selector(op1) object:nil];\n    thread.name = @\"test6\";\n    [thread start];\n    [self performSelectorInBackground:@selector(print) withObject:nil];\n}\n- (void)print{\n    NSLog(@\"线程info : %@\",[NSThread currentThread]);\n}\n- (void)op1{\n    \n     NSLog(@\"op1 开始运行了\");\n     sleep(3);\n\n     NSLog(@\"op1 结束\");\n}\n输出：\n**2016-04-13 10:34:23.515 GCD_Demo[33904:647479] op1 ****开始运行了**\n**2016-04-13 10:34:23.515 GCD_Demo[33904:647480] ****线程****info : <NSThread: 0x7fcc81a1abe0>{number = 3, name = (null)}**\n**2016-04-13 10:34:26.521 GCD_Demo[33904:647479] op1 ****结束**\n```\n从输出结果看出来`[self performSelectorInBackground:@selector(print) withObject:nil];`又自动生成了子线程并且在子线程执行`print`函数。\n\n把test6函数改成下面的情况\n```\n//当waitUntilDone 是yes的时候，是同步执行\n [self performSelectorOnMainThread:@selector(print) withObject:nil waitUntilDone:NO];\n    _thread = [[NSThread alloc]initWithTarget:self selector:@selector(op1) object:nil];\n    _thread.name = @\"test6\";\n    [_thread start];\n    [self performSelectorInBackground:@selector(print) withObject:nil];\n```\n输出：\n```\n**2016-04-13 10:41:32.534 GCD_Demo[34026:652753] test6 ****开始运行了**\n**2016-04-13 10:41:32.534 GCD_Demo[34026:652754] ****线程****info : <NSThread: 0x7fb7320a1bf0>{number = 3, name = (null)}**\n**2016-04-13 10:41:32.537 GCD_Demo[34026:652708] ****线程****info : <NSThread: 0x7fb730c05a20>{number = 1, name = main}**\n**2016-04-13 10:41:35.539 GCD_Demo[34026:652753] test6 ****结束**\n```\n`[self performSelectorOnMainThread:@selector(print) \n                                                withObject:nil\n                                         waitUntilDone:NO];`\nwaitUntilDone为YES的时候是同步执行代码，为NO的时候异步执行代码。\n`[self performSelectorInBackground:@selector(print) withObject:nil];`开启子线程执行print函数。\n### cancel thread\n```\n- (void)test6{\n    _thread = [[NSThread alloc]initWithTarget:self selector:@selector(op1) object:nil];\n    _thread.name = @\"test6\";\n    [_thread start];\n    sleep(2);\n    [_thread cancel];\n    if (_thread.cancelled) {\n        NSLog(@\"%@ canceld\",_thread.name);\n    } else if(_thread.executing){\n        NSLog(@\"%@ execuitng\",_thread.name);\n    }\n}\n```\n输出：\n```\n**2016-04-13 10:50:46.685 GCD_Demo[34128:657263] test6 ****开始运行了**\n**2016-04-13 10:50:48.686 GCD_Demo[34128:657214] test6 canceld**\n**2016-04-13 10:50:48.692 GCD_Demo[34128:657214] ****线程****info : <NSThread: 0x7ffb34004fb0>{number = 1, name = main}**\n**2016-04-13 10:51:16.689 GCD_Demo[34128:657263] test6 ****结束**\n```\n其实thread取消也是在执行中的线程是没办法直接取消的，`[thread cancel]`紧紧是改了状态，却没有终止线程。和`[NSOperation cancel]`类似，当你cancel之后，如果线程在执行，那么他会执行完毕，如果线程还没执行，那么他会终止执行。\n\n关于thread的通知\n```\n//将要变成多线程 在有新的线程启动的时候会发送此通知\nFOUNDATION_EXPORT NSString * const NSWillBecomeMultiThreadedNotification;\n//将要变成单独线程  官方标注: Not implemented.【没有实现】\nFOUNDATION_EXPORT NSString * const NSDidBecomeSingleThreadedNotification;\n//线程退出\nFOUNDATION_EXPORT NSString * const NSThreadWillExitNotification;\n\n通过这三个通知可以监测线程的启动和现成的退出。\n//监测线程启动，启动的线程是未知的所以object是nil\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(becomeMultiNsthread) name:NSWillBecomeMultiThreadedNotification object:nil];\n\n//监测线程退出\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(exit:) name:NSThreadWillExitNotification object:nil];\n```\n线程的讨论暂时就这么多，有问题我们一起讨论，欢迎留言。。","slug":"iOS线程之NSThread","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj47000dnhmfq5thgaml","content":"<p>前两篇文章已经将了现在主流的GCD和NSOperationQueue,现在我们在聊一下NSThread。</p>\n<h3 id=\"u521B_u5EFANSThread\"><a href=\"#u521B_u5EFANSThread\" class=\"headerlink\" title=\"创建NSThread\"></a>创建NSThread</h3><p>方法一 类方法<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"keyword\">void</span>)<span class=\"string\">detachNewThreadSelector:</span>(SEL)selector <span class=\"string\">toTarget:</span>(id)target <span class=\"string\">withObject:</span>(nullable id)argument;</div></pre></td></tr></table></figure></p>\n<p>方法二 实例方法<br> <figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (instance<span class=\"keyword\">type</span>)initWithTarget:(id)target selector:(<span class=\"type\">SEL</span>)selector object:(nullable id)argument <span class=\"type\">NS_AVAILABLE</span>(10_5, 2_0);</div></pre></td></tr></table></figure></p>\n<p>这两者的区别是 类方法是创建新的线程并且立即启动，而第二个方法是创建线程，但是没有启动，启动需要<code>[thread start]</code>。</p>\n<h3 id=\"u83B7_u53D6_u7EBF_u7A0B_u7684_u72B6_u6001\"><a href=\"#u83B7_u53D6_u7EBF_u7A0B_u7684_u72B6_u6001\" class=\"headerlink\" title=\"获取线程的状态\"></a>获取线程的状态</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">正在执行</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isExecuting) <span class=\"built_in\">BOOL</span> executing <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0);</div><div class=\"line\">完成</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isFinished) <span class=\"built_in\">BOOL</span> finished <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0);</div><div class=\"line\">取消</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isCancelled) <span class=\"built_in\">BOOL</span> cancelled <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0);</div></pre></td></tr></table></figure>\n<h3 id=\"u66F4_u6539_u7EBF_u7A0B_u72B6_u6001\"><a href=\"#u66F4_u6539_u7EBF_u7A0B_u72B6_u6001\" class=\"headerlink\" title=\"更改线程状态\"></a>更改线程状态</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">取消</div><div class=\"line\">- (<span class=\"keyword\">void</span>)<span class=\"function\">cancel <span class=\"title\">NS_AVAILABLE</span><span class=\"params\">(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0)</span></span>;</div><div class=\"line\">开始</div><div class=\"line\">- (<span class=\"keyword\">void</span>)<span class=\"function\">start <span class=\"title\">NS_AVAILABLE</span><span class=\"params\">(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0)</span></span>;</div><div class=\"line\">线程的主函数</div><div class=\"line\">- (<span class=\"keyword\">void</span>)<span class=\"function\">main <span class=\"title\">NS_AVAILABLE</span><span class=\"params\">(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0)</span></span>;</div></pre></td></tr></table></figure>\n<p>在子线程中想要更新UI怎么办，这里官方直接提供了在子线程执行方法的函数，很实用的。<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)performSelectorOnMainThread:(SEL)aSelector withObject:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)arg waitUntilDone:(<span class=\"built_in\">BOOL</span>)wait modes:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *)array;</div><div class=\"line\">在主线程执行</div><div class=\"line\">- (<span class=\"keyword\">void</span>)performSelectorOnMainThread:(SEL)aSelector withObject:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)arg waitUntilDone:(<span class=\"built_in\">BOOL</span>)wait;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// equivalent to the first method with kCFRunLoopCommonModes</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)performSelector:(SEL)aSelector </div><div class=\"line\">                        onThread:(<span class=\"built_in\">NSThread</span> *)thr </div><div class=\"line\">                      withObject:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)arg </div><div class=\"line\">                waitUntilDone:(<span class=\"built_in\">BOOL</span>)wait </div><div class=\"line\">                              modes:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *)array <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0);</div><div class=\"line\">- (<span class=\"keyword\">void</span>)performSelector:(SEL)aSelector </div><div class=\"line\">                          onThread:(<span class=\"built_in\">NSThread</span> *)thr</div><div class=\"line\">                       withObject:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)arg </div><div class=\"line\">                waitUntilDone:(<span class=\"built_in\">BOOL</span>)wait <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0);</div><div class=\"line\"> <span class=\"comment\">// equivalent to the first method with kCFRunLoopCommonModes</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)performSelectorInBackground:(SEL)aSelector</div><div class=\"line\">                                                  withObject:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)arg <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0);</div></pre></td></tr></table></figure></p>\n<h3 id=\"u4EE3_u7801\"><a href=\"#u4EE3_u7801\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)test6&#123;</div><div class=\"line\">    <span class=\"built_in\">NSThread</span> * thread = [[<span class=\"built_in\">NSThread</span> alloc]initWithTarget:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(op1) object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    thread.name = <span class=\"string\">@\"test6\"</span>;</div><div class=\"line\">    [thread start];</div><div class=\"line\">    [<span class=\"keyword\">self</span> performSelectorInBackground:<span class=\"keyword\">@selector</span>(print) withObject:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)print&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程info : %@\"</span>,[<span class=\"built_in\">NSThread</span> currentThread]);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)op1&#123;</div><div class=\"line\">    </div><div class=\"line\">     <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"op1 开始运行了\"</span>);</div><div class=\"line\">     sleep(<span class=\"number\">3</span>);</div><div class=\"line\"></div><div class=\"line\">     <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"op1 结束\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">输出：</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-04</span><span class=\"number\">-13</span> <span class=\"number\">10</span>:<span class=\"number\">34</span>:<span class=\"number\">23.515</span> GCD_Demo[<span class=\"number\">33904</span>:<span class=\"number\">647479</span>] op1 ****开始运行了**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-04</span><span class=\"number\">-13</span> <span class=\"number\">10</span>:<span class=\"number\">34</span>:<span class=\"number\">23.515</span> GCD_Demo[<span class=\"number\">33904</span>:<span class=\"number\">647480</span>] ****线程****info : &lt;<span class=\"built_in\">NSThread</span>: <span class=\"number\">0x7fcc81a1abe0</span>&gt;&#123;number = <span class=\"number\">3</span>, name = (null)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-04</span><span class=\"number\">-13</span> <span class=\"number\">10</span>:<span class=\"number\">34</span>:<span class=\"number\">26.521</span> GCD_Demo[<span class=\"number\">33904</span>:<span class=\"number\">647479</span>] op1 ****结束**</div></pre></td></tr></table></figure>\n<p>从输出结果看出来<code>[self performSelectorInBackground:@selector(print) withObject:nil];</code>又自动生成了子线程并且在子线程执行<code>print</code>函数。</p>\n<p>把test6函数改成下面的情况<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//当waitUntilDone 是yes的时候，是同步执行</span></div><div class=\"line\"> [self <span class=\"string\">performSelectorOnMainThread:</span><span class=\"meta\">@selector</span>(print) <span class=\"string\">withObject:</span>nil <span class=\"string\">waitUntilDone:</span>NO];</div><div class=\"line\">    _thread = [[NSThread alloc]<span class=\"string\">initWithTarget:</span>self <span class=\"string\">selector:</span><span class=\"meta\">@selector</span>(op1) <span class=\"string\">object:</span>nil];</div><div class=\"line\">    _thread.name = @<span class=\"string\">\"test6\"</span>;</div><div class=\"line\">    [_thread start];</div><div class=\"line\">    [self <span class=\"string\">performSelectorInBackground:</span><span class=\"meta\">@selector</span>(print) <span class=\"string\">withObject:</span>nil];</div></pre></td></tr></table></figure></p>\n<p>输出：<br><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">*<span class=\"strong\">*2016-04-13 10:41:32.534 GCD_Demo[34026:652753] test6 *</span>**<span class=\"strong\">*开始运行了*</span>*</div><div class=\"line\">*<span class=\"strong\">*2016-04-13 10:41:32.534 GCD_Demo[34026:652754] *</span>**<span class=\"strong\">*线程*</span>**<span class=\"strong\">*info : &lt;NSThread: 0x7fb7320a1bf0&gt;&#123;number = 3, name = (null)&#125;*</span>*</div><div class=\"line\">*<span class=\"strong\">*2016-04-13 10:41:32.537 GCD_Demo[34026:652708] *</span>**<span class=\"strong\">*线程*</span>**<span class=\"strong\">*info : &lt;NSThread: 0x7fb730c05a20&gt;&#123;number = 1, name = main&#125;*</span>*</div><div class=\"line\">*<span class=\"strong\">*2016-04-13 10:41:35.539 GCD_Demo[34026:652753] test6 *</span>**<span class=\"strong\">*结束*</span><span class=\"strong\">*</span></div></pre></td></tr></table></figure></p>\n<p><code>[self performSelectorOnMainThread:@selector(print) \n                                                withObject:nil\n                                         waitUntilDone:NO];</code><br>waitUntilDone为YES的时候是同步执行代码，为NO的时候异步执行代码。<br><code>[self performSelectorInBackground:@selector(print) withObject:nil];</code>开启子线程执行print函数。</p>\n<h3 id=\"cancel_thread\"><a href=\"#cancel_thread\" class=\"headerlink\" title=\"cancel thread\"></a>cancel thread</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)test6&#123;</div><div class=\"line\">    _thread = [[<span class=\"built_in\">NSThread</span> alloc]initWithTarget:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(op1) object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    _thread.name = <span class=\"string\">@\"test6\"</span>;</div><div class=\"line\">    [_thread start];</div><div class=\"line\">    sleep(<span class=\"number\">2</span>);</div><div class=\"line\">    [_thread cancel];</div><div class=\"line\">    <span class=\"keyword\">if</span> (_thread.cancelled) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@ canceld\"</span>,_thread.name);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(_thread.executing)&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@ execuitng\"</span>,_thread.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">**<span class=\"number\">2016-04-13</span> <span class=\"number\">10</span>:<span class=\"number\">50:46.685</span> GCD_Demo[<span class=\"number\">34128</span>:<span class=\"number\">657263</span>] test6 ****开始运行了**</div><div class=\"line\">**<span class=\"number\">2016-04-13</span> <span class=\"number\">10</span>:<span class=\"number\">50:48.686</span> GCD_Demo[<span class=\"number\">34128:657214</span>] test6 canceld**</div><div class=\"line\">**<span class=\"number\">2016-04-13</span> <span class=\"number\">10</span>:<span class=\"number\">50:48.692</span> GCD_Demo[<span class=\"number\">34128:657214</span>] ****线程****info : &lt;NSThread: <span class=\"number\">0</span>x7ffb34004fb0&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;**</div><div class=\"line\">**<span class=\"number\">2016-04-13</span> <span class=\"number\">10</span>:<span class=\"number\">51:16.689</span> GCD_Demo[<span class=\"number\">34128</span>:<span class=\"number\">657263</span>] test6 ****结束**</div></pre></td></tr></table></figure></p>\n<p>其实thread取消也是在执行中的线程是没办法直接取消的，<code>[thread cancel]</code>紧紧是改了状态，却没有终止线程。和<code>[NSOperation cancel]</code>类似，当你cancel之后，如果线程在执行，那么他会执行完毕，如果线程还没执行，那么他会终止执行。</p>\n<p>关于thread的通知<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//将要变成多线程 在有新的线程启动的时候会发送此通知</span></div><div class=\"line\">FOUNDATION_EXPORT <span class=\"built_in\">NSString</span> * <span class=\"keyword\">const</span> <span class=\"built_in\">NSWillBecomeMultiThreadedNotification</span>;</div><div class=\"line\"><span class=\"comment\">//将要变成单独线程  官方标注: Not implemented.【没有实现】</span></div><div class=\"line\">FOUNDATION_EXPORT <span class=\"built_in\">NSString</span> * <span class=\"keyword\">const</span> <span class=\"built_in\">NSDidBecomeSingleThreadedNotification</span>;</div><div class=\"line\"><span class=\"comment\">//线程退出</span></div><div class=\"line\">FOUNDATION_EXPORT <span class=\"built_in\">NSString</span> * <span class=\"keyword\">const</span> <span class=\"built_in\">NSThreadWillExitNotification</span>;</div><div class=\"line\"></div><div class=\"line\">通过这三个通知可以监测线程的启动和现成的退出。</div><div class=\"line\"><span class=\"comment\">//监测线程启动，启动的线程是未知的所以object是nil</span></div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(becomeMultiNsthread) name:<span class=\"built_in\">NSWillBecomeMultiThreadedNotification</span> object:<span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//监测线程退出</span></div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(exit:) name:<span class=\"built_in\">NSThreadWillExitNotification</span> object:<span class=\"literal\">nil</span>];</div></pre></td></tr></table></figure></p>\n<p>线程的讨论暂时就这么多，有问题我们一起讨论，欢迎留言。。</p>\n","excerpt":"","more":"<p>前两篇文章已经将了现在主流的GCD和NSOperationQueue,现在我们在聊一下NSThread。</p>\n<h3 id=\"u521B_u5EFANSThread\"><a href=\"#u521B_u5EFANSThread\" class=\"headerlink\" title=\"创建NSThread\"></a>创建NSThread</h3><p>方法一 类方法<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"keyword\">void</span>)<span class=\"string\">detachNewThreadSelector:</span>(SEL)selector <span class=\"string\">toTarget:</span>(id)target <span class=\"string\">withObject:</span>(nullable id)argument;</div></pre></td></tr></table></figure></p>\n<p>方法二 实例方法<br> <figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (instance<span class=\"keyword\">type</span>)initWithTarget:(id)target selector:(<span class=\"type\">SEL</span>)selector object:(nullable id)argument <span class=\"type\">NS_AVAILABLE</span>(10_5, 2_0);</div></pre></td></tr></table></figure></p>\n<p>这两者的区别是 类方法是创建新的线程并且立即启动，而第二个方法是创建线程，但是没有启动，启动需要<code>[thread start]</code>。</p>\n<h3 id=\"u83B7_u53D6_u7EBF_u7A0B_u7684_u72B6_u6001\"><a href=\"#u83B7_u53D6_u7EBF_u7A0B_u7684_u72B6_u6001\" class=\"headerlink\" title=\"获取线程的状态\"></a>获取线程的状态</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">正在执行</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isExecuting) <span class=\"built_in\">BOOL</span> executing <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0);</div><div class=\"line\">完成</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isFinished) <span class=\"built_in\">BOOL</span> finished <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0);</div><div class=\"line\">取消</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isCancelled) <span class=\"built_in\">BOOL</span> cancelled <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0);</div></pre></td></tr></table></figure>\n<h3 id=\"u66F4_u6539_u7EBF_u7A0B_u72B6_u6001\"><a href=\"#u66F4_u6539_u7EBF_u7A0B_u72B6_u6001\" class=\"headerlink\" title=\"更改线程状态\"></a>更改线程状态</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">取消</div><div class=\"line\">- (<span class=\"keyword\">void</span>)<span class=\"function\">cancel <span class=\"title\">NS_AVAILABLE</span><span class=\"params\">(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0)</span></span>;</div><div class=\"line\">开始</div><div class=\"line\">- (<span class=\"keyword\">void</span>)<span class=\"function\">start <span class=\"title\">NS_AVAILABLE</span><span class=\"params\">(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0)</span></span>;</div><div class=\"line\">线程的主函数</div><div class=\"line\">- (<span class=\"keyword\">void</span>)<span class=\"function\">main <span class=\"title\">NS_AVAILABLE</span><span class=\"params\">(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0)</span></span>;</div></pre></td></tr></table></figure>\n<p>在子线程中想要更新UI怎么办，这里官方直接提供了在子线程执行方法的函数，很实用的。<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)performSelectorOnMainThread:(SEL)aSelector withObject:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)arg waitUntilDone:(<span class=\"built_in\">BOOL</span>)wait modes:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *)array;</div><div class=\"line\">在主线程执行</div><div class=\"line\">- (<span class=\"keyword\">void</span>)performSelectorOnMainThread:(SEL)aSelector withObject:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)arg waitUntilDone:(<span class=\"built_in\">BOOL</span>)wait;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// equivalent to the first method with kCFRunLoopCommonModes</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)performSelector:(SEL)aSelector </div><div class=\"line\">                        onThread:(<span class=\"built_in\">NSThread</span> *)thr </div><div class=\"line\">                      withObject:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)arg </div><div class=\"line\">                waitUntilDone:(<span class=\"built_in\">BOOL</span>)wait </div><div class=\"line\">                              modes:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *)array <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0);</div><div class=\"line\">- (<span class=\"keyword\">void</span>)performSelector:(SEL)aSelector </div><div class=\"line\">                          onThread:(<span class=\"built_in\">NSThread</span> *)thr</div><div class=\"line\">                       withObject:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)arg </div><div class=\"line\">                waitUntilDone:(<span class=\"built_in\">BOOL</span>)wait <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0);</div><div class=\"line\"> <span class=\"comment\">// equivalent to the first method with kCFRunLoopCommonModes</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)performSelectorInBackground:(SEL)aSelector</div><div class=\"line\">                                                  withObject:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)arg <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_5, <span class=\"number\">2</span>_0);</div></pre></td></tr></table></figure></p>\n<h3 id=\"u4EE3_u7801\"><a href=\"#u4EE3_u7801\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)test6&#123;</div><div class=\"line\">    <span class=\"built_in\">NSThread</span> * thread = [[<span class=\"built_in\">NSThread</span> alloc]initWithTarget:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(op1) object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    thread.name = <span class=\"string\">@\"test6\"</span>;</div><div class=\"line\">    [thread start];</div><div class=\"line\">    [<span class=\"keyword\">self</span> performSelectorInBackground:<span class=\"keyword\">@selector</span>(print) withObject:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)print&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"线程info : %@\"</span>,[<span class=\"built_in\">NSThread</span> currentThread]);</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)op1&#123;</div><div class=\"line\">    </div><div class=\"line\">     <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"op1 开始运行了\"</span>);</div><div class=\"line\">     sleep(<span class=\"number\">3</span>);</div><div class=\"line\"></div><div class=\"line\">     <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"op1 结束\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">输出：</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-04</span><span class=\"number\">-13</span> <span class=\"number\">10</span>:<span class=\"number\">34</span>:<span class=\"number\">23.515</span> GCD_Demo[<span class=\"number\">33904</span>:<span class=\"number\">647479</span>] op1 ****开始运行了**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-04</span><span class=\"number\">-13</span> <span class=\"number\">10</span>:<span class=\"number\">34</span>:<span class=\"number\">23.515</span> GCD_Demo[<span class=\"number\">33904</span>:<span class=\"number\">647480</span>] ****线程****info : &lt;<span class=\"built_in\">NSThread</span>: <span class=\"number\">0x7fcc81a1abe0</span>&gt;&#123;number = <span class=\"number\">3</span>, name = (null)&#125;**</div><div class=\"line\">**<span class=\"number\">2016</span><span class=\"number\">-04</span><span class=\"number\">-13</span> <span class=\"number\">10</span>:<span class=\"number\">34</span>:<span class=\"number\">26.521</span> GCD_Demo[<span class=\"number\">33904</span>:<span class=\"number\">647479</span>] op1 ****结束**</div></pre></td></tr></table></figure>\n<p>从输出结果看出来<code>[self performSelectorInBackground:@selector(print) withObject:nil];</code>又自动生成了子线程并且在子线程执行<code>print</code>函数。</p>\n<p>把test6函数改成下面的情况<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//当waitUntilDone 是yes的时候，是同步执行</span></div><div class=\"line\"> [self <span class=\"string\">performSelectorOnMainThread:</span><span class=\"meta\">@selector</span>(print) <span class=\"string\">withObject:</span>nil <span class=\"string\">waitUntilDone:</span>NO];</div><div class=\"line\">    _thread = [[NSThread alloc]<span class=\"string\">initWithTarget:</span>self <span class=\"string\">selector:</span><span class=\"meta\">@selector</span>(op1) <span class=\"string\">object:</span>nil];</div><div class=\"line\">    _thread.name = @<span class=\"string\">\"test6\"</span>;</div><div class=\"line\">    [_thread start];</div><div class=\"line\">    [self <span class=\"string\">performSelectorInBackground:</span><span class=\"meta\">@selector</span>(print) <span class=\"string\">withObject:</span>nil];</div></pre></td></tr></table></figure></p>\n<p>输出：<br><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">*<span class=\"strong\">*2016-04-13 10:41:32.534 GCD_Demo[34026:652753] test6 *</span>**<span class=\"strong\">*开始运行了*</span>*</div><div class=\"line\">*<span class=\"strong\">*2016-04-13 10:41:32.534 GCD_Demo[34026:652754] *</span>**<span class=\"strong\">*线程*</span>**<span class=\"strong\">*info : &lt;NSThread: 0x7fb7320a1bf0&gt;&#123;number = 3, name = (null)&#125;*</span>*</div><div class=\"line\">*<span class=\"strong\">*2016-04-13 10:41:32.537 GCD_Demo[34026:652708] *</span>**<span class=\"strong\">*线程*</span>**<span class=\"strong\">*info : &lt;NSThread: 0x7fb730c05a20&gt;&#123;number = 1, name = main&#125;*</span>*</div><div class=\"line\">*<span class=\"strong\">*2016-04-13 10:41:35.539 GCD_Demo[34026:652753] test6 *</span>**<span class=\"strong\">*结束*</span><span class=\"strong\">*</span></div></pre></td></tr></table></figure></p>\n<p><code>[self performSelectorOnMainThread:@selector(print) \n                                                withObject:nil\n                                         waitUntilDone:NO];</code><br>waitUntilDone为YES的时候是同步执行代码，为NO的时候异步执行代码。<br><code>[self performSelectorInBackground:@selector(print) withObject:nil];</code>开启子线程执行print函数。</p>\n<h3 id=\"cancel_thread\"><a href=\"#cancel_thread\" class=\"headerlink\" title=\"cancel thread\"></a>cancel thread</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)test6&#123;</div><div class=\"line\">    _thread = [[<span class=\"built_in\">NSThread</span> alloc]initWithTarget:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(op1) object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    _thread.name = <span class=\"string\">@\"test6\"</span>;</div><div class=\"line\">    [_thread start];</div><div class=\"line\">    sleep(<span class=\"number\">2</span>);</div><div class=\"line\">    [_thread cancel];</div><div class=\"line\">    <span class=\"keyword\">if</span> (_thread.cancelled) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@ canceld\"</span>,_thread.name);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(_thread.executing)&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@ execuitng\"</span>,_thread.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">**<span class=\"number\">2016-04-13</span> <span class=\"number\">10</span>:<span class=\"number\">50:46.685</span> GCD_Demo[<span class=\"number\">34128</span>:<span class=\"number\">657263</span>] test6 ****开始运行了**</div><div class=\"line\">**<span class=\"number\">2016-04-13</span> <span class=\"number\">10</span>:<span class=\"number\">50:48.686</span> GCD_Demo[<span class=\"number\">34128:657214</span>] test6 canceld**</div><div class=\"line\">**<span class=\"number\">2016-04-13</span> <span class=\"number\">10</span>:<span class=\"number\">50:48.692</span> GCD_Demo[<span class=\"number\">34128:657214</span>] ****线程****info : &lt;NSThread: <span class=\"number\">0</span>x7ffb34004fb0&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;**</div><div class=\"line\">**<span class=\"number\">2016-04-13</span> <span class=\"number\">10</span>:<span class=\"number\">51:16.689</span> GCD_Demo[<span class=\"number\">34128</span>:<span class=\"number\">657263</span>] test6 ****结束**</div></pre></td></tr></table></figure></p>\n<p>其实thread取消也是在执行中的线程是没办法直接取消的，<code>[thread cancel]</code>紧紧是改了状态，却没有终止线程。和<code>[NSOperation cancel]</code>类似，当你cancel之后，如果线程在执行，那么他会执行完毕，如果线程还没执行，那么他会终止执行。</p>\n<p>关于thread的通知<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//将要变成多线程 在有新的线程启动的时候会发送此通知</span></div><div class=\"line\">FOUNDATION_EXPORT <span class=\"built_in\">NSString</span> * <span class=\"keyword\">const</span> <span class=\"built_in\">NSWillBecomeMultiThreadedNotification</span>;</div><div class=\"line\"><span class=\"comment\">//将要变成单独线程  官方标注: Not implemented.【没有实现】</span></div><div class=\"line\">FOUNDATION_EXPORT <span class=\"built_in\">NSString</span> * <span class=\"keyword\">const</span> <span class=\"built_in\">NSDidBecomeSingleThreadedNotification</span>;</div><div class=\"line\"><span class=\"comment\">//线程退出</span></div><div class=\"line\">FOUNDATION_EXPORT <span class=\"built_in\">NSString</span> * <span class=\"keyword\">const</span> <span class=\"built_in\">NSThreadWillExitNotification</span>;</div><div class=\"line\"></div><div class=\"line\">通过这三个通知可以监测线程的启动和现成的退出。</div><div class=\"line\"><span class=\"comment\">//监测线程启动，启动的线程是未知的所以object是nil</span></div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(becomeMultiNsthread) name:<span class=\"built_in\">NSWillBecomeMultiThreadedNotification</span> object:<span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//监测线程退出</span></div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(exit:) name:<span class=\"built_in\">NSThreadWillExitNotification</span> object:<span class=\"literal\">nil</span>];</div></pre></td></tr></table></figure></p>\n<p>线程的讨论暂时就这么多，有问题我们一起讨论，欢迎留言。。</p>\n"},{"title":"iOS自动化打包第一步","date":"2016-01-28T09:32:06.000Z","_content":"## shell入门初探\niOS打包有点烦人，现在就是想做个脚本一条命令执行之后打包然后上传到测试环境脚本。这是第一步在上传的基础上又写了一层上传只需要一条命令即可\n\n``` \n #!/bin/bash \n if [ $# != 1 ] //判断输入参数\n    then\n     echo \"请输入版本号\"//没有参数直接报错\n     exit             //退出\n else\n     version=${1}    //获取输入的版本号\n     shorder=\"./debug-publish.sh ${version} ios debug-${version}.ipa\"//将要执行的shell脚本和命令\n\n\n      $shorder //执行字符串脚本\n      echo \"正在执行命令。。。\"\n      if [ $? -eq 0 ]//判断执行命令的结果是否成功 0是成功\n       then\n       echo \"push successed\"\n       else\n            echo \"push faild\"\n         fi\n\nfi\n                                                                                                 ```\n                                                                                                 完成之后就可以使用了记得给这个脚本权限哦\n                                                                                                 ```\n                                                                                                 chmod +x yourShellFile //给执行权限\n\n                                                                                                 ./yourShellFile 1.1.1 //执行脚本在本目录下面\n                                                                                                 ```\n\n\n                                                                                                 这是我的第一个脚本哦欢迎大虾指教。\n\n\n","source":"_posts/iOS自动化打包第一步.md","raw":"title: iOS自动化打包第一步\ndate: 2016-01-28 17:32:06\ntags:\n- iOS\n- Shell\n- iOS自动化打包\ncategories: iOS\n---\n## shell入门初探\niOS打包有点烦人，现在就是想做个脚本一条命令执行之后打包然后上传到测试环境脚本。这是第一步在上传的基础上又写了一层上传只需要一条命令即可\n\n``` \n #!/bin/bash \n if [ $# != 1 ] //判断输入参数\n    then\n     echo \"请输入版本号\"//没有参数直接报错\n     exit             //退出\n else\n     version=${1}    //获取输入的版本号\n     shorder=\"./debug-publish.sh ${version} ios debug-${version}.ipa\"//将要执行的shell脚本和命令\n\n\n      $shorder //执行字符串脚本\n      echo \"正在执行命令。。。\"\n      if [ $? -eq 0 ]//判断执行命令的结果是否成功 0是成功\n       then\n       echo \"push successed\"\n       else\n            echo \"push faild\"\n         fi\n\nfi\n                                                                                                 ```\n                                                                                                 完成之后就可以使用了记得给这个脚本权限哦\n                                                                                                 ```\n                                                                                                 chmod +x yourShellFile //给执行权限\n\n                                                                                                 ./yourShellFile 1.1.1 //执行脚本在本目录下面\n                                                                                                 ```\n\n\n                                                                                                 这是我的第一个脚本哦欢迎大虾指教。\n\n\n","slug":"iOS自动化打包第一步","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj48000enhmf8mzkljat","content":"<h2 id=\"shell_u5165_u95E8_u521D_u63A2\"><a href=\"#shell_u5165_u95E8_u521D_u63A2\" class=\"headerlink\" title=\"shell入门初探\"></a>shell入门初探</h2><p>iOS打包有点烦人，现在就是想做个脚本一条命令执行之后打包然后上传到测试环境脚本。这是第一步在上传的基础上又写了一层上传只需要一条命令即可</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">#!/bin/bash </span></div><div class=\"line\"> <span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> != <span class=\"number\">1</span> ] <span class=\"regexp\">//</span>判断输入参数</div><div class=\"line\">    then</div><div class=\"line\">     echo <span class=\"string\">\"请输入版本号\"</span><span class=\"regexp\">//</span>没有参数直接报错</div><div class=\"line\">     <span class=\"keyword\">exit</span>             <span class=\"regexp\">//</span>退出</div><div class=\"line\"> <span class=\"keyword\">else</span></div><div class=\"line\">     version=<span class=\"variable\">$&#123;1&#125;</span>    <span class=\"regexp\">//</span>获取输入的版本号</div><div class=\"line\">     shorder=<span class=\"string\">\"./debug-publish.sh $&#123;version&#125; ios debug-$&#123;version&#125;.ipa\"</span><span class=\"regexp\">//</span>将要执行的shell脚本和命令</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"variable\">$shorder</span> <span class=\"regexp\">//</span>执行字符串脚本</div><div class=\"line\">      echo <span class=\"string\">\"正在执行命令。。。\"</span></div><div class=\"line\">      <span class=\"keyword\">if</span> [ $? -eq <span class=\"number\">0</span> ]<span class=\"regexp\">//</span>判断执行命令的结果是否成功 <span class=\"number\">0</span>是成功</div><div class=\"line\">       then</div><div class=\"line\">       echo <span class=\"string\">\"push successed\"</span></div><div class=\"line\">       <span class=\"keyword\">else</span></div><div class=\"line\">            echo <span class=\"string\">\"push faild\"</span></div><div class=\"line\">         fi</div><div class=\"line\"></div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<pre><code>完成之后就可以使用了记得给这个脚本权限哦\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod +x yourShellFile <span class=\"comment\">//给执行权限</span></div><div class=\"line\"></div><div class=\"line\">./yourShellFile <span class=\"number\">1.1</span><span class=\"number\">.1</span> <span class=\"comment\">//执行脚本在本目录下面</span></div></pre></td></tr></table></figure>\n\n这是我的第一个脚本哦欢迎大虾指教。\n</code></pre>","excerpt":"","more":"<h2 id=\"shell_u5165_u95E8_u521D_u63A2\"><a href=\"#shell_u5165_u95E8_u521D_u63A2\" class=\"headerlink\" title=\"shell入门初探\"></a>shell入门初探</h2><p>iOS打包有点烦人，现在就是想做个脚本一条命令执行之后打包然后上传到测试环境脚本。这是第一步在上传的基础上又写了一层上传只需要一条命令即可</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">#!/bin/bash </span></div><div class=\"line\"> <span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> != <span class=\"number\">1</span> ] <span class=\"regexp\">//</span>判断输入参数</div><div class=\"line\">    then</div><div class=\"line\">     echo <span class=\"string\">\"请输入版本号\"</span><span class=\"regexp\">//</span>没有参数直接报错</div><div class=\"line\">     <span class=\"keyword\">exit</span>             <span class=\"regexp\">//</span>退出</div><div class=\"line\"> <span class=\"keyword\">else</span></div><div class=\"line\">     version=<span class=\"variable\">$&#123;1&#125;</span>    <span class=\"regexp\">//</span>获取输入的版本号</div><div class=\"line\">     shorder=<span class=\"string\">\"./debug-publish.sh $&#123;version&#125; ios debug-$&#123;version&#125;.ipa\"</span><span class=\"regexp\">//</span>将要执行的shell脚本和命令</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"variable\">$shorder</span> <span class=\"regexp\">//</span>执行字符串脚本</div><div class=\"line\">      echo <span class=\"string\">\"正在执行命令。。。\"</span></div><div class=\"line\">      <span class=\"keyword\">if</span> [ $? -eq <span class=\"number\">0</span> ]<span class=\"regexp\">//</span>判断执行命令的结果是否成功 <span class=\"number\">0</span>是成功</div><div class=\"line\">       then</div><div class=\"line\">       echo <span class=\"string\">\"push successed\"</span></div><div class=\"line\">       <span class=\"keyword\">else</span></div><div class=\"line\">            echo <span class=\"string\">\"push faild\"</span></div><div class=\"line\">         fi</div><div class=\"line\"></div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<pre><code>完成之后就可以使用了记得给这个脚本权限哦\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod +x yourShellFile <span class=\"comment\">//给执行权限</span></div><div class=\"line\"></div><div class=\"line\">./yourShellFile <span class=\"number\">1.1</span><span class=\"number\">.1</span> <span class=\"comment\">//执行脚本在本目录下面</span></div></pre></td></tr></table></figure>\n\n这是我的第一个脚本哦欢迎大虾指教。\n</code></pre>"},{"title":"iOS证书过期解决方案","date":"2016-01-28T02:36:27.000Z","_content":"关于证书过期还有描述文件不匹配的问题见解：\n\n## 平时问题下列步骤都能解决\n大牛（ps英语好的）[请去苹果开发文档中心](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Troubleshooting/Troubleshooting.html)\n证书过期一般都是先去开发者中心重新创建证书，不过现在的证书过期之后直接被官方删除了，倒是省事了。创建证书不懂的可以自行百度。\n删除配置文件【删除哪些？】那些有关过期证书的描述文件都删了\n重新生成配置文件【ps怎么生成？ 去这里】\n删除Xcode【我用的7.2】本地的描述文件【ps怎么删？去哪里删？】\n去目录 `/Users/用户名/Library/MobileDevice/Provisioning Profiles`文件夹下边删除所有的描述文件\n然后 下载刚才新生成的描述文件，然后双击下载好的描述文件装到电脑和资料库---------------------------------看到这里如果还不行的话，看我放大招--------------------\n\n## 假如你用的是Xcode 7.2的话\n大牛[是去这里](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Troubleshooting/Troubleshooting.html)\n上面的步骤你测试了都不行，然后给你大招解决问题去app工程文件用编辑器打开搜索关键字`PROVISIONING_PROFILE`、`command` +` F` 搜搜有关这关键字的都删除了，然后重启Xcode，重新编译即可\n## 问题还没解决怎么办？\n看看国际友人怎么处理的\n```\nI've also the same problem, in Xcode 7.2\n\nIt solved by followings steps: 1) Open Xcode preference, 2) Select the appropriate team, 3) Click the \"View Details..\". 4) In section \"Signing Identities\": click on \"Reset\" for each of them.\n\n5) In section \"Provisioning Profiles\". Click on \"Download All\".\n\n6) Click on \"Done.\"\n\n7) Go in Xcode, build settings, select it. In General tab, the issues should get removed.\n\n8) Restart the Xcode.\n\n9) Do the Final build.\n\nThat's all.\n```\n我是翻译：\n\n打开Xcode的preference，选择你的账号，点击账号下边的view detail。。然后选择你们的开发证书 reset按钮，之后下载全部的描述文件，点击done按钮。重启和编译Xcode之后，这个问题应该没有了。\n\n--------------------------------------邪恶的分割线----------------------------------------------\n\n这是我对于这个问题的一些总结，希望可以帮到一些人，不懂的可以评论问我。\n\n\n\n\n\n\n\n","source":"_posts/iOS证书过期解决方案.md","raw":"title: iOS证书过期解决方案\ndate: 2016-01-28 10:36:27\ntags: \n- iOS\n- 疑难杂症\ncategories: iOS\n---\n关于证书过期还有描述文件不匹配的问题见解：\n\n## 平时问题下列步骤都能解决\n大牛（ps英语好的）[请去苹果开发文档中心](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Troubleshooting/Troubleshooting.html)\n证书过期一般都是先去开发者中心重新创建证书，不过现在的证书过期之后直接被官方删除了，倒是省事了。创建证书不懂的可以自行百度。\n删除配置文件【删除哪些？】那些有关过期证书的描述文件都删了\n重新生成配置文件【ps怎么生成？ 去这里】\n删除Xcode【我用的7.2】本地的描述文件【ps怎么删？去哪里删？】\n去目录 `/Users/用户名/Library/MobileDevice/Provisioning Profiles`文件夹下边删除所有的描述文件\n然后 下载刚才新生成的描述文件，然后双击下载好的描述文件装到电脑和资料库---------------------------------看到这里如果还不行的话，看我放大招--------------------\n\n## 假如你用的是Xcode 7.2的话\n大牛[是去这里](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Troubleshooting/Troubleshooting.html)\n上面的步骤你测试了都不行，然后给你大招解决问题去app工程文件用编辑器打开搜索关键字`PROVISIONING_PROFILE`、`command` +` F` 搜搜有关这关键字的都删除了，然后重启Xcode，重新编译即可\n## 问题还没解决怎么办？\n看看国际友人怎么处理的\n```\nI've also the same problem, in Xcode 7.2\n\nIt solved by followings steps: 1) Open Xcode preference, 2) Select the appropriate team, 3) Click the \"View Details..\". 4) In section \"Signing Identities\": click on \"Reset\" for each of them.\n\n5) In section \"Provisioning Profiles\". Click on \"Download All\".\n\n6) Click on \"Done.\"\n\n7) Go in Xcode, build settings, select it. In General tab, the issues should get removed.\n\n8) Restart the Xcode.\n\n9) Do the Final build.\n\nThat's all.\n```\n我是翻译：\n\n打开Xcode的preference，选择你的账号，点击账号下边的view detail。。然后选择你们的开发证书 reset按钮，之后下载全部的描述文件，点击done按钮。重启和编译Xcode之后，这个问题应该没有了。\n\n--------------------------------------邪恶的分割线----------------------------------------------\n\n这是我对于这个问题的一些总结，希望可以帮到一些人，不懂的可以评论问我。\n\n\n\n\n\n\n\n","slug":"iOS证书过期解决方案","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj49000fnhmfzjstki1d","content":"<p>关于证书过期还有描述文件不匹配的问题见解：</p>\n<h2 id=\"u5E73_u65F6_u95EE_u9898_u4E0B_u5217_u6B65_u9AA4_u90FD_u80FD_u89E3_u51B3\"><a href=\"#u5E73_u65F6_u95EE_u9898_u4E0B_u5217_u6B65_u9AA4_u90FD_u80FD_u89E3_u51B3\" class=\"headerlink\" title=\"平时问题下列步骤都能解决\"></a>平时问题下列步骤都能解决</h2><p>大牛（ps英语好的）<a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Troubleshooting/Troubleshooting.html\" target=\"_blank\" rel=\"external\">请去苹果开发文档中心</a><br>证书过期一般都是先去开发者中心重新创建证书，不过现在的证书过期之后直接被官方删除了，倒是省事了。创建证书不懂的可以自行百度。<br>删除配置文件【删除哪些？】那些有关过期证书的描述文件都删了<br>重新生成配置文件【ps怎么生成？ 去这里】<br>删除Xcode【我用的7.2】本地的描述文件【ps怎么删？去哪里删？】<br>去目录 <code>/Users/用户名/Library/MobileDevice/Provisioning Profiles</code>文件夹下边删除所有的描述文件<br>然后 下载刚才新生成的描述文件，然后双击下载好的描述文件装到电脑和资料库———————————看到这里如果还不行的话，看我放大招——————–</p>\n<h2 id=\"u5047_u5982_u4F60_u7528_u7684_u662FXcode_7-2_u7684_u8BDD\"><a href=\"#u5047_u5982_u4F60_u7528_u7684_u662FXcode_7-2_u7684_u8BDD\" class=\"headerlink\" title=\"假如你用的是Xcode 7.2的话\"></a>假如你用的是Xcode 7.2的话</h2><p>大牛<a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Troubleshooting/Troubleshooting.html\" target=\"_blank\" rel=\"external\">是去这里</a><br>上面的步骤你测试了都不行，然后给你大招解决问题去app工程文件用编辑器打开搜索关键字<code>PROVISIONING_PROFILE</code>、<code>command</code> +<code>F</code> 搜搜有关这关键字的都删除了，然后重启Xcode，重新编译即可</p>\n<h2 id=\"u95EE_u9898_u8FD8_u6CA1_u89E3_u51B3_u600E_u4E48_u529E_uFF1F\"><a href=\"#u95EE_u9898_u8FD8_u6CA1_u89E3_u51B3_u600E_u4E48_u529E_uFF1F\" class=\"headerlink\" title=\"问题还没解决怎么办？\"></a>问题还没解决怎么办？</h2><p>看看国际友人怎么处理的<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">I've also the same problem, in Xcode 7.2</div><div class=\"line\"></div><div class=\"line\">It solved by followings steps: 1) Open Xcode preference, 2) <span class=\"keyword\">Select</span> the appropriate team, <span class=\"number\">3</span>) Click the <span class=\"string\">\"View Details..\"</span>. <span class=\"number\">4</span>) <span class=\"keyword\">In</span> <span class=\"keyword\">section</span> <span class=\"string\">\"Signing Identities\"</span>: click <span class=\"keyword\">on</span> <span class=\"string\">\"Reset\"</span> <span class=\"keyword\">for</span> <span class=\"keyword\">each</span> <span class=\"keyword\">of</span> them.</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">5</span>) <span class=\"keyword\">In</span> <span class=\"keyword\">section</span> <span class=\"string\">\"Provisioning Profiles\"</span>. Click <span class=\"keyword\">on</span> <span class=\"string\">\"Download All\"</span>.</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">6</span>) Click <span class=\"keyword\">on</span> <span class=\"string\">\"Done.\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">7</span>) <span class=\"keyword\">Go</span> <span class=\"keyword\">in</span> Xcode, <span class=\"keyword\">build</span> <span class=\"keyword\">settings</span>, <span class=\"keyword\">select</span> it. <span class=\"keyword\">In</span> <span class=\"keyword\">General</span> tab, the issues should <span class=\"keyword\">get</span> removed.</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">8</span>) Restart the Xcode.</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">9</span>) <span class=\"keyword\">Do</span> the <span class=\"keyword\">Final</span> build.</div><div class=\"line\"></div><div class=\"line\">That<span class=\"string\">'s all.</span></div></pre></td></tr></table></figure></p>\n<p>我是翻译：</p>\n<p>打开Xcode的preference，选择你的账号，点击账号下边的view detail。。然后选择你们的开发证书 reset按钮，之后下载全部的描述文件，点击done按钮。重启和编译Xcode之后，这个问题应该没有了。</p>\n<p>————————————–邪恶的分割线———————————————-</p>\n<p>这是我对于这个问题的一些总结，希望可以帮到一些人，不懂的可以评论问我。</p>\n","excerpt":"","more":"<p>关于证书过期还有描述文件不匹配的问题见解：</p>\n<h2 id=\"u5E73_u65F6_u95EE_u9898_u4E0B_u5217_u6B65_u9AA4_u90FD_u80FD_u89E3_u51B3\"><a href=\"#u5E73_u65F6_u95EE_u9898_u4E0B_u5217_u6B65_u9AA4_u90FD_u80FD_u89E3_u51B3\" class=\"headerlink\" title=\"平时问题下列步骤都能解决\"></a>平时问题下列步骤都能解决</h2><p>大牛（ps英语好的）<a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Troubleshooting/Troubleshooting.html\">请去苹果开发文档中心</a><br>证书过期一般都是先去开发者中心重新创建证书，不过现在的证书过期之后直接被官方删除了，倒是省事了。创建证书不懂的可以自行百度。<br>删除配置文件【删除哪些？】那些有关过期证书的描述文件都删了<br>重新生成配置文件【ps怎么生成？ 去这里】<br>删除Xcode【我用的7.2】本地的描述文件【ps怎么删？去哪里删？】<br>去目录 <code>/Users/用户名/Library/MobileDevice/Provisioning Profiles</code>文件夹下边删除所有的描述文件<br>然后 下载刚才新生成的描述文件，然后双击下载好的描述文件装到电脑和资料库———————————看到这里如果还不行的话，看我放大招——————–</p>\n<h2 id=\"u5047_u5982_u4F60_u7528_u7684_u662FXcode_7-2_u7684_u8BDD\"><a href=\"#u5047_u5982_u4F60_u7528_u7684_u662FXcode_7-2_u7684_u8BDD\" class=\"headerlink\" title=\"假如你用的是Xcode 7.2的话\"></a>假如你用的是Xcode 7.2的话</h2><p>大牛<a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Troubleshooting/Troubleshooting.html\">是去这里</a><br>上面的步骤你测试了都不行，然后给你大招解决问题去app工程文件用编辑器打开搜索关键字<code>PROVISIONING_PROFILE</code>、<code>command</code> +<code>F</code> 搜搜有关这关键字的都删除了，然后重启Xcode，重新编译即可</p>\n<h2 id=\"u95EE_u9898_u8FD8_u6CA1_u89E3_u51B3_u600E_u4E48_u529E_uFF1F\"><a href=\"#u95EE_u9898_u8FD8_u6CA1_u89E3_u51B3_u600E_u4E48_u529E_uFF1F\" class=\"headerlink\" title=\"问题还没解决怎么办？\"></a>问题还没解决怎么办？</h2><p>看看国际友人怎么处理的<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">I've also the same problem, in Xcode 7.2</div><div class=\"line\"></div><div class=\"line\">It solved by followings steps: 1) Open Xcode preference, 2) <span class=\"keyword\">Select</span> the appropriate team, <span class=\"number\">3</span>) Click the <span class=\"string\">\"View Details..\"</span>. <span class=\"number\">4</span>) <span class=\"keyword\">In</span> <span class=\"keyword\">section</span> <span class=\"string\">\"Signing Identities\"</span>: click <span class=\"keyword\">on</span> <span class=\"string\">\"Reset\"</span> <span class=\"keyword\">for</span> <span class=\"keyword\">each</span> <span class=\"keyword\">of</span> them.</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">5</span>) <span class=\"keyword\">In</span> <span class=\"keyword\">section</span> <span class=\"string\">\"Provisioning Profiles\"</span>. Click <span class=\"keyword\">on</span> <span class=\"string\">\"Download All\"</span>.</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">6</span>) Click <span class=\"keyword\">on</span> <span class=\"string\">\"Done.\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">7</span>) <span class=\"keyword\">Go</span> <span class=\"keyword\">in</span> Xcode, <span class=\"keyword\">build</span> <span class=\"keyword\">settings</span>, <span class=\"keyword\">select</span> it. <span class=\"keyword\">In</span> <span class=\"keyword\">General</span> tab, the issues should <span class=\"keyword\">get</span> removed.</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">8</span>) Restart the Xcode.</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">9</span>) <span class=\"keyword\">Do</span> the <span class=\"keyword\">Final</span> build.</div><div class=\"line\"></div><div class=\"line\">That<span class=\"string\">'s all.</span></div></pre></td></tr></table></figure></p>\n<p>我是翻译：</p>\n<p>打开Xcode的preference，选择你的账号，点击账号下边的view detail。。然后选择你们的开发证书 reset按钮，之后下载全部的描述文件，点击done按钮。重启和编译Xcode之后，这个问题应该没有了。</p>\n<p>————————————–邪恶的分割线———————————————-</p>\n<p>这是我对于这个问题的一些总结，希望可以帮到一些人，不懂的可以评论问我。</p>\n"},{"title":"iOS高级开发runtime那点事实战（1）","date":"2016-03-24T02:36:14.000Z","_content":"\n## runtime 给类别添加属性浅析\n很多时候因为需求想着给一个类添加属性，就是给一个类添加成员变量了，这样子方便了用这个类的时候，有了自己添加的属性，做什么事都是 信手捏来了。\n## 源码\n```\n \n\n#import <Foundation/Foundation.h>\n#import <objc/runtime.h> //千万别忘记添加哦\n@interfaceNSObject(FY)\n@property(nonatomic,copy)NSString* name;//像平时一样的添加属性\n@end\n```\n下面是在.m中实现的\n```\nstaticvoid* FYKeyName = (void*)\"FYKeyName\";//声明这个变量要存储的key的名字\n@implementationNSObject(FY)\n- (void)setName:(NSString*)name{\nobjc_setAssociatedObject(self, FYKeyName, name, OBJC_ASSOCIATION_COPY);//把这个值存储起来类型是copy，值是name，存储的键值是\"FYKeyName\",存储到self的属性里面\n}\n- (NSString*)name{\nreturnobjc_getAssociatedObject(self, FYKeyName);//获取self的key为FYKeyName的值\n}\n@end\n```\n到此为止这个属性已经添加完成了。\n其实为毛添加属性啊，我们公司的按钮不能连续点击，是所有按钮。。。没错是all not some。我问Google大神了，搜到了消息是runtime解决问题，但是没找到如何解决。在我努力寻找。。。。一万字。。\n终于知道runtime是运行时，什么是运行时呢？就是我们写的OC代码会让runtime翻译并且执行，runtime是一套比较底层的纯C语言API, 属于1个C语言库, 包含了很多底层的C语言API。\n在我们平时编写的OC代码中, 程序运行过程时, 其实最终都是转成了runtime的C语言代码, runtime算是OC的幕后工作者。\n所以给类添加属性就派上用场了，我解决思路是这样子的，给按钮添加类别就是点击事件间隔，执行点击事件的时候判断一下是否时间到了，如果时间不到，那么拦截点击事件。\n怎么拦截点击事件呢？\n其实点击事件在runtime里面是obj发送消息，我们可以把要发送的消息的SEL 和自己写的SEL交换一下，然后在自己写的SEL里面判断是否执行点击事件。【有点绕】\n代码：\n```\n#import\n#import\n@interfaceUIControl(FY)\n@property(nonatomic,assign)NSTimeIntervalacceptEventInterval;\n@property(nonatomic)BOOLignoreEvent;\n@end\n@implementationUIControl(FYControl)\nstaticconstchar*UIControl_acceptEventInterval=\"UIControl_acceptEventInterval\";\nstaticconstchar*UIControl_ignoreEvent=\"UIControl_ignoreEvent\";\n@end\n@implementationUIControl(FY)\n- (void)setAcceptEventInterval:(NSTimeInterval)acceptEventInterval\n{\nobjc_setAssociatedObject(self,UIControl_acceptEventInterval, @(acceptEventInterval), OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n-(NSTimeInterval)acceptEventInterval {\nreturn[objc_getAssociatedObject(self,UIControl_acceptEventInterval) doubleValue];\n}\n-(void)setIgnoreEvent:(BOOL)ignoreEvent{\nobjc_setAssociatedObject(self,UIControl_ignoreEvent, @(ignoreEvent), OBJC_ASSOCIATION_ASSIGN);\n}\n-(BOOL)ignoreEvent{\nreturn[objc_getAssociatedObject(self,UIControl_ignoreEvent) boolValue];\n}\n+(void)load {\nMethod a = class_getInstanceMethod(self,@selector(sendAction:to:forEvent:));\nMethod b = class_getInstanceMethod(self,@selector(_sendAction:to:forEvent:));\nmethod_exchangeImplementations(a, b);//交换方法\n}\n- (void)_sendAction:(SEL)action to:(id)target forEvent:(UIEvent*)event\n{\nif(self.ignoreEvent)return;\nif(self.acceptEventInterval>0)\n{\nself.ignoreEvent=YES;\n[selfperformSelector:@selector(setIgnoreEventWithNo)  withObject:nilafterDelay:self.acceptEventInterval];\n}\n[self_sendAction:action to:target forEvent:event];\n}\n-(void)setIgnoreEventWithNo{\nself.ignoreEvent=NO;\n}\n@end\n```\n用的时候很好用的\n\n```\n-(void)click{\nbtn =[[UIButton alloc]initWithFrame:CGRectMake(100,100,100,40)];\n[btnsetTitle:@\"btn\"forState:UIControlStateNormal];\n[btnsetTitleColor:[UIColor redColor]forState:UIControlStateNormal];\nbtn.touchTimeValue =3;\n[self.viewaddSubview:btn];\n[btnaddTarget:selfaction:@selector(objcName)forControlEvents:UIControlEventTouchUpInside];\n}\n\n\n输出：2016-03-1713:14:20.365runTimeObj[9297:2669428] 测试\n2016-03-1713:14:23.717runTimeObj[9297:2669428] 测试\n2016-03-1713:14:26.876runTimeObj[9297:2669428] 测试\n```\n这个例子是利用了两个参数，一个参数Bool判断是否往下执行，一个时间用来修改Bool的值，最后就是执行方法b。有些同学纳闷，这执行方法b，不是执行自身方法吗？难道不是递归？其实不是，在load函数里面已经把a，b方法交换了。\n这样子就可以操作一些系统方法了。后续还会出runtime在项目中的实际应用。\n","source":"_posts/iOS高级开发runtime那点事实战（1）.md","raw":"title: iOS高级开发runtime那点事实战（1）\ndate: 2016-03-24 10:36:14\ntags:\n- iOS\n- iOS高级开发\ncategories: iOS\n---\n\n## runtime 给类别添加属性浅析\n很多时候因为需求想着给一个类添加属性，就是给一个类添加成员变量了，这样子方便了用这个类的时候，有了自己添加的属性，做什么事都是 信手捏来了。\n## 源码\n```\n \n\n#import <Foundation/Foundation.h>\n#import <objc/runtime.h> //千万别忘记添加哦\n@interfaceNSObject(FY)\n@property(nonatomic,copy)NSString* name;//像平时一样的添加属性\n@end\n```\n下面是在.m中实现的\n```\nstaticvoid* FYKeyName = (void*)\"FYKeyName\";//声明这个变量要存储的key的名字\n@implementationNSObject(FY)\n- (void)setName:(NSString*)name{\nobjc_setAssociatedObject(self, FYKeyName, name, OBJC_ASSOCIATION_COPY);//把这个值存储起来类型是copy，值是name，存储的键值是\"FYKeyName\",存储到self的属性里面\n}\n- (NSString*)name{\nreturnobjc_getAssociatedObject(self, FYKeyName);//获取self的key为FYKeyName的值\n}\n@end\n```\n到此为止这个属性已经添加完成了。\n其实为毛添加属性啊，我们公司的按钮不能连续点击，是所有按钮。。。没错是all not some。我问Google大神了，搜到了消息是runtime解决问题，但是没找到如何解决。在我努力寻找。。。。一万字。。\n终于知道runtime是运行时，什么是运行时呢？就是我们写的OC代码会让runtime翻译并且执行，runtime是一套比较底层的纯C语言API, 属于1个C语言库, 包含了很多底层的C语言API。\n在我们平时编写的OC代码中, 程序运行过程时, 其实最终都是转成了runtime的C语言代码, runtime算是OC的幕后工作者。\n所以给类添加属性就派上用场了，我解决思路是这样子的，给按钮添加类别就是点击事件间隔，执行点击事件的时候判断一下是否时间到了，如果时间不到，那么拦截点击事件。\n怎么拦截点击事件呢？\n其实点击事件在runtime里面是obj发送消息，我们可以把要发送的消息的SEL 和自己写的SEL交换一下，然后在自己写的SEL里面判断是否执行点击事件。【有点绕】\n代码：\n```\n#import\n#import\n@interfaceUIControl(FY)\n@property(nonatomic,assign)NSTimeIntervalacceptEventInterval;\n@property(nonatomic)BOOLignoreEvent;\n@end\n@implementationUIControl(FYControl)\nstaticconstchar*UIControl_acceptEventInterval=\"UIControl_acceptEventInterval\";\nstaticconstchar*UIControl_ignoreEvent=\"UIControl_ignoreEvent\";\n@end\n@implementationUIControl(FY)\n- (void)setAcceptEventInterval:(NSTimeInterval)acceptEventInterval\n{\nobjc_setAssociatedObject(self,UIControl_acceptEventInterval, @(acceptEventInterval), OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n-(NSTimeInterval)acceptEventInterval {\nreturn[objc_getAssociatedObject(self,UIControl_acceptEventInterval) doubleValue];\n}\n-(void)setIgnoreEvent:(BOOL)ignoreEvent{\nobjc_setAssociatedObject(self,UIControl_ignoreEvent, @(ignoreEvent), OBJC_ASSOCIATION_ASSIGN);\n}\n-(BOOL)ignoreEvent{\nreturn[objc_getAssociatedObject(self,UIControl_ignoreEvent) boolValue];\n}\n+(void)load {\nMethod a = class_getInstanceMethod(self,@selector(sendAction:to:forEvent:));\nMethod b = class_getInstanceMethod(self,@selector(_sendAction:to:forEvent:));\nmethod_exchangeImplementations(a, b);//交换方法\n}\n- (void)_sendAction:(SEL)action to:(id)target forEvent:(UIEvent*)event\n{\nif(self.ignoreEvent)return;\nif(self.acceptEventInterval>0)\n{\nself.ignoreEvent=YES;\n[selfperformSelector:@selector(setIgnoreEventWithNo)  withObject:nilafterDelay:self.acceptEventInterval];\n}\n[self_sendAction:action to:target forEvent:event];\n}\n-(void)setIgnoreEventWithNo{\nself.ignoreEvent=NO;\n}\n@end\n```\n用的时候很好用的\n\n```\n-(void)click{\nbtn =[[UIButton alloc]initWithFrame:CGRectMake(100,100,100,40)];\n[btnsetTitle:@\"btn\"forState:UIControlStateNormal];\n[btnsetTitleColor:[UIColor redColor]forState:UIControlStateNormal];\nbtn.touchTimeValue =3;\n[self.viewaddSubview:btn];\n[btnaddTarget:selfaction:@selector(objcName)forControlEvents:UIControlEventTouchUpInside];\n}\n\n\n输出：2016-03-1713:14:20.365runTimeObj[9297:2669428] 测试\n2016-03-1713:14:23.717runTimeObj[9297:2669428] 测试\n2016-03-1713:14:26.876runTimeObj[9297:2669428] 测试\n```\n这个例子是利用了两个参数，一个参数Bool判断是否往下执行，一个时间用来修改Bool的值，最后就是执行方法b。有些同学纳闷，这执行方法b，不是执行自身方法吗？难道不是递归？其实不是，在load函数里面已经把a，b方法交换了。\n这样子就可以操作一些系统方法了。后续还会出runtime在项目中的实际应用。\n","slug":"iOS高级开发runtime那点事实战（1）","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj4a000gnhmfvhkecqxz","content":"<h2 id=\"runtime__u7ED9_u7C7B_u522B_u6DFB_u52A0_u5C5E_u6027_u6D45_u6790\"><a href=\"#runtime__u7ED9_u7C7B_u522B_u6DFB_u52A0_u5C5E_u6027_u6D45_u6790\" class=\"headerlink\" title=\"runtime 给类别添加属性浅析\"></a>runtime 给类别添加属性浅析</h2><p>很多时候因为需求想着给一个类添加属性，就是给一个类添加成员变量了，这样子方便了用这个类的时候，有了自己添加的属性，做什么事都是 信手捏来了。</p>\n<h2 id=\"u6E90_u7801\"><a href=\"#u6E90_u7801\" class=\"headerlink\" title=\"源码\"></a>源码</h2><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\"><span class=\"objectivec\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span> //千万别忘记添加哦</span></div><div class=\"line\">@interfaceNSObject(FY)</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">copy</span>)<span class=\"built_in\">NSString</span>* name;<span class=\"comment\">//像平时一样的添加属性</span></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>下面是在.m中实现的<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">staticvoid* FYKeyName = (void*)<span class=\"string\">\"FYKeyName\"</span>;<span class=\"regexp\">//</span>声明这个变量要存储的key的名字</div><div class=\"line\"><span class=\"variable\">@implementationNSObject</span>(FY)</div><div class=\"line\">- (void)<span class=\"symbol\">setName:</span>(NSString*)name&#123;</div><div class=\"line\">objc_setAssociatedObject(<span class=\"keyword\">self</span>, FYKeyName, name, OBJC_ASSOCIATION_COPY);<span class=\"regexp\">//</span>把这个值存储起来类型是copy，值是name，存储的键值是<span class=\"string\">\"FYKeyName\"</span>,存储到<span class=\"keyword\">self</span>的属性里面</div><div class=\"line\">&#125;</div><div class=\"line\">- (NSString*)name&#123;</div><div class=\"line\">returnobjc_getAssociatedObject(<span class=\"keyword\">self</span>, FYKeyName);<span class=\"regexp\">//</span>获取<span class=\"keyword\">self</span>的key为FYKeyName的值</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">@end</span></div></pre></td></tr></table></figure></p>\n<p>到此为止这个属性已经添加完成了。<br>其实为毛添加属性啊，我们公司的按钮不能连续点击，是所有按钮。。。没错是all not some。我问Google大神了，搜到了消息是runtime解决问题，但是没找到如何解决。在我努力寻找。。。。一万字。。<br>终于知道runtime是运行时，什么是运行时呢？就是我们写的OC代码会让runtime翻译并且执行，runtime是一套比较底层的纯C语言API, 属于1个C语言库, 包含了很多底层的C语言API。<br>在我们平时编写的OC代码中, 程序运行过程时, 其实最终都是转成了runtime的C语言代码, runtime算是OC的幕后工作者。<br>所以给类添加属性就派上用场了，我解决思路是这样子的，给按钮添加类别就是点击事件间隔，执行点击事件的时候判断一下是否时间到了，如果时间不到，那么拦截点击事件。<br>怎么拦截点击事件呢？<br>其实点击事件在runtime里面是obj发送消息，我们可以把要发送的消息的SEL 和自己写的SEL交换一下，然后在自己写的SEL里面判断是否执行点击事件。【有点绕】<br>代码：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import</span></div><div class=\"line\"><span class=\"meta\">#import</span></div><div class=\"line\">@interfaceUIControl(FY)</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">assign</span>)<span class=\"built_in\">NSTimeIntervalacceptEventInterval</span>;</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>)BOOLignoreEvent;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">@implementationUIControl(FYControl)</div><div class=\"line\">staticconstchar*<span class=\"built_in\">UIControl_acceptEventInterval</span>=<span class=\"string\">\"UIControl_acceptEventInterval\"</span>;</div><div class=\"line\">staticconstchar*<span class=\"built_in\">UIControl_ignoreEvent</span>=<span class=\"string\">\"UIControl_ignoreEvent\"</span>;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">@implementationUIControl(FY)</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setAcceptEventInterval:(<span class=\"built_in\">NSTimeInterval</span>)acceptEventInterval</div><div class=\"line\">&#123;</div><div class=\"line\">objc_setAssociatedObject(<span class=\"keyword\">self</span>,<span class=\"built_in\">UIControl_acceptEventInterval</span>, @(acceptEventInterval), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"built_in\">NSTimeInterval</span>)acceptEventInterval &#123;</div><div class=\"line\"><span class=\"keyword\">return</span>[objc_getAssociatedObject(<span class=\"keyword\">self</span>,<span class=\"built_in\">UIControl_acceptEventInterval</span>) doubleValue];</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)setIgnoreEvent:(<span class=\"built_in\">BOOL</span>)ignoreEvent&#123;</div><div class=\"line\">objc_setAssociatedObject(<span class=\"keyword\">self</span>,<span class=\"built_in\">UIControl_ignoreEvent</span>, @(ignoreEvent), OBJC_ASSOCIATION_ASSIGN);</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"built_in\">BOOL</span>)ignoreEvent&#123;</div><div class=\"line\"><span class=\"keyword\">return</span>[objc_getAssociatedObject(<span class=\"keyword\">self</span>,<span class=\"built_in\">UIControl_ignoreEvent</span>) boolValue];</div><div class=\"line\">&#125;</div><div class=\"line\">+(<span class=\"keyword\">void</span>)load &#123;</div><div class=\"line\">Method a = class_getInstanceMethod(<span class=\"keyword\">self</span>,<span class=\"keyword\">@selector</span>(sendAction:to:forEvent:));</div><div class=\"line\">Method b = class_getInstanceMethod(<span class=\"keyword\">self</span>,<span class=\"keyword\">@selector</span>(_sendAction:to:forEvent:));</div><div class=\"line\">method_exchangeImplementations(a, b);<span class=\"comment\">//交换方法</span></div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)_sendAction:(SEL)action to:(<span class=\"keyword\">id</span>)target forEvent:(<span class=\"built_in\">UIEvent</span>*)event</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">self</span>.ignoreEvent)<span class=\"keyword\">return</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">self</span>.acceptEventInterval&gt;<span class=\"number\">0</span>)</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">self</span>.ignoreEvent=<span class=\"literal\">YES</span>;</div><div class=\"line\">[selfperformSelector:<span class=\"keyword\">@selector</span>(setIgnoreEventWithNo)  withObject:nilafterDelay:<span class=\"keyword\">self</span>.acceptEventInterval];</div><div class=\"line\">&#125;</div><div class=\"line\">[self_sendAction:action to:target forEvent:event];</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)setIgnoreEventWithNo&#123;</div><div class=\"line\"><span class=\"keyword\">self</span>.ignoreEvent=<span class=\"literal\">NO</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>用的时候很好用的</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)click&#123;</div><div class=\"line\">btn =[[UIButton alloc]<span class=\"string\">initWithFrame:</span>CGRectMake(<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">40</span>)];</div><div class=\"line\">[<span class=\"string\">btnsetTitle:</span>@<span class=\"string\">\"btn\"</span><span class=\"string\">forState:</span>UIControlStateNormal];</div><div class=\"line\">[<span class=\"string\">btnsetTitleColor:</span>[UIColor redColor]<span class=\"string\">forState:</span>UIControlStateNormal];</div><div class=\"line\">btn.touchTimeValue =<span class=\"number\">3</span>;</div><div class=\"line\">[self.<span class=\"string\">viewaddSubview:</span>btn];</div><div class=\"line\">[<span class=\"string\">btnaddTarget:</span><span class=\"string\">selfaction:</span><span class=\"meta\">@selector</span>(objcName)<span class=\"string\">forControlEvents:</span>UIControlEventTouchUpInside];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">输出：<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-1713</span>:<span class=\"number\">14</span>:<span class=\"number\">20.365</span>runTimeObj[<span class=\"number\">9297</span>:<span class=\"number\">2669428</span>] 测试</div><div class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-1713</span>:<span class=\"number\">14</span>:<span class=\"number\">23.717</span>runTimeObj[<span class=\"number\">9297</span>:<span class=\"number\">2669428</span>] 测试</div><div class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-1713</span>:<span class=\"number\">14</span>:<span class=\"number\">26.876</span>runTimeObj[<span class=\"number\">9297</span>:<span class=\"number\">2669428</span>] 测试</div></pre></td></tr></table></figure>\n<p>这个例子是利用了两个参数，一个参数Bool判断是否往下执行，一个时间用来修改Bool的值，最后就是执行方法b。有些同学纳闷，这执行方法b，不是执行自身方法吗？难道不是递归？其实不是，在load函数里面已经把a，b方法交换了。<br>这样子就可以操作一些系统方法了。后续还会出runtime在项目中的实际应用。</p>\n","excerpt":"","more":"<h2 id=\"runtime__u7ED9_u7C7B_u522B_u6DFB_u52A0_u5C5E_u6027_u6D45_u6790\"><a href=\"#runtime__u7ED9_u7C7B_u522B_u6DFB_u52A0_u5C5E_u6027_u6D45_u6790\" class=\"headerlink\" title=\"runtime 给类别添加属性浅析\"></a>runtime 给类别添加属性浅析</h2><p>很多时候因为需求想着给一个类添加属性，就是给一个类添加成员变量了，这样子方便了用这个类的时候，有了自己添加的属性，做什么事都是 信手捏来了。</p>\n<h2 id=\"u6E90_u7801\"><a href=\"#u6E90_u7801\" class=\"headerlink\" title=\"源码\"></a>源码</h2><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\"><span class=\"objectivec\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span> //千万别忘记添加哦</span></div><div class=\"line\">@interfaceNSObject(FY)</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">copy</span>)<span class=\"built_in\">NSString</span>* name;<span class=\"comment\">//像平时一样的添加属性</span></div><div class=\"line\"><span class=\"keyword\">@end</span></span></div></pre></td></tr></table></figure>\n<p>下面是在.m中实现的<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">staticvoid* FYKeyName = (void*)<span class=\"string\">\"FYKeyName\"</span>;<span class=\"regexp\">//</span>声明这个变量要存储的key的名字</div><div class=\"line\"><span class=\"variable\">@implementationNSObject</span>(FY)</div><div class=\"line\">- (void)<span class=\"symbol\">setName:</span>(NSString*)name&#123;</div><div class=\"line\">objc_setAssociatedObject(<span class=\"keyword\">self</span>, FYKeyName, name, OBJC_ASSOCIATION_COPY);<span class=\"regexp\">//</span>把这个值存储起来类型是copy，值是name，存储的键值是<span class=\"string\">\"FYKeyName\"</span>,存储到<span class=\"keyword\">self</span>的属性里面</div><div class=\"line\">&#125;</div><div class=\"line\">- (NSString*)name&#123;</div><div class=\"line\">returnobjc_getAssociatedObject(<span class=\"keyword\">self</span>, FYKeyName);<span class=\"regexp\">//</span>获取<span class=\"keyword\">self</span>的key为FYKeyName的值</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">@end</span></div></pre></td></tr></table></figure></p>\n<p>到此为止这个属性已经添加完成了。<br>其实为毛添加属性啊，我们公司的按钮不能连续点击，是所有按钮。。。没错是all not some。我问Google大神了，搜到了消息是runtime解决问题，但是没找到如何解决。在我努力寻找。。。。一万字。。<br>终于知道runtime是运行时，什么是运行时呢？就是我们写的OC代码会让runtime翻译并且执行，runtime是一套比较底层的纯C语言API, 属于1个C语言库, 包含了很多底层的C语言API。<br>在我们平时编写的OC代码中, 程序运行过程时, 其实最终都是转成了runtime的C语言代码, runtime算是OC的幕后工作者。<br>所以给类添加属性就派上用场了，我解决思路是这样子的，给按钮添加类别就是点击事件间隔，执行点击事件的时候判断一下是否时间到了，如果时间不到，那么拦截点击事件。<br>怎么拦截点击事件呢？<br>其实点击事件在runtime里面是obj发送消息，我们可以把要发送的消息的SEL 和自己写的SEL交换一下，然后在自己写的SEL里面判断是否执行点击事件。【有点绕】<br>代码：<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import</span></div><div class=\"line\"><span class=\"meta\">#import</span></div><div class=\"line\">@interfaceUIControl(FY)</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">assign</span>)<span class=\"built_in\">NSTimeIntervalacceptEventInterval</span>;</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>)BOOLignoreEvent;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">@implementationUIControl(FYControl)</div><div class=\"line\">staticconstchar*<span class=\"built_in\">UIControl_acceptEventInterval</span>=<span class=\"string\">\"UIControl_acceptEventInterval\"</span>;</div><div class=\"line\">staticconstchar*<span class=\"built_in\">UIControl_ignoreEvent</span>=<span class=\"string\">\"UIControl_ignoreEvent\"</span>;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">@implementationUIControl(FY)</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setAcceptEventInterval:(<span class=\"built_in\">NSTimeInterval</span>)acceptEventInterval</div><div class=\"line\">&#123;</div><div class=\"line\">objc_setAssociatedObject(<span class=\"keyword\">self</span>,<span class=\"built_in\">UIControl_acceptEventInterval</span>, @(acceptEventInterval), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"built_in\">NSTimeInterval</span>)acceptEventInterval &#123;</div><div class=\"line\"><span class=\"keyword\">return</span>[objc_getAssociatedObject(<span class=\"keyword\">self</span>,<span class=\"built_in\">UIControl_acceptEventInterval</span>) doubleValue];</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)setIgnoreEvent:(<span class=\"built_in\">BOOL</span>)ignoreEvent&#123;</div><div class=\"line\">objc_setAssociatedObject(<span class=\"keyword\">self</span>,<span class=\"built_in\">UIControl_ignoreEvent</span>, @(ignoreEvent), OBJC_ASSOCIATION_ASSIGN);</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"built_in\">BOOL</span>)ignoreEvent&#123;</div><div class=\"line\"><span class=\"keyword\">return</span>[objc_getAssociatedObject(<span class=\"keyword\">self</span>,<span class=\"built_in\">UIControl_ignoreEvent</span>) boolValue];</div><div class=\"line\">&#125;</div><div class=\"line\">+(<span class=\"keyword\">void</span>)load &#123;</div><div class=\"line\">Method a = class_getInstanceMethod(<span class=\"keyword\">self</span>,<span class=\"keyword\">@selector</span>(sendAction:to:forEvent:));</div><div class=\"line\">Method b = class_getInstanceMethod(<span class=\"keyword\">self</span>,<span class=\"keyword\">@selector</span>(_sendAction:to:forEvent:));</div><div class=\"line\">method_exchangeImplementations(a, b);<span class=\"comment\">//交换方法</span></div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)_sendAction:(SEL)action to:(<span class=\"keyword\">id</span>)target forEvent:(<span class=\"built_in\">UIEvent</span>*)event</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">self</span>.ignoreEvent)<span class=\"keyword\">return</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">self</span>.acceptEventInterval&gt;<span class=\"number\">0</span>)</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">self</span>.ignoreEvent=<span class=\"literal\">YES</span>;</div><div class=\"line\">[selfperformSelector:<span class=\"keyword\">@selector</span>(setIgnoreEventWithNo)  withObject:nilafterDelay:<span class=\"keyword\">self</span>.acceptEventInterval];</div><div class=\"line\">&#125;</div><div class=\"line\">[self_sendAction:action to:target forEvent:event];</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)setIgnoreEventWithNo&#123;</div><div class=\"line\"><span class=\"keyword\">self</span>.ignoreEvent=<span class=\"literal\">NO</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>用的时候很好用的</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)click&#123;</div><div class=\"line\">btn =[[UIButton alloc]<span class=\"string\">initWithFrame:</span>CGRectMake(<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">40</span>)];</div><div class=\"line\">[<span class=\"string\">btnsetTitle:</span>@<span class=\"string\">\"btn\"</span><span class=\"string\">forState:</span>UIControlStateNormal];</div><div class=\"line\">[<span class=\"string\">btnsetTitleColor:</span>[UIColor redColor]<span class=\"string\">forState:</span>UIControlStateNormal];</div><div class=\"line\">btn.touchTimeValue =<span class=\"number\">3</span>;</div><div class=\"line\">[self.<span class=\"string\">viewaddSubview:</span>btn];</div><div class=\"line\">[<span class=\"string\">btnaddTarget:</span><span class=\"string\">selfaction:</span><span class=\"meta\">@selector</span>(objcName)<span class=\"string\">forControlEvents:</span>UIControlEventTouchUpInside];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">输出：<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-1713</span>:<span class=\"number\">14</span>:<span class=\"number\">20.365</span>runTimeObj[<span class=\"number\">9297</span>:<span class=\"number\">2669428</span>] 测试</div><div class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-1713</span>:<span class=\"number\">14</span>:<span class=\"number\">23.717</span>runTimeObj[<span class=\"number\">9297</span>:<span class=\"number\">2669428</span>] 测试</div><div class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-1713</span>:<span class=\"number\">14</span>:<span class=\"number\">26.876</span>runTimeObj[<span class=\"number\">9297</span>:<span class=\"number\">2669428</span>] 测试</div></pre></td></tr></table></figure>\n<p>这个例子是利用了两个参数，一个参数Bool判断是否往下执行，一个时间用来修改Bool的值，最后就是执行方法b。有些同学纳闷，这执行方法b，不是执行自身方法吗？难道不是递归？其实不是，在load函数里面已经把a，b方法交换了。<br>这样子就可以操作一些系统方法了。后续还会出runtime在项目中的实际应用。</p>\n"},{"title":"iOS高级开发runtime那点事实战（2）","date":"2016-03-24T03:01:56.000Z","_content":"### 获取class的property属性List\n```\n-(void)printPropertyList{\n    unsigned int count ;//存储属性的数量的\n    objc_property_t * methodsVar = class_copyPropertyList([UINavigationController class], &count) ;\n    for (int i = 0; i < count; i ++) {\n        objc_property_t var = methodsVar[i] ;\n        NSString * strName =[NSString stringWithUTF8String:property_getName(var)];\n        NSString * str =[NSString stringWithUTF8String:property_getAttributes(var)];\n        NSLog(@\"属性 %@   名字  %@\",str,strName);\n    }\n    free(methodsVar);\n}\n```\n### 获取class的的名字\n```\n-(void)printfClassName{\n    Class clas = NSClassFromString(@\"NSString\");\n   printf(\"%s\", class_getName(clas)); //当clas为空的话 return value 是nil\n}\n\n输出：NSString\n```\n### 获取类的父类并输出\n```\n-(void)printfClassName:(Class )clas{\n   printf(\"%s\", class_getName(clas));\n}\n-(Class)getSuperClass:(Class)clas{\n    return class_getSuperclass(clas);\n}\n\n[self printfClassName:[self getSuperClass:NSClassFromString(@\"UIView\")]];\n输出：UIResponder\n```\n### 设置类的父类\n```\n/** \n * Sets the superclass of a given class.\n * \n * @param cls The class whose superclass you want to set.\n * @param newSuper The new superclass for cls.\n * \n * @return The old superclass for cls.\n * \n * @warning You should not use this function. 警告不要用\n */\nOBJC_EXPORT Class class_setSuperclass(Class cls, Class newSuper) \n     __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5,__MAC_10_5, __IPHONE_2_0,__IPHONE_2_0);\n     \n    [self printfClassName:[self getSuperClass:NSClassFromString(@\"FY\")]];第一次输出NSObjec\n    [self setClass:NSClassFromString(@\"FY\") newSuperClass:NSClassFromString(@\"UIImageView\")];//设置新的父类\n    [self printfClassName:[self getSuperClass:NSClassFromString(@\"FY\")]];//再次输出是UIImageView 说明设置新的父类是可用的\n    \n\n-(void)printfClassName:(Class )clas{\n   printf(\"%s\\n\", class_getName(clas));\n}\n-(Class)getSuperClass:(Class)clas{\n    return class_getSuperclass(clas);\n}\n-(Class)setClass:(Class)clas newSuperClass:(Class)superClas{\n   return   class_setSuperclass(clas, superClas);\n}\n\n```\n### 对象和类的区分\n```\n-(void)isMetaClass{\n    NSMutableArray *arr = [[NSMutableArray alloc] init];\n    \n    [arr addObject:[NSObject class]];\n    [arr addObject:[NSValue class]];\n    [arr addObject:[NSNumber class]];\n    [arr addObject:[NSPredicate class]];\n    [arr addObject:@\"not a class object\"];\n    \n    for (int i; i<[arr count]; i++) {\n        id obj = [arr objectAtIndex:i];\n        \n        if(class_isMetaClass(object_getClass(obj)))\n        {\n            //do sth\n            NSLog(@\"Class: %@\", obj);\n        }\n        else\n        {\n            NSLog(@\"Instance: %@\", obj);\n        }\n    }\n}\n输出：2016-03-18 15:46:56.235 runTimeObj[18396:2997316] Class: NSObject\n2016-03-18 15:46:56.236 runTimeObj[18396:2997316] Class: NSValue\n2016-03-18 15:46:56.236 runTimeObj[18396:2997316] Class: NSNumber\n2016-03-18 15:46:56.236 runTimeObj[18396:2997316] Class: NSPredicate\n2016-03-18 15:46:56.236 runTimeObj[18396:2997316] Instance: not a class object\n```\n### 获得类所占字节的大小\n```\nsize_t size = class_getInstanceSize(NSClassFromString(@\"UIView\"));\n    printf(\"%zu\",size);\n```\n### 获得类的属性及其属性的类型\n```\n-(void)ivarList{\n    unsigned int count;\n    Ivar * vars = class_copyIvarList(NSClassFromString(@\"UIViewController\"), &count)//ivar 是结构体 包含 name,offset,type三个可读属性的结构体。\n    ;\n    for (int i = 0; i < count; i ++) {\n        Ivar  var = vars[i];\n        [self printIvar:var];\n    }\n    free(vars);\n}\n-(void)printIvar:(Ivar)var{//输出结构体\n    const  char * name = ivar_getName(var);\n    long  offset = ivar_getOffset(var);\n    const  char * type = ivar_getTypeEncoding(var);\n    printf(\"%s %ld %s\\n\",name,offset,type);\n}\n输出：\n_storyboard 152 @\"UIStoryboard\"\n_externalObjectsTableForViewLoading 160 @\"NSDictionary\"\n_topLevelObjectsToKeepAliveFromStoryboard 168 @\"NSArray\"\n_savedHeaderSuperview 176 @\"UIView\"\n_savedFooterSuperview 184 @\"UIView\"\n\n```\n这些是apple [Objectice-C Runtime Reference](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/index.html#//apple_ref/c/func/objc_msgSend),具体的更多的在这个网址可见。\n\n上一篇说了一个方法 名字是`void method_exchangeImplementations(Method m1, Method m2)`\n因为这个交换方法只能执行一次，所以解决了交换两次，就相当于没有交换了。具体代码：\n```\nstatic dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n\n        void (^__method_swizzling)(Class, SEL, SEL) = ^(Class cls, SEL sel, SEL _sel) {\n            Method  method = class_getInstanceMethod(cls, sel);\n            Method _method = class_getInstanceMethod(cls, _sel);\n            method_exchangeImplementations(method, _method);\n        };\n      }\n``` \n在这里是把这个方法封装了一个c函数，保证了只会执行一次，最好把这个`dispatch`放在`+ load`函数里面，保证加载次数的减少。\n更多博客在www.fgyong.cn可见。\n","source":"_posts/iOS高级开发runtime那点事实战（2）.md","raw":"title: iOS高级开发runtime那点事实战（2）\ndate: 2016-03-24 11:01:56\ntags:\n- iOS\n- iOS高级开发\ncategories: iOS\n---\n### 获取class的property属性List\n```\n-(void)printPropertyList{\n    unsigned int count ;//存储属性的数量的\n    objc_property_t * methodsVar = class_copyPropertyList([UINavigationController class], &count) ;\n    for (int i = 0; i < count; i ++) {\n        objc_property_t var = methodsVar[i] ;\n        NSString * strName =[NSString stringWithUTF8String:property_getName(var)];\n        NSString * str =[NSString stringWithUTF8String:property_getAttributes(var)];\n        NSLog(@\"属性 %@   名字  %@\",str,strName);\n    }\n    free(methodsVar);\n}\n```\n### 获取class的的名字\n```\n-(void)printfClassName{\n    Class clas = NSClassFromString(@\"NSString\");\n   printf(\"%s\", class_getName(clas)); //当clas为空的话 return value 是nil\n}\n\n输出：NSString\n```\n### 获取类的父类并输出\n```\n-(void)printfClassName:(Class )clas{\n   printf(\"%s\", class_getName(clas));\n}\n-(Class)getSuperClass:(Class)clas{\n    return class_getSuperclass(clas);\n}\n\n[self printfClassName:[self getSuperClass:NSClassFromString(@\"UIView\")]];\n输出：UIResponder\n```\n### 设置类的父类\n```\n/** \n * Sets the superclass of a given class.\n * \n * @param cls The class whose superclass you want to set.\n * @param newSuper The new superclass for cls.\n * \n * @return The old superclass for cls.\n * \n * @warning You should not use this function. 警告不要用\n */\nOBJC_EXPORT Class class_setSuperclass(Class cls, Class newSuper) \n     __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5,__MAC_10_5, __IPHONE_2_0,__IPHONE_2_0);\n     \n    [self printfClassName:[self getSuperClass:NSClassFromString(@\"FY\")]];第一次输出NSObjec\n    [self setClass:NSClassFromString(@\"FY\") newSuperClass:NSClassFromString(@\"UIImageView\")];//设置新的父类\n    [self printfClassName:[self getSuperClass:NSClassFromString(@\"FY\")]];//再次输出是UIImageView 说明设置新的父类是可用的\n    \n\n-(void)printfClassName:(Class )clas{\n   printf(\"%s\\n\", class_getName(clas));\n}\n-(Class)getSuperClass:(Class)clas{\n    return class_getSuperclass(clas);\n}\n-(Class)setClass:(Class)clas newSuperClass:(Class)superClas{\n   return   class_setSuperclass(clas, superClas);\n}\n\n```\n### 对象和类的区分\n```\n-(void)isMetaClass{\n    NSMutableArray *arr = [[NSMutableArray alloc] init];\n    \n    [arr addObject:[NSObject class]];\n    [arr addObject:[NSValue class]];\n    [arr addObject:[NSNumber class]];\n    [arr addObject:[NSPredicate class]];\n    [arr addObject:@\"not a class object\"];\n    \n    for (int i; i<[arr count]; i++) {\n        id obj = [arr objectAtIndex:i];\n        \n        if(class_isMetaClass(object_getClass(obj)))\n        {\n            //do sth\n            NSLog(@\"Class: %@\", obj);\n        }\n        else\n        {\n            NSLog(@\"Instance: %@\", obj);\n        }\n    }\n}\n输出：2016-03-18 15:46:56.235 runTimeObj[18396:2997316] Class: NSObject\n2016-03-18 15:46:56.236 runTimeObj[18396:2997316] Class: NSValue\n2016-03-18 15:46:56.236 runTimeObj[18396:2997316] Class: NSNumber\n2016-03-18 15:46:56.236 runTimeObj[18396:2997316] Class: NSPredicate\n2016-03-18 15:46:56.236 runTimeObj[18396:2997316] Instance: not a class object\n```\n### 获得类所占字节的大小\n```\nsize_t size = class_getInstanceSize(NSClassFromString(@\"UIView\"));\n    printf(\"%zu\",size);\n```\n### 获得类的属性及其属性的类型\n```\n-(void)ivarList{\n    unsigned int count;\n    Ivar * vars = class_copyIvarList(NSClassFromString(@\"UIViewController\"), &count)//ivar 是结构体 包含 name,offset,type三个可读属性的结构体。\n    ;\n    for (int i = 0; i < count; i ++) {\n        Ivar  var = vars[i];\n        [self printIvar:var];\n    }\n    free(vars);\n}\n-(void)printIvar:(Ivar)var{//输出结构体\n    const  char * name = ivar_getName(var);\n    long  offset = ivar_getOffset(var);\n    const  char * type = ivar_getTypeEncoding(var);\n    printf(\"%s %ld %s\\n\",name,offset,type);\n}\n输出：\n_storyboard 152 @\"UIStoryboard\"\n_externalObjectsTableForViewLoading 160 @\"NSDictionary\"\n_topLevelObjectsToKeepAliveFromStoryboard 168 @\"NSArray\"\n_savedHeaderSuperview 176 @\"UIView\"\n_savedFooterSuperview 184 @\"UIView\"\n\n```\n这些是apple [Objectice-C Runtime Reference](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/index.html#//apple_ref/c/func/objc_msgSend),具体的更多的在这个网址可见。\n\n上一篇说了一个方法 名字是`void method_exchangeImplementations(Method m1, Method m2)`\n因为这个交换方法只能执行一次，所以解决了交换两次，就相当于没有交换了。具体代码：\n```\nstatic dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n\n        void (^__method_swizzling)(Class, SEL, SEL) = ^(Class cls, SEL sel, SEL _sel) {\n            Method  method = class_getInstanceMethod(cls, sel);\n            Method _method = class_getInstanceMethod(cls, _sel);\n            method_exchangeImplementations(method, _method);\n        };\n      }\n``` \n在这里是把这个方法封装了一个c函数，保证了只会执行一次，最好把这个`dispatch`放在`+ load`函数里面，保证加载次数的减少。\n更多博客在www.fgyong.cn可见。\n","slug":"iOS高级开发runtime那点事实战（2）","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj4b000hnhmfuuijichy","content":"<h3 id=\"u83B7_u53D6class_u7684property_u5C5E_u6027List\"><a href=\"#u83B7_u53D6class_u7684property_u5C5E_u6027List\" class=\"headerlink\" title=\"获取class的property属性List\"></a>获取class的property属性List</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)printPropertyList&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> count ;<span class=\"comment\">//存储属性的数量的</span></div><div class=\"line\">    objc_property_t * methodsVar = class_copyPropertyList([<span class=\"built_in\">UINavigationController</span> <span class=\"keyword\">class</span>], &amp;count) ;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i ++) &#123;</div><div class=\"line\">        objc_property_t var = methodsVar[i] ;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> * strName =[<span class=\"built_in\">NSString</span> stringWithUTF8String:property_getName(var)];</div><div class=\"line\">        <span class=\"built_in\">NSString</span> * str =[<span class=\"built_in\">NSString</span> stringWithUTF8String:property_getAttributes(var)];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"属性 %@   名字  %@\"</span>,str,strName);</div><div class=\"line\">    &#125;</div><div class=\"line\">    free(methodsVar);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"u83B7_u53D6class_u7684_u7684_u540D_u5B57\"><a href=\"#u83B7_u53D6class_u7684_u7684_u540D_u5B57\" class=\"headerlink\" title=\"获取class的的名字\"></a>获取class的的名字</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)printfClassName&#123;</div><div class=\"line\">    Class clas = <span class=\"built_in\">NSClassFromString</span>(<span class=\"string\">@\"NSString\"</span>);</div><div class=\"line\">   printf(<span class=\"string\">\"%s\"</span>, class_getName(clas)); <span class=\"comment\">//当clas为空的话 return value 是nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">输出：<span class=\"built_in\">NSString</span></div></pre></td></tr></table></figure>\n<h3 id=\"u83B7_u53D6_u7C7B_u7684_u7236_u7C7B_u5E76_u8F93_u51FA\"><a href=\"#u83B7_u53D6_u7C7B_u7684_u7236_u7C7B_u5E76_u8F93_u51FA\" class=\"headerlink\" title=\"获取类的父类并输出\"></a>获取类的父类并输出</h3><figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">-<span class=\"params\">(void)</span>printfClassName:<span class=\"params\">(Class )</span>clas&#123;</div><div class=\"line\">   printf<span class=\"params\">(<span class=\"string\">\"%s\"</span>, class_getName(clas))</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">-<span class=\"params\">(Class)</span>getSuperClass:<span class=\"params\">(Class)</span>clas&#123;</div><div class=\"line\">    return class_getSuperclass<span class=\"params\">(clas)</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">[self printfClassName:[self getSuperClass:NSClassFromString<span class=\"params\">(@<span class=\"string\">\"UIView\"</span>)</span>]];</div><div class=\"line\">输出：UIResponder</div></pre></td></tr></table></figure>\n<h3 id=\"u8BBE_u7F6E_u7C7B_u7684_u7236_u7C7B\"><a href=\"#u8BBE_u7F6E_u7C7B_u7684_u7236_u7C7B\" class=\"headerlink\" title=\"设置类的父类\"></a>设置类的父类</h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** </span></div><div class=\"line\"> * Sets the superclass of a given class.</div><div class=\"line\"> * </div><div class=\"line\"> * <span class=\"doctag\">@param</span> cls The class whose superclass you want to set.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> newSuper The new superclass for cls.</div><div class=\"line\"> * </div><div class=\"line\"> * <span class=\"doctag\">@return</span> The old superclass for cls.</div><div class=\"line\"> * </div><div class=\"line\"> * <span class=\"doctag\">@warning</span> You should not use this function. 警告不要用</div><div class=\"line\"> */</div><div class=\"line\">OBJC_EXPORT Class class_setSuperclass(Class cls, Class newSuper) </div><div class=\"line\">     __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5,__MAC_10_5, __IPHONE_2_0,__IPHONE_2_0);</div><div class=\"line\">     </div><div class=\"line\">    [self <span class=\"string\">printfClassName:</span>[self <span class=\"string\">getSuperClass:</span>NSClassFromString(@<span class=\"string\">\"FY\"</span>)]];第一次输出NSObjec</div><div class=\"line\">    [self <span class=\"string\">setClass:</span>NSClassFromString(@<span class=\"string\">\"FY\"</span>) <span class=\"string\">newSuperClass:</span>NSClassFromString(@<span class=\"string\">\"UIImageView\"</span>)];<span class=\"comment\">//设置新的父类</span></div><div class=\"line\">    [self <span class=\"string\">printfClassName:</span>[self <span class=\"string\">getSuperClass:</span>NSClassFromString(@<span class=\"string\">\"FY\"</span>)]];<span class=\"comment\">//再次输出是UIImageView 说明设置新的父类是可用的</span></div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)<span class=\"string\">printfClassName:</span>(Class )clas&#123;</div><div class=\"line\">   printf(<span class=\"string\">\"%s\\n\"</span>, class_getName(clas));</div><div class=\"line\">&#125;</div><div class=\"line\">-(Class)<span class=\"string\">getSuperClass:</span>(Class)clas&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> class_getSuperclass(clas);</div><div class=\"line\">&#125;</div><div class=\"line\">-(Class)<span class=\"string\">setClass:</span>(Class)clas <span class=\"string\">newSuperClass:</span>(Class)superClas&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span>   class_setSuperclass(clas, superClas);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"u5BF9_u8C61_u548C_u7C7B_u7684_u533A_u5206\"><a href=\"#u5BF9_u8C61_u548C_u7C7B_u7684_u533A_u5206\" class=\"headerlink\" title=\"对象和类的区分\"></a>对象和类的区分</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)isMetaClass&#123;</div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *arr = [[<span class=\"built_in\">NSMutableArray</span> alloc] init];</div><div class=\"line\">    </div><div class=\"line\">    [arr addObject:[<span class=\"built_in\">NSObject</span> <span class=\"keyword\">class</span>]];</div><div class=\"line\">    [arr addObject:[<span class=\"built_in\">NSValue</span> <span class=\"keyword\">class</span>]];</div><div class=\"line\">    [arr addObject:[<span class=\"built_in\">NSNumber</span> <span class=\"keyword\">class</span>]];</div><div class=\"line\">    [arr addObject:[<span class=\"built_in\">NSPredicate</span> <span class=\"keyword\">class</span>]];</div><div class=\"line\">    [arr addObject:<span class=\"string\">@\"not a class object\"</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i; i&lt;[arr count]; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">id</span> obj = [arr objectAtIndex:i];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span>(class_isMetaClass(object_getClass(obj)))</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">//do sth</span></div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Class: %@\"</span>, obj);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Instance: %@\"</span>, obj);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">输出：<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-18</span> <span class=\"number\">15</span>:<span class=\"number\">46</span>:<span class=\"number\">56.235</span> runTimeObj[<span class=\"number\">18396</span>:<span class=\"number\">2997316</span>] Class: <span class=\"built_in\">NSObject</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-18</span> <span class=\"number\">15</span>:<span class=\"number\">46</span>:<span class=\"number\">56.236</span> runTimeObj[<span class=\"number\">18396</span>:<span class=\"number\">2997316</span>] Class: <span class=\"built_in\">NSValue</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-18</span> <span class=\"number\">15</span>:<span class=\"number\">46</span>:<span class=\"number\">56.236</span> runTimeObj[<span class=\"number\">18396</span>:<span class=\"number\">2997316</span>] Class: <span class=\"built_in\">NSNumber</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-18</span> <span class=\"number\">15</span>:<span class=\"number\">46</span>:<span class=\"number\">56.236</span> runTimeObj[<span class=\"number\">18396</span>:<span class=\"number\">2997316</span>] Class: <span class=\"built_in\">NSPredicate</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-18</span> <span class=\"number\">15</span>:<span class=\"number\">46</span>:<span class=\"number\">56.236</span> runTimeObj[<span class=\"number\">18396</span>:<span class=\"number\">2997316</span>] Instance: not a <span class=\"keyword\">class</span> object</div></pre></td></tr></table></figure>\n<h3 id=\"u83B7_u5F97_u7C7B_u6240_u5360_u5B57_u8282_u7684_u5927_u5C0F\"><a href=\"#u83B7_u5F97_u7C7B_u6240_u5360_u5B57_u8282_u7684_u5927_u5C0F\" class=\"headerlink\" title=\"获得类所占字节的大小\"></a>获得类所占字节的大小</h3><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">size_t size = class_getInstanceSize(<span class=\"name\">NSClassFromString</span>(@<span class=\"string\">\"UIView\"</span>))<span class=\"comment\">;</span></div><div class=\"line\">    printf(<span class=\"string\">\"%zu\"</span>,size)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<h3 id=\"u83B7_u5F97_u7C7B_u7684_u5C5E_u6027_u53CA_u5176_u5C5E_u6027_u7684_u7C7B_u578B\"><a href=\"#u83B7_u5F97_u7C7B_u7684_u5C5E_u6027_u53CA_u5176_u5C5E_u6027_u7684_u7C7B_u578B\" class=\"headerlink\" title=\"获得类的属性及其属性的类型\"></a>获得类的属性及其属性的类型</h3><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)ivarList&#123;</div><div class=\"line\">    unsigned <span class=\"keyword\">int</span> count;</div><div class=\"line\">    Ivar * vars = class_copyIvarList(NSClassFromString(<span class=\"string\">@\"UIViewController\"</span>), &amp;count)<span class=\"comment\">//ivar 是结构体 包含 name,offset,type三个可读属性的结构体。</span></div><div class=\"line\">    ;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i ++) &#123;</div><div class=\"line\">        Ivar  <span class=\"keyword\">var</span> = vars[i];</div><div class=\"line\">        [self printIvar:<span class=\"keyword\">var</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    free(vars);</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)printIvar:(Ivar)<span class=\"keyword\">var</span>&#123;<span class=\"comment\">//输出结构体</span></div><div class=\"line\">    <span class=\"keyword\">const</span>  <span class=\"keyword\">char</span> * name = ivar_getName(<span class=\"keyword\">var</span>);</div><div class=\"line\">    <span class=\"keyword\">long</span>  offset = ivar_getOffset(<span class=\"keyword\">var</span>);</div><div class=\"line\">    <span class=\"keyword\">const</span>  <span class=\"keyword\">char</span> * type = ivar_getTypeEncoding(<span class=\"keyword\">var</span>);</div><div class=\"line\">    printf(<span class=\"string\">\"%s %ld %s\\n\"</span>,name,offset,type);</div><div class=\"line\">&#125;</div><div class=\"line\">输出：</div><div class=\"line\">_storyboard <span class=\"number\">152</span> <span class=\"string\">@\"UIStoryboard\"</span></div><div class=\"line\">_externalObjectsTableForViewLoading <span class=\"number\">160</span> <span class=\"string\">@\"NSDictionary\"</span></div><div class=\"line\">_topLevelObjectsToKeepAliveFromStoryboard <span class=\"number\">168</span> <span class=\"string\">@\"NSArray\"</span></div><div class=\"line\">_savedHeaderSuperview <span class=\"number\">176</span> <span class=\"string\">@\"UIView\"</span></div><div class=\"line\">_savedFooterSuperview <span class=\"number\">184</span> <span class=\"string\">@\"UIView\"</span></div></pre></td></tr></table></figure>\n<p>这些是apple <a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/index.html#//apple_ref/c/func/objc_msgSend\" target=\"_blank\" rel=\"external\">Objectice-C Runtime Reference</a>,具体的更多的在这个网址可见。</p>\n<p>上一篇说了一个方法 名字是<code>void method_exchangeImplementations(Method m1, Method m2)</code><br>因为这个交换方法只能执行一次，所以解决了交换两次，就相当于没有交换了。具体代码：</p>\n<pre><code>static dispatch_once_t onceToken;\n    dispatch_once(&amp;onceToken, ^{\n\n        void (^__method_swizzling)(Class, SEL, SEL) = ^(Class cls, SEL sel, SEL _sel) {\n            Method  method = class_getInstanceMethod(cls, sel);\n            Method _method = class_getInstanceMethod(cls, _sel);\n            method_exchangeImplementations(method, _method);\n        };\n      }\n</code></pre><p>在这里是把这个方法封装了一个c函数，保证了只会执行一次，最好把这个<code>dispatch</code>放在<code>+ load</code>函数里面，保证加载次数的减少。<br>更多博客在www.fgyong.cn可见。</p>\n","excerpt":"","more":"<h3 id=\"u83B7_u53D6class_u7684property_u5C5E_u6027List\"><a href=\"#u83B7_u53D6class_u7684property_u5C5E_u6027List\" class=\"headerlink\" title=\"获取class的property属性List\"></a>获取class的property属性List</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)printPropertyList&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> count ;<span class=\"comment\">//存储属性的数量的</span></div><div class=\"line\">    objc_property_t * methodsVar = class_copyPropertyList([<span class=\"built_in\">UINavigationController</span> <span class=\"keyword\">class</span>], &amp;count) ;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i ++) &#123;</div><div class=\"line\">        objc_property_t var = methodsVar[i] ;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> * strName =[<span class=\"built_in\">NSString</span> stringWithUTF8String:property_getName(var)];</div><div class=\"line\">        <span class=\"built_in\">NSString</span> * str =[<span class=\"built_in\">NSString</span> stringWithUTF8String:property_getAttributes(var)];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"属性 %@   名字  %@\"</span>,str,strName);</div><div class=\"line\">    &#125;</div><div class=\"line\">    free(methodsVar);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"u83B7_u53D6class_u7684_u7684_u540D_u5B57\"><a href=\"#u83B7_u53D6class_u7684_u7684_u540D_u5B57\" class=\"headerlink\" title=\"获取class的的名字\"></a>获取class的的名字</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)printfClassName&#123;</div><div class=\"line\">    Class clas = <span class=\"built_in\">NSClassFromString</span>(<span class=\"string\">@\"NSString\"</span>);</div><div class=\"line\">   printf(<span class=\"string\">\"%s\"</span>, class_getName(clas)); <span class=\"comment\">//当clas为空的话 return value 是nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">输出：<span class=\"built_in\">NSString</span></div></pre></td></tr></table></figure>\n<h3 id=\"u83B7_u53D6_u7C7B_u7684_u7236_u7C7B_u5E76_u8F93_u51FA\"><a href=\"#u83B7_u53D6_u7C7B_u7684_u7236_u7C7B_u5E76_u8F93_u51FA\" class=\"headerlink\" title=\"获取类的父类并输出\"></a>获取类的父类并输出</h3><figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">-<span class=\"params\">(void)</span>printfClassName:<span class=\"params\">(Class )</span>clas&#123;</div><div class=\"line\">   printf<span class=\"params\">(<span class=\"string\">\"%s\"</span>, class_getName(clas))</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">-<span class=\"params\">(Class)</span>getSuperClass:<span class=\"params\">(Class)</span>clas&#123;</div><div class=\"line\">    return class_getSuperclass<span class=\"params\">(clas)</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">[self printfClassName:[self getSuperClass:NSClassFromString<span class=\"params\">(@<span class=\"string\">\"UIView\"</span>)</span>]];</div><div class=\"line\">输出：UIResponder</div></pre></td></tr></table></figure>\n<h3 id=\"u8BBE_u7F6E_u7C7B_u7684_u7236_u7C7B\"><a href=\"#u8BBE_u7F6E_u7C7B_u7684_u7236_u7C7B\" class=\"headerlink\" title=\"设置类的父类\"></a>设置类的父类</h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** </div><div class=\"line\"> * Sets the superclass of a given class.</div><div class=\"line\"> * </div><div class=\"line\"> * <span class=\"doctag\">@param</span> cls The class whose superclass you want to set.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> newSuper The new superclass for cls.</div><div class=\"line\"> * </div><div class=\"line\"> * <span class=\"doctag\">@return</span> The old superclass for cls.</div><div class=\"line\"> * </div><div class=\"line\"> * <span class=\"doctag\">@warning</span> You should not use this function. 警告不要用</div><div class=\"line\"> */</span></div><div class=\"line\">OBJC_EXPORT Class class_setSuperclass(Class cls, Class newSuper) </div><div class=\"line\">     __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5,__MAC_10_5, __IPHONE_2_0,__IPHONE_2_0);</div><div class=\"line\">     </div><div class=\"line\">    [self <span class=\"string\">printfClassName:</span>[self <span class=\"string\">getSuperClass:</span>NSClassFromString(@<span class=\"string\">\"FY\"</span>)]];第一次输出NSObjec</div><div class=\"line\">    [self <span class=\"string\">setClass:</span>NSClassFromString(@<span class=\"string\">\"FY\"</span>) <span class=\"string\">newSuperClass:</span>NSClassFromString(@<span class=\"string\">\"UIImageView\"</span>)];<span class=\"comment\">//设置新的父类</span></div><div class=\"line\">    [self <span class=\"string\">printfClassName:</span>[self <span class=\"string\">getSuperClass:</span>NSClassFromString(@<span class=\"string\">\"FY\"</span>)]];<span class=\"comment\">//再次输出是UIImageView 说明设置新的父类是可用的</span></div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)<span class=\"string\">printfClassName:</span>(Class )clas&#123;</div><div class=\"line\">   printf(<span class=\"string\">\"%s\\n\"</span>, class_getName(clas));</div><div class=\"line\">&#125;</div><div class=\"line\">-(Class)<span class=\"string\">getSuperClass:</span>(Class)clas&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> class_getSuperclass(clas);</div><div class=\"line\">&#125;</div><div class=\"line\">-(Class)<span class=\"string\">setClass:</span>(Class)clas <span class=\"string\">newSuperClass:</span>(Class)superClas&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span>   class_setSuperclass(clas, superClas);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"u5BF9_u8C61_u548C_u7C7B_u7684_u533A_u5206\"><a href=\"#u5BF9_u8C61_u548C_u7C7B_u7684_u533A_u5206\" class=\"headerlink\" title=\"对象和类的区分\"></a>对象和类的区分</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)isMetaClass&#123;</div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *arr = [[<span class=\"built_in\">NSMutableArray</span> alloc] init];</div><div class=\"line\">    </div><div class=\"line\">    [arr addObject:[<span class=\"built_in\">NSObject</span> <span class=\"keyword\">class</span>]];</div><div class=\"line\">    [arr addObject:[<span class=\"built_in\">NSValue</span> <span class=\"keyword\">class</span>]];</div><div class=\"line\">    [arr addObject:[<span class=\"built_in\">NSNumber</span> <span class=\"keyword\">class</span>]];</div><div class=\"line\">    [arr addObject:[<span class=\"built_in\">NSPredicate</span> <span class=\"keyword\">class</span>]];</div><div class=\"line\">    [arr addObject:<span class=\"string\">@\"not a class object\"</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i; i&lt;[arr count]; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">id</span> obj = [arr objectAtIndex:i];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span>(class_isMetaClass(object_getClass(obj)))</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">//do sth</span></div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Class: %@\"</span>, obj);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Instance: %@\"</span>, obj);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">输出：<span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-18</span> <span class=\"number\">15</span>:<span class=\"number\">46</span>:<span class=\"number\">56.235</span> runTimeObj[<span class=\"number\">18396</span>:<span class=\"number\">2997316</span>] Class: <span class=\"built_in\">NSObject</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-18</span> <span class=\"number\">15</span>:<span class=\"number\">46</span>:<span class=\"number\">56.236</span> runTimeObj[<span class=\"number\">18396</span>:<span class=\"number\">2997316</span>] Class: <span class=\"built_in\">NSValue</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-18</span> <span class=\"number\">15</span>:<span class=\"number\">46</span>:<span class=\"number\">56.236</span> runTimeObj[<span class=\"number\">18396</span>:<span class=\"number\">2997316</span>] Class: <span class=\"built_in\">NSNumber</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-18</span> <span class=\"number\">15</span>:<span class=\"number\">46</span>:<span class=\"number\">56.236</span> runTimeObj[<span class=\"number\">18396</span>:<span class=\"number\">2997316</span>] Class: <span class=\"built_in\">NSPredicate</span></div><div class=\"line\"><span class=\"number\">2016</span><span class=\"number\">-03</span><span class=\"number\">-18</span> <span class=\"number\">15</span>:<span class=\"number\">46</span>:<span class=\"number\">56.236</span> runTimeObj[<span class=\"number\">18396</span>:<span class=\"number\">2997316</span>] Instance: not a <span class=\"keyword\">class</span> object</div></pre></td></tr></table></figure>\n<h3 id=\"u83B7_u5F97_u7C7B_u6240_u5360_u5B57_u8282_u7684_u5927_u5C0F\"><a href=\"#u83B7_u5F97_u7C7B_u6240_u5360_u5B57_u8282_u7684_u5927_u5C0F\" class=\"headerlink\" title=\"获得类所占字节的大小\"></a>获得类所占字节的大小</h3><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">size_t size = class_getInstanceSize(<span class=\"name\">NSClassFromString</span>(@<span class=\"string\">\"UIView\"</span>))<span class=\"comment\">;</span></div><div class=\"line\">    printf(<span class=\"string\">\"%zu\"</span>,size)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<h3 id=\"u83B7_u5F97_u7C7B_u7684_u5C5E_u6027_u53CA_u5176_u5C5E_u6027_u7684_u7C7B_u578B\"><a href=\"#u83B7_u5F97_u7C7B_u7684_u5C5E_u6027_u53CA_u5176_u5C5E_u6027_u7684_u7C7B_u578B\" class=\"headerlink\" title=\"获得类的属性及其属性的类型\"></a>获得类的属性及其属性的类型</h3><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)ivarList&#123;</div><div class=\"line\">    unsigned <span class=\"keyword\">int</span> count;</div><div class=\"line\">    Ivar * vars = class_copyIvarList(NSClassFromString(<span class=\"string\">@\"UIViewController\"</span>), &amp;count)<span class=\"comment\">//ivar 是结构体 包含 name,offset,type三个可读属性的结构体。</span></div><div class=\"line\">    ;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i ++) &#123;</div><div class=\"line\">        Ivar  <span class=\"keyword\">var</span> = vars[i];</div><div class=\"line\">        [self printIvar:<span class=\"keyword\">var</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    free(vars);</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)printIvar:(Ivar)<span class=\"keyword\">var</span>&#123;<span class=\"comment\">//输出结构体</span></div><div class=\"line\">    <span class=\"keyword\">const</span>  <span class=\"keyword\">char</span> * name = ivar_getName(<span class=\"keyword\">var</span>);</div><div class=\"line\">    <span class=\"keyword\">long</span>  offset = ivar_getOffset(<span class=\"keyword\">var</span>);</div><div class=\"line\">    <span class=\"keyword\">const</span>  <span class=\"keyword\">char</span> * type = ivar_getTypeEncoding(<span class=\"keyword\">var</span>);</div><div class=\"line\">    printf(<span class=\"string\">\"%s %ld %s\\n\"</span>,name,offset,type);</div><div class=\"line\">&#125;</div><div class=\"line\">输出：</div><div class=\"line\">_storyboard <span class=\"number\">152</span> <span class=\"string\">@\"UIStoryboard\"</span></div><div class=\"line\">_externalObjectsTableForViewLoading <span class=\"number\">160</span> <span class=\"string\">@\"NSDictionary\"</span></div><div class=\"line\">_topLevelObjectsToKeepAliveFromStoryboard <span class=\"number\">168</span> <span class=\"string\">@\"NSArray\"</span></div><div class=\"line\">_savedHeaderSuperview <span class=\"number\">176</span> <span class=\"string\">@\"UIView\"</span></div><div class=\"line\">_savedFooterSuperview <span class=\"number\">184</span> <span class=\"string\">@\"UIView\"</span></div></pre></td></tr></table></figure>\n<p>这些是apple <a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/index.html#//apple_ref/c/func/objc_msgSend\">Objectice-C Runtime Reference</a>,具体的更多的在这个网址可见。</p>\n<p>上一篇说了一个方法 名字是<code>void method_exchangeImplementations(Method m1, Method m2)</code><br>因为这个交换方法只能执行一次，所以解决了交换两次，就相当于没有交换了。具体代码：</p>\n<pre><code>static dispatch_once_t onceToken;\n    dispatch_once(&amp;onceToken, ^{\n\n        void (^__method_swizzling)(Class, SEL, SEL) = ^(Class cls, SEL sel, SEL _sel) {\n            Method  method = class_getInstanceMethod(cls, sel);\n            Method _method = class_getInstanceMethod(cls, _sel);\n            method_exchangeImplementations(method, _method);\n        };\n      }\n</code></pre><p>在这里是把这个方法封装了一个c函数，保证了只会执行一次，最好把这个<code>dispatch</code>放在<code>+ load</code>函数里面，保证加载次数的减少。<br>更多博客在www.fgyong.cn可见。</p>\n"},{"title":"iOS高级开发runtime那点事实战（3）","date":"2016-03-24T03:15:48.000Z","_content":"###  添加类\n```\nobjc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)\n添加类 superclass 类是父类   name 类的名字  size_t 类占的空间\n\nvoid objc_disposeClassPair(Class cls) 销毁类\n\n\nvoid objc_registerClassPair(Class cls) 注册类\n\n\nobjc_duplicateClass\n Used by Foundation's Key-Value Observing.官方说法是不让自己调用\nDo not call this function yourself. \n```\n具体代码：\n```\n- (void)allocClass{\n    Class clas = objc_allocateClassPair(NSClassFromString(@\"FY\"), \"FYss\", 0);\n   \n    objc_property_attribute_t type = {\"T\", \"@\\\"NSString\\\"\"};\n    objc_property_attribute_t ownership = { \"C\", \"\" };\n    objc_property_attribute_t backingivar = { \"V\", \"_ivar1\"};\n    objc_property_attribute_t attrs[] = {type, ownership, backingivar};\n \n bool success =    class_addProperty(clas, \"nameIvar\", attrs, 3);\n    if (success) {\n        NSLog(@\"addIvar success\");\n        if (class_isMetaClass(clas)) {\n            NSLog(@\"是一个类\");\n        }\n    }\n     objc_registerClassPair(clas);\n    [self printPropreListClass:clas];\n}\n```\n###  实例化类\n```\n// 创建类实例\n\nid class_createInstance ( Class cls, size_t extraBytes );\n\n\n\n// 在指定位置创建类实例\n\nid objc_constructInstance ( Class cls, void *bytes );\n\n\n\n// 销毁类实例\n\nvoid * objc_destructInstance ( id obj );\n```\n\n###  实例\n```\nid object_copy(id obj, size_t size) //拷贝obj\n\nid object_dispose(id obj)   //释放obj\n\nIvar object_setInstanceVariable(id obj, const char *name, void *value) //修改实例的值\n\nIvar object_getInstanceVariable(id obj, const char *name, void **outValue) //获取实例\n\nOBJC_EXPORT void *object_getIndexedIvars(id obj) //获取obj的index\n\nid object_getIvar(id object, Ivar ivar) //获取obj的ivar\n\nvoid object_setIvar(id object, Ivar ivar, id value) //赋值ivar给obj默认值是value\n\nconst char *object_getClassName(id obj) //获取类的名字\n\nClass object_getClass(id object) //获得 类\n\nClass object_setClass(id object, Class cls)  //把obj 改到cls的类下\n\nint objc_getClassList(Class *buffer, int bufferLen) //获取class列表\n\nClass *objc_copyClassList(unsigned int *outCount) //拷贝类数组\n\nid objc_lookUpClass(const char *name) // 看看是否 注册了类\n\nid objc_getClass(const char *name) //获取类\n\nid objc_getRequiredClass(const char *name) //要是没有这个类就kill 这个类 \n\nconst char * ivar_getName( Ivar ivar) //获取var的名字\n\nconst char * ivar_getTypeEncoding( Ivar ivar) //获取ivar 的 type\n\nptrdiff_t ivar_getOffset( Ivar ivar) //\n\nvoid objc_setAssociatedObject(id object, void *key, id value, objc_AssociationPolicy policy) //给类别添加 属性\n\nid objc_getAssociatedObject(id object, void *key) //获取属性\n\nvoid objc_removeAssociatedObjects(id object) //删除属性\n\n```\n###  发送消息\n```\nid objc_msgSend(id self, SEL op, ...)// id 发送消息给SEL op\n\ndouble objc_msgSend_fpret(id self, SEL op, ...)// 和上边的一样这个用i386平台，PPC和PPC64不能用。\n\nvoid objc_msgSend_stret(void * stretAddr, id theReceiver, SEL theSelector, ...)// 有返回值的消息  stretAddr 是返回值 theReceiver接收消息的id SEL 是方法名\n\nid objc_msgSendSuper(struct objc_super *super, SEL op, ...)//给父类方法发送消息\n\nvoid objc_msgSendSuper_stret(struct objc_super *super, SEL op, ...)//给父类添加消息 \n```\n当我们用OC调用方法的时候，其实底层是obj发送消息的过程，就够obj发送消息给SEL，然后objruntime中会在objSELList中寻找，当然不是每次都去遍历所有的方法的，而是在methodCache，它会先去常用的方法cache在中查找，要是cache中没有这个方法，再去遍历所有的方法。参考：[Runtime源码点这里](http://www.opensource.apple.com/tarballs/objc4/)\n\n###  具体测试\n```\n    objc_msgSend(self,@selector(msgTest));\n\n-(void)msgTest{\n    NSLog(@\"调用了我 objc_msgSend\");\n}\n\n输出：2016-03-23 15:06:18.011 runTimeObj[46084:3861049] 调用了我 objc_msgSend\n```\n\n```\nid method_invoke(id receiver, Method m, ...) 调用receiver的方法 id 不能是nil\n\nvoid method_invoke_stret(id receiver, Method m, ...) //Using this function to call the implementation of a method is faster than calling method_getImplementation and method_getName. 官方描述就是比method_getName和method_getImplementation块\n\nIMP method_getImplementation( Method method) //指向IMP的方法指针\nIMP是什么？本质上是一个指针，指向方法的指针，俗名就是函数指针。\n\nconst char * method_getTypeEncoding( Method method) //方法type 返回一个c字符串\n\nchar * method_copyReturnType( Method method) 方法返回的类型 一个c字符串 用完要free(char *)的\n\nunsigned method_getNumberOfArguments( Method method) //方法的元素数量\n\nvoid method_getArgumentType( Method method, unsigned int index, char *dst, size_t dst_len) 获取method 索引是index的参数 值赋给dst 要是dst = nil；系统自动调用strncpy(dst, \"\", dst_len)\n\nIMP method_setImplementation( Method method, IMP imp) 把imp赋给method \n\nvoid method_exchangeImplementations( Method m1, Method m2) 交换两个方法\n例如：IMP imp1 = method_getImplementation(m1);\n     IMP imp2 = method_getImplementation(m2);\n         method_setImplementation(m1, imp2);\n         method_setImplementation(m2, imp1);\nconst char * * objc_copyImageNames(unsigned int *outCount)//返回所有加载的Objective-C框架和动态库的名字。\n\nconst char *class_getImageName(Class cls)//获取class的动态库的名字\n\nconst char * *objc_copyClassNamesForImage(const char *image, unsigned int *outCount) //拷贝动态库\n\nconst char* sel_getName(SEL aSelector) //获取SEL的字符串名字\n\nSEL sel_registerName(const char *str) //注册SEL 名字是str 返回注册成功的SEL\n\nSEL sel_getUid(const char *str) //获取str的方法SEL指针\n\nBOOL sel_isEqual(SEL lhs, SEL rhs) //判断两个SEL是否是同一个SEL \n\n\n```\n今天就到这吧，明天吧协议和属性看了。更多文章在www.fgyong.cn\n","source":"_posts/iOS高级开发runtime那点事实战（3）.md","raw":"title: iOS高级开发runtime那点事实战（3）\ndate: 2016-03-24 11:15:48\ntags:\n- iOS\n- iOS高级开发\ncategories: iOS\n---\n###  添加类\n```\nobjc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)\n添加类 superclass 类是父类   name 类的名字  size_t 类占的空间\n\nvoid objc_disposeClassPair(Class cls) 销毁类\n\n\nvoid objc_registerClassPair(Class cls) 注册类\n\n\nobjc_duplicateClass\n Used by Foundation's Key-Value Observing.官方说法是不让自己调用\nDo not call this function yourself. \n```\n具体代码：\n```\n- (void)allocClass{\n    Class clas = objc_allocateClassPair(NSClassFromString(@\"FY\"), \"FYss\", 0);\n   \n    objc_property_attribute_t type = {\"T\", \"@\\\"NSString\\\"\"};\n    objc_property_attribute_t ownership = { \"C\", \"\" };\n    objc_property_attribute_t backingivar = { \"V\", \"_ivar1\"};\n    objc_property_attribute_t attrs[] = {type, ownership, backingivar};\n \n bool success =    class_addProperty(clas, \"nameIvar\", attrs, 3);\n    if (success) {\n        NSLog(@\"addIvar success\");\n        if (class_isMetaClass(clas)) {\n            NSLog(@\"是一个类\");\n        }\n    }\n     objc_registerClassPair(clas);\n    [self printPropreListClass:clas];\n}\n```\n###  实例化类\n```\n// 创建类实例\n\nid class_createInstance ( Class cls, size_t extraBytes );\n\n\n\n// 在指定位置创建类实例\n\nid objc_constructInstance ( Class cls, void *bytes );\n\n\n\n// 销毁类实例\n\nvoid * objc_destructInstance ( id obj );\n```\n\n###  实例\n```\nid object_copy(id obj, size_t size) //拷贝obj\n\nid object_dispose(id obj)   //释放obj\n\nIvar object_setInstanceVariable(id obj, const char *name, void *value) //修改实例的值\n\nIvar object_getInstanceVariable(id obj, const char *name, void **outValue) //获取实例\n\nOBJC_EXPORT void *object_getIndexedIvars(id obj) //获取obj的index\n\nid object_getIvar(id object, Ivar ivar) //获取obj的ivar\n\nvoid object_setIvar(id object, Ivar ivar, id value) //赋值ivar给obj默认值是value\n\nconst char *object_getClassName(id obj) //获取类的名字\n\nClass object_getClass(id object) //获得 类\n\nClass object_setClass(id object, Class cls)  //把obj 改到cls的类下\n\nint objc_getClassList(Class *buffer, int bufferLen) //获取class列表\n\nClass *objc_copyClassList(unsigned int *outCount) //拷贝类数组\n\nid objc_lookUpClass(const char *name) // 看看是否 注册了类\n\nid objc_getClass(const char *name) //获取类\n\nid objc_getRequiredClass(const char *name) //要是没有这个类就kill 这个类 \n\nconst char * ivar_getName( Ivar ivar) //获取var的名字\n\nconst char * ivar_getTypeEncoding( Ivar ivar) //获取ivar 的 type\n\nptrdiff_t ivar_getOffset( Ivar ivar) //\n\nvoid objc_setAssociatedObject(id object, void *key, id value, objc_AssociationPolicy policy) //给类别添加 属性\n\nid objc_getAssociatedObject(id object, void *key) //获取属性\n\nvoid objc_removeAssociatedObjects(id object) //删除属性\n\n```\n###  发送消息\n```\nid objc_msgSend(id self, SEL op, ...)// id 发送消息给SEL op\n\ndouble objc_msgSend_fpret(id self, SEL op, ...)// 和上边的一样这个用i386平台，PPC和PPC64不能用。\n\nvoid objc_msgSend_stret(void * stretAddr, id theReceiver, SEL theSelector, ...)// 有返回值的消息  stretAddr 是返回值 theReceiver接收消息的id SEL 是方法名\n\nid objc_msgSendSuper(struct objc_super *super, SEL op, ...)//给父类方法发送消息\n\nvoid objc_msgSendSuper_stret(struct objc_super *super, SEL op, ...)//给父类添加消息 \n```\n当我们用OC调用方法的时候，其实底层是obj发送消息的过程，就够obj发送消息给SEL，然后objruntime中会在objSELList中寻找，当然不是每次都去遍历所有的方法的，而是在methodCache，它会先去常用的方法cache在中查找，要是cache中没有这个方法，再去遍历所有的方法。参考：[Runtime源码点这里](http://www.opensource.apple.com/tarballs/objc4/)\n\n###  具体测试\n```\n    objc_msgSend(self,@selector(msgTest));\n\n-(void)msgTest{\n    NSLog(@\"调用了我 objc_msgSend\");\n}\n\n输出：2016-03-23 15:06:18.011 runTimeObj[46084:3861049] 调用了我 objc_msgSend\n```\n\n```\nid method_invoke(id receiver, Method m, ...) 调用receiver的方法 id 不能是nil\n\nvoid method_invoke_stret(id receiver, Method m, ...) //Using this function to call the implementation of a method is faster than calling method_getImplementation and method_getName. 官方描述就是比method_getName和method_getImplementation块\n\nIMP method_getImplementation( Method method) //指向IMP的方法指针\nIMP是什么？本质上是一个指针，指向方法的指针，俗名就是函数指针。\n\nconst char * method_getTypeEncoding( Method method) //方法type 返回一个c字符串\n\nchar * method_copyReturnType( Method method) 方法返回的类型 一个c字符串 用完要free(char *)的\n\nunsigned method_getNumberOfArguments( Method method) //方法的元素数量\n\nvoid method_getArgumentType( Method method, unsigned int index, char *dst, size_t dst_len) 获取method 索引是index的参数 值赋给dst 要是dst = nil；系统自动调用strncpy(dst, \"\", dst_len)\n\nIMP method_setImplementation( Method method, IMP imp) 把imp赋给method \n\nvoid method_exchangeImplementations( Method m1, Method m2) 交换两个方法\n例如：IMP imp1 = method_getImplementation(m1);\n     IMP imp2 = method_getImplementation(m2);\n         method_setImplementation(m1, imp2);\n         method_setImplementation(m2, imp1);\nconst char * * objc_copyImageNames(unsigned int *outCount)//返回所有加载的Objective-C框架和动态库的名字。\n\nconst char *class_getImageName(Class cls)//获取class的动态库的名字\n\nconst char * *objc_copyClassNamesForImage(const char *image, unsigned int *outCount) //拷贝动态库\n\nconst char* sel_getName(SEL aSelector) //获取SEL的字符串名字\n\nSEL sel_registerName(const char *str) //注册SEL 名字是str 返回注册成功的SEL\n\nSEL sel_getUid(const char *str) //获取str的方法SEL指针\n\nBOOL sel_isEqual(SEL lhs, SEL rhs) //判断两个SEL是否是同一个SEL \n\n\n```\n今天就到这吧，明天吧协议和属性看了。更多文章在www.fgyong.cn\n","slug":"iOS高级开发runtime那点事实战（3）","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj4d000inhmf3xaxudks","content":"<h3 id=\"u6DFB_u52A0_u7C7B\"><a href=\"#u6DFB_u52A0_u7C7B\" class=\"headerlink\" title=\"添加类\"></a>添加类</h3><figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">objc_allocateClassPair(<span class=\"keyword\">Class</span> superclass, <span class=\"keyword\">const</span> <span class=\"built_in\">char</span> *name, size_t extraBytes)</div><div class=\"line\">添加类 superclass 类是父类   name 类的名字  size_t 类占的空间</div><div class=\"line\"></div><div class=\"line\">void objc_disposeClassPair(<span class=\"keyword\">Class</span> cls) 销毁类</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">void objc_registerClassPair(<span class=\"keyword\">Class</span> cls) 注册类</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">objc_duplicateClass</div><div class=\"line\"> Used <span class=\"keyword\">by</span> Foundation<span class=\"comment\">'s Key-Value Observing.官方说法是不让自己调用</span></div><div class=\"line\"><span class=\"keyword\">Do</span> <span class=\"keyword\">not</span> <span class=\"keyword\">call</span> this <span class=\"keyword\">function</span> yourself.</div></pre></td></tr></table></figure>\n<p>具体代码：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)allocClass&#123;</div><div class=\"line\">    Class clas = objc_allocateClassPair(NSClassFromString(@<span class=\"string\">\"FY\"</span>), <span class=\"string\">\"FYss\"</span>, <span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">   </div><div class=\"line\">    objc_property_attribute_t type = &#123;<span class=\"string\">\"T\"</span>, <span class=\"string\">\"@\\\"NSString\\\"\"</span>&#125;<span class=\"comment\">;</span></div><div class=\"line\">    objc_property_attribute_t ownership = &#123; <span class=\"string\">\"C\"</span>, <span class=\"string\">\"\"</span> &#125;<span class=\"comment\">;</span></div><div class=\"line\">    objc_property_attribute_t <span class=\"keyword\">backingivar </span>= &#123; <span class=\"string\">\"V\"</span>, <span class=\"string\">\"_ivar1\"</span>&#125;<span class=\"comment\">;</span></div><div class=\"line\">    objc_property_attribute_t attrs[] = &#123;type, ownership, <span class=\"keyword\">backingivar&#125;;</span></div><div class=\"line\"> </div><div class=\"line\"> <span class=\"keyword\">bool </span>success =    class_addProperty(clas, <span class=\"string\">\"nameIvar\"</span>, attrs, <span class=\"number\">3</span>)<span class=\"comment\">;</span></div><div class=\"line\">    if (success) &#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"addIvar success\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        if (class_isMetaClass(clas)) &#123;</div><div class=\"line\">            NSLog(@<span class=\"string\">\"是一个类\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">     objc_registerClassPair(clas)<span class=\"comment\">;</span></div><div class=\"line\">    [self printPropreListClass:clas]<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"u5B9E_u4F8B_u5316_u7C7B\"><a href=\"#u5B9E_u4F8B_u5316_u7C7B\" class=\"headerlink\" title=\"实例化类\"></a>实例化类</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建类实例</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">id <span class=\"title\">class_createInstance</span> <span class=\"params\">( Class cls, <span class=\"keyword\">size_t</span> extraBytes )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在指定位置创建类实例</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">id <span class=\"title\">objc_constructInstance</span> <span class=\"params\">( Class cls, <span class=\"keyword\">void</span> *bytes )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 销毁类实例</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> * <span class=\"title\">objc_destructInstance</span> <span class=\"params\">( id obj )</span></span>;</div></pre></td></tr></table></figure>\n<h3 id=\"u5B9E_u4F8B\"><a href=\"#u5B9E_u4F8B\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> object_copy(<span class=\"keyword\">id</span> obj, size_t size) <span class=\"comment\">//拷贝obj</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">id</span> object_dispose(<span class=\"keyword\">id</span> obj)   <span class=\"comment\">//释放obj</span></div><div class=\"line\"></div><div class=\"line\">Ivar object_setInstanceVariable(<span class=\"keyword\">id</span> obj, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">void</span> *value) <span class=\"comment\">//修改实例的值</span></div><div class=\"line\"></div><div class=\"line\">Ivar object_getInstanceVariable(<span class=\"keyword\">id</span> obj, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">void</span> **outValue) <span class=\"comment\">//获取实例</span></div><div class=\"line\"></div><div class=\"line\">OBJC_EXPORT <span class=\"keyword\">void</span> *object_getIndexedIvars(<span class=\"keyword\">id</span> obj) <span class=\"comment\">//获取obj的index</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">id</span> object_getIvar(<span class=\"keyword\">id</span> object, Ivar ivar) <span class=\"comment\">//获取obj的ivar</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> object_setIvar(<span class=\"keyword\">id</span> object, Ivar ivar, <span class=\"keyword\">id</span> value) <span class=\"comment\">//赋值ivar给obj默认值是value</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *object_getClassName(<span class=\"keyword\">id</span> obj) <span class=\"comment\">//获取类的名字</span></div><div class=\"line\"></div><div class=\"line\">Class object_getClass(<span class=\"keyword\">id</span> object) <span class=\"comment\">//获得 类</span></div><div class=\"line\"></div><div class=\"line\">Class object_setClass(<span class=\"keyword\">id</span> object, Class cls)  <span class=\"comment\">//把obj 改到cls的类下</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> objc_getClassList(Class *buffer, <span class=\"keyword\">int</span> bufferLen) <span class=\"comment\">//获取class列表</span></div><div class=\"line\"></div><div class=\"line\">Class *objc_copyClassList(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *outCount) <span class=\"comment\">//拷贝类数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">id</span> objc_lookUpClass(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name) <span class=\"comment\">// 看看是否 注册了类</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">id</span> objc_getClass(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name) <span class=\"comment\">//获取类</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">id</span> objc_getRequiredClass(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name) <span class=\"comment\">//要是没有这个类就kill 这个类 </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * ivar_getName( Ivar ivar) <span class=\"comment\">//获取var的名字</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * ivar_getTypeEncoding( Ivar ivar) <span class=\"comment\">//获取ivar 的 type</span></div><div class=\"line\"></div><div class=\"line\">ptrdiff_t ivar_getOffset( Ivar ivar) <span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> objc_setAssociatedObject(<span class=\"keyword\">id</span> object, <span class=\"keyword\">void</span> *key, <span class=\"keyword\">id</span> value, objc_AssociationPolicy policy) <span class=\"comment\">//给类别添加 属性</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">id</span> objc_getAssociatedObject(<span class=\"keyword\">id</span> object, <span class=\"keyword\">void</span> *key) <span class=\"comment\">//获取属性</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> objc_removeAssociatedObjects(<span class=\"keyword\">id</span> object) <span class=\"comment\">//删除属性</span></div></pre></td></tr></table></figure>\n<h3 id=\"u53D1_u9001_u6D88_u606F\"><a href=\"#u53D1_u9001_u6D88_u606F\" class=\"headerlink\" title=\"发送消息\"></a>发送消息</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> objc_msgSend(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL op, ...)<span class=\"comment\">// id 发送消息给SEL op</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">double</span> objc_msgSend_fpret(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL op, ...)<span class=\"comment\">// 和上边的一样这个用i386平台，PPC和PPC64不能用。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> objc_msgSend_stret(<span class=\"keyword\">void</span> * stretAddr, <span class=\"keyword\">id</span> theReceiver, SEL theSelector, ...)<span class=\"comment\">// 有返回值的消息  stretAddr 是返回值 theReceiver接收消息的id SEL 是方法名</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">id</span> objc_msgSendSuper(<span class=\"keyword\">struct</span> objc_super *<span class=\"keyword\">super</span>, SEL op, ...)<span class=\"comment\">//给父类方法发送消息</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> objc_msgSendSuper_stret(<span class=\"keyword\">struct</span> objc_super *<span class=\"keyword\">super</span>, SEL op, ...)<span class=\"comment\">//给父类添加消息</span></div></pre></td></tr></table></figure>\n<p>当我们用OC调用方法的时候，其实底层是obj发送消息的过程，就够obj发送消息给SEL，然后objruntime中会在objSELList中寻找，当然不是每次都去遍历所有的方法的，而是在methodCache，它会先去常用的方法cache在中查找，要是cache中没有这个方法，再去遍历所有的方法。参考：<a href=\"http://www.opensource.apple.com/tarballs/objc4/\" target=\"_blank\" rel=\"external\">Runtime源码点这里</a></p>\n<h3 id=\"u5177_u4F53_u6D4B_u8BD5\"><a href=\"#u5177_u4F53_u6D4B_u8BD5\" class=\"headerlink\" title=\"具体测试\"></a>具体测试</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"selector-tag\">objc_msgSend</span>(self,<span class=\"variable\">@selector</span>(msgTest));</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">-</span>(void)<span class=\"selector-tag\">msgTest</span>&#123;</div><div class=\"line\">    <span class=\"selector-tag\">NSLog</span>(@<span class=\"string\">\"调用了我 objc_msgSend\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">输出：<span class=\"selector-tag\">2016-03-23</span> <span class=\"selector-tag\">15</span><span class=\"selector-pseudo\">:06</span><span class=\"selector-pseudo\">:18.011</span> <span class=\"selector-tag\">runTimeObj</span><span class=\"selector-attr\">[46084:3861049]</span> 调用了我 <span class=\"selector-tag\">objc_msgSend</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">id method_invoke(id receiver, <span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">m</span>, ...) 调用<span class=\"title\">receiver</span>的方法 <span class=\"title\">id</span> 不能是<span class=\"title\">nil</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">void</span> <span class=\"title\">method_invoke_stret</span><span class=\"params\">(id receiver, <span class=\"keyword\">Method</span> m, ...)</span> //<span class=\"title\">Using</span> <span class=\"title\">this</span> <span class=\"title\">function</span> <span class=\"title\">to</span> <span class=\"title\">call</span> <span class=\"title\">the</span> <span class=\"title\">implementation</span> <span class=\"title\">of</span> <span class=\"title\">a</span> <span class=\"title\">method</span> <span class=\"title\">is</span> <span class=\"title\">faster</span> <span class=\"title\">than</span> <span class=\"title\">calling</span> <span class=\"title\">method_getImplementation</span> <span class=\"title\">and</span> <span class=\"title\">method_getName</span>. 官方描述就是比<span class=\"title\">method_getName</span>和<span class=\"title\">method_getImplementation</span>块</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">IMP</span> <span class=\"title\">method_getImplementation</span><span class=\"params\">( <span class=\"keyword\">Method</span> <span class=\"keyword\">method</span>)</span> //指向<span class=\"title\">IMP</span>的方法指针</div><div class=\"line\"><span class=\"title\">IMP</span>是什么？本质上是一个指针，指向方法的指针，俗名就是函数指针。</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">const</span> <span class=\"title\">char</span> * <span class=\"title\">method_getTypeEncoding</span><span class=\"params\">( <span class=\"keyword\">Method</span> <span class=\"keyword\">method</span>)</span> //方法<span class=\"title\">type</span> 返回一个<span class=\"title\">c</span>字符串</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">char</span> * <span class=\"title\">method_copyReturnType</span><span class=\"params\">( <span class=\"keyword\">Method</span> <span class=\"keyword\">method</span>)</span> 方法返回的类型 一个<span class=\"title\">c</span>字符串 用完要<span class=\"title\">free</span><span class=\"params\">(char *)</span>的</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">unsigned</span> <span class=\"title\">method_getNumberOfArguments</span><span class=\"params\">( <span class=\"keyword\">Method</span> <span class=\"keyword\">method</span>)</span> //方法的元素数量</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">void</span> <span class=\"title\">method_getArgumentType</span><span class=\"params\">( <span class=\"keyword\">Method</span> <span class=\"keyword\">method</span>, unsigned int <span class=\"keyword\">index</span>, char *dst, size_t dst_len)</span> 获取<span class=\"title\">method</span> 索引是<span class=\"title\">index</span>的参数 值赋给<span class=\"title\">dst</span> 要是<span class=\"title\">dst</span> = <span class=\"title\">nil</span>；系统自动调用<span class=\"title\">strncpy</span><span class=\"params\">(dst, \"\", dst_len)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">IMP</span> <span class=\"title\">method_setImplementation</span><span class=\"params\">( <span class=\"keyword\">Method</span> <span class=\"keyword\">method</span>, IMP imp)</span> 把<span class=\"title\">imp</span>赋给<span class=\"title\">method</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">void</span> <span class=\"title\">method_exchangeImplementations</span><span class=\"params\">( <span class=\"keyword\">Method</span> m1, <span class=\"keyword\">Method</span> m2)</span> 交换两个方法</div><div class=\"line\">例如：<span class=\"title\">IMP</span> <span class=\"title\">imp1</span> = <span class=\"title\">method_getImplementation</span><span class=\"params\">(m1)</span>;</div><div class=\"line\">     IMP imp2 = method_getImplementation(m2);</div><div class=\"line\">         method_setImplementation(m1, imp2);</div><div class=\"line\">         method_setImplementation(m2, imp1);</div><div class=\"line\"><span class=\"keyword\">const</span> char * * objc_copyImageNames(unsigned int *outCount)<span class=\"comment\">//返回所有加载的Objective-C框架和动态库的名字。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> char *class_getImageName(<span class=\"keyword\">Class</span> cls)<span class=\"comment\">//获取class的动态库的名字</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> char * *objc_copyClassNamesForImage(<span class=\"keyword\">const</span> char *image, unsigned int *outCount) <span class=\"comment\">//拷贝动态库</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> char* sel_getName(SEL aSelector) <span class=\"comment\">//获取SEL的字符串名字</span></div><div class=\"line\"></div><div class=\"line\">SEL sel_registerName(<span class=\"keyword\">const</span> char *str) <span class=\"comment\">//注册SEL 名字是str 返回注册成功的SEL</span></div><div class=\"line\"></div><div class=\"line\">SEL sel_getUid(<span class=\"keyword\">const</span> char *str) <span class=\"comment\">//获取str的方法SEL指针</span></div><div class=\"line\"></div><div class=\"line\">BOOL sel_isEqual(SEL lhs, SEL rhs) <span class=\"comment\">//判断两个SEL是否是同一个SEL</span></div></pre></td></tr></table></figure>\n<p>今天就到这吧，明天吧协议和属性看了。更多文章在www.fgyong.cn</p>\n","excerpt":"","more":"<h3 id=\"u6DFB_u52A0_u7C7B\"><a href=\"#u6DFB_u52A0_u7C7B\" class=\"headerlink\" title=\"添加类\"></a>添加类</h3><figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">objc_allocateClassPair(<span class=\"keyword\">Class</span> superclass, <span class=\"keyword\">const</span> <span class=\"built_in\">char</span> *name, size_t extraBytes)</div><div class=\"line\">添加类 superclass 类是父类   name 类的名字  size_t 类占的空间</div><div class=\"line\"></div><div class=\"line\">void objc_disposeClassPair(<span class=\"keyword\">Class</span> cls) 销毁类</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">void objc_registerClassPair(<span class=\"keyword\">Class</span> cls) 注册类</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">objc_duplicateClass</div><div class=\"line\"> Used <span class=\"keyword\">by</span> Foundation<span class=\"comment\">'s Key-Value Observing.官方说法是不让自己调用</span></div><div class=\"line\"><span class=\"keyword\">Do</span> <span class=\"keyword\">not</span> <span class=\"keyword\">call</span> this <span class=\"keyword\">function</span> yourself.</div></pre></td></tr></table></figure>\n<p>具体代码：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)allocClass&#123;</div><div class=\"line\">    Class clas = objc_allocateClassPair(NSClassFromString(@<span class=\"string\">\"FY\"</span>), <span class=\"string\">\"FYss\"</span>, <span class=\"number\">0</span>)<span class=\"comment\">;</span></div><div class=\"line\">   </div><div class=\"line\">    objc_property_attribute_t type = &#123;<span class=\"string\">\"T\"</span>, <span class=\"string\">\"@\\\"NSString\\\"\"</span>&#125;<span class=\"comment\">;</span></div><div class=\"line\">    objc_property_attribute_t ownership = &#123; <span class=\"string\">\"C\"</span>, <span class=\"string\">\"\"</span> &#125;<span class=\"comment\">;</span></div><div class=\"line\">    objc_property_attribute_t <span class=\"keyword\">backingivar </span>= &#123; <span class=\"string\">\"V\"</span>, <span class=\"string\">\"_ivar1\"</span>&#125;<span class=\"comment\">;</span></div><div class=\"line\">    objc_property_attribute_t attrs[] = &#123;type, ownership, <span class=\"keyword\">backingivar&#125;;</div><div class=\"line\"></span> </div><div class=\"line\"> <span class=\"keyword\">bool </span>success =    class_addProperty(clas, <span class=\"string\">\"nameIvar\"</span>, attrs, <span class=\"number\">3</span>)<span class=\"comment\">;</span></div><div class=\"line\">    if (success) &#123;</div><div class=\"line\">        NSLog(@<span class=\"string\">\"addIvar success\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        if (class_isMetaClass(clas)) &#123;</div><div class=\"line\">            NSLog(@<span class=\"string\">\"是一个类\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">     objc_registerClassPair(clas)<span class=\"comment\">;</span></div><div class=\"line\">    [self printPropreListClass:clas]<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"u5B9E_u4F8B_u5316_u7C7B\"><a href=\"#u5B9E_u4F8B_u5316_u7C7B\" class=\"headerlink\" title=\"实例化类\"></a>实例化类</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建类实例</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">id <span class=\"title\">class_createInstance</span> <span class=\"params\">( Class cls, <span class=\"keyword\">size_t</span> extraBytes )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在指定位置创建类实例</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">id <span class=\"title\">objc_constructInstance</span> <span class=\"params\">( Class cls, <span class=\"keyword\">void</span> *bytes )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 销毁类实例</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> * <span class=\"title\">objc_destructInstance</span> <span class=\"params\">( id obj )</span></span>;</div></pre></td></tr></table></figure>\n<h3 id=\"u5B9E_u4F8B\"><a href=\"#u5B9E_u4F8B\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> object_copy(<span class=\"keyword\">id</span> obj, size_t size) <span class=\"comment\">//拷贝obj</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">id</span> object_dispose(<span class=\"keyword\">id</span> obj)   <span class=\"comment\">//释放obj</span></div><div class=\"line\"></div><div class=\"line\">Ivar object_setInstanceVariable(<span class=\"keyword\">id</span> obj, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">void</span> *value) <span class=\"comment\">//修改实例的值</span></div><div class=\"line\"></div><div class=\"line\">Ivar object_getInstanceVariable(<span class=\"keyword\">id</span> obj, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">void</span> **outValue) <span class=\"comment\">//获取实例</span></div><div class=\"line\"></div><div class=\"line\">OBJC_EXPORT <span class=\"keyword\">void</span> *object_getIndexedIvars(<span class=\"keyword\">id</span> obj) <span class=\"comment\">//获取obj的index</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">id</span> object_getIvar(<span class=\"keyword\">id</span> object, Ivar ivar) <span class=\"comment\">//获取obj的ivar</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> object_setIvar(<span class=\"keyword\">id</span> object, Ivar ivar, <span class=\"keyword\">id</span> value) <span class=\"comment\">//赋值ivar给obj默认值是value</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *object_getClassName(<span class=\"keyword\">id</span> obj) <span class=\"comment\">//获取类的名字</span></div><div class=\"line\"></div><div class=\"line\">Class object_getClass(<span class=\"keyword\">id</span> object) <span class=\"comment\">//获得 类</span></div><div class=\"line\"></div><div class=\"line\">Class object_setClass(<span class=\"keyword\">id</span> object, Class cls)  <span class=\"comment\">//把obj 改到cls的类下</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> objc_getClassList(Class *buffer, <span class=\"keyword\">int</span> bufferLen) <span class=\"comment\">//获取class列表</span></div><div class=\"line\"></div><div class=\"line\">Class *objc_copyClassList(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *outCount) <span class=\"comment\">//拷贝类数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">id</span> objc_lookUpClass(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name) <span class=\"comment\">// 看看是否 注册了类</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">id</span> objc_getClass(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name) <span class=\"comment\">//获取类</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">id</span> objc_getRequiredClass(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name) <span class=\"comment\">//要是没有这个类就kill 这个类 </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * ivar_getName( Ivar ivar) <span class=\"comment\">//获取var的名字</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * ivar_getTypeEncoding( Ivar ivar) <span class=\"comment\">//获取ivar 的 type</span></div><div class=\"line\"></div><div class=\"line\">ptrdiff_t ivar_getOffset( Ivar ivar) <span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> objc_setAssociatedObject(<span class=\"keyword\">id</span> object, <span class=\"keyword\">void</span> *key, <span class=\"keyword\">id</span> value, objc_AssociationPolicy policy) <span class=\"comment\">//给类别添加 属性</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">id</span> objc_getAssociatedObject(<span class=\"keyword\">id</span> object, <span class=\"keyword\">void</span> *key) <span class=\"comment\">//获取属性</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> objc_removeAssociatedObjects(<span class=\"keyword\">id</span> object) <span class=\"comment\">//删除属性</span></div></pre></td></tr></table></figure>\n<h3 id=\"u53D1_u9001_u6D88_u606F\"><a href=\"#u53D1_u9001_u6D88_u606F\" class=\"headerlink\" title=\"发送消息\"></a>发送消息</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> objc_msgSend(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL op, ...)<span class=\"comment\">// id 发送消息给SEL op</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">double</span> objc_msgSend_fpret(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL op, ...)<span class=\"comment\">// 和上边的一样这个用i386平台，PPC和PPC64不能用。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> objc_msgSend_stret(<span class=\"keyword\">void</span> * stretAddr, <span class=\"keyword\">id</span> theReceiver, SEL theSelector, ...)<span class=\"comment\">// 有返回值的消息  stretAddr 是返回值 theReceiver接收消息的id SEL 是方法名</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">id</span> objc_msgSendSuper(<span class=\"keyword\">struct</span> objc_super *<span class=\"keyword\">super</span>, SEL op, ...)<span class=\"comment\">//给父类方法发送消息</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> objc_msgSendSuper_stret(<span class=\"keyword\">struct</span> objc_super *<span class=\"keyword\">super</span>, SEL op, ...)<span class=\"comment\">//给父类添加消息</span></div></pre></td></tr></table></figure>\n<p>当我们用OC调用方法的时候，其实底层是obj发送消息的过程，就够obj发送消息给SEL，然后objruntime中会在objSELList中寻找，当然不是每次都去遍历所有的方法的，而是在methodCache，它会先去常用的方法cache在中查找，要是cache中没有这个方法，再去遍历所有的方法。参考：<a href=\"http://www.opensource.apple.com/tarballs/objc4/\">Runtime源码点这里</a></p>\n<h3 id=\"u5177_u4F53_u6D4B_u8BD5\"><a href=\"#u5177_u4F53_u6D4B_u8BD5\" class=\"headerlink\" title=\"具体测试\"></a>具体测试</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"selector-tag\">objc_msgSend</span>(self,<span class=\"variable\">@selector</span>(msgTest));</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">-</span>(void)<span class=\"selector-tag\">msgTest</span>&#123;</div><div class=\"line\">    <span class=\"selector-tag\">NSLog</span>(@<span class=\"string\">\"调用了我 objc_msgSend\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">输出：<span class=\"selector-tag\">2016-03-23</span> <span class=\"selector-tag\">15</span><span class=\"selector-pseudo\">:06</span><span class=\"selector-pseudo\">:18.011</span> <span class=\"selector-tag\">runTimeObj</span><span class=\"selector-attr\">[46084:3861049]</span> 调用了我 <span class=\"selector-tag\">objc_msgSend</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">id method_invoke(id receiver, <span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">m</span>, ...) 调用<span class=\"title\">receiver</span>的方法 <span class=\"title\">id</span> 不能是<span class=\"title\">nil</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">void</span> <span class=\"title\">method_invoke_stret</span><span class=\"params\">(id receiver, <span class=\"keyword\">Method</span> m, ...)</span> //<span class=\"title\">Using</span> <span class=\"title\">this</span> <span class=\"title\">function</span> <span class=\"title\">to</span> <span class=\"title\">call</span> <span class=\"title\">the</span> <span class=\"title\">implementation</span> <span class=\"title\">of</span> <span class=\"title\">a</span> <span class=\"title\">method</span> <span class=\"title\">is</span> <span class=\"title\">faster</span> <span class=\"title\">than</span> <span class=\"title\">calling</span> <span class=\"title\">method_getImplementation</span> <span class=\"title\">and</span> <span class=\"title\">method_getName</span>. 官方描述就是比<span class=\"title\">method_getName</span>和<span class=\"title\">method_getImplementation</span>块</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">IMP</span> <span class=\"title\">method_getImplementation</span><span class=\"params\">( <span class=\"keyword\">Method</span> <span class=\"keyword\">method</span>)</span> //指向<span class=\"title\">IMP</span>的方法指针</div><div class=\"line\"><span class=\"title\">IMP</span>是什么？本质上是一个指针，指向方法的指针，俗名就是函数指针。</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">const</span> <span class=\"title\">char</span> * <span class=\"title\">method_getTypeEncoding</span><span class=\"params\">( <span class=\"keyword\">Method</span> <span class=\"keyword\">method</span>)</span> //方法<span class=\"title\">type</span> 返回一个<span class=\"title\">c</span>字符串</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">char</span> * <span class=\"title\">method_copyReturnType</span><span class=\"params\">( <span class=\"keyword\">Method</span> <span class=\"keyword\">method</span>)</span> 方法返回的类型 一个<span class=\"title\">c</span>字符串 用完要<span class=\"title\">free</span><span class=\"params\">(char *)</span>的</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">unsigned</span> <span class=\"title\">method_getNumberOfArguments</span><span class=\"params\">( <span class=\"keyword\">Method</span> <span class=\"keyword\">method</span>)</span> //方法的元素数量</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">void</span> <span class=\"title\">method_getArgumentType</span><span class=\"params\">( <span class=\"keyword\">Method</span> <span class=\"keyword\">method</span>, unsigned int <span class=\"keyword\">index</span>, char *dst, size_t dst_len)</span> 获取<span class=\"title\">method</span> 索引是<span class=\"title\">index</span>的参数 值赋给<span class=\"title\">dst</span> 要是<span class=\"title\">dst</span> = <span class=\"title\">nil</span>；系统自动调用<span class=\"title\">strncpy</span><span class=\"params\">(dst, \"\", dst_len)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">IMP</span> <span class=\"title\">method_setImplementation</span><span class=\"params\">( <span class=\"keyword\">Method</span> <span class=\"keyword\">method</span>, IMP imp)</span> 把<span class=\"title\">imp</span>赋给<span class=\"title\">method</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">void</span> <span class=\"title\">method_exchangeImplementations</span><span class=\"params\">( <span class=\"keyword\">Method</span> m1, <span class=\"keyword\">Method</span> m2)</span> 交换两个方法</div><div class=\"line\">例如：<span class=\"title\">IMP</span> <span class=\"title\">imp1</span> = <span class=\"title\">method_getImplementation</span><span class=\"params\">(m1)</span>;</span></div><div class=\"line\">     IMP imp2 = method_getImplementation(m2);</div><div class=\"line\">         method_setImplementation(m1, imp2);</div><div class=\"line\">         method_setImplementation(m2, imp1);</div><div class=\"line\"><span class=\"keyword\">const</span> char * * objc_copyImageNames(unsigned int *outCount)<span class=\"comment\">//返回所有加载的Objective-C框架和动态库的名字。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> char *class_getImageName(<span class=\"keyword\">Class</span> cls)<span class=\"comment\">//获取class的动态库的名字</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> char * *objc_copyClassNamesForImage(<span class=\"keyword\">const</span> char *image, unsigned int *outCount) <span class=\"comment\">//拷贝动态库</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> char* sel_getName(SEL aSelector) <span class=\"comment\">//获取SEL的字符串名字</span></div><div class=\"line\"></div><div class=\"line\">SEL sel_registerName(<span class=\"keyword\">const</span> char *str) <span class=\"comment\">//注册SEL 名字是str 返回注册成功的SEL</span></div><div class=\"line\"></div><div class=\"line\">SEL sel_getUid(<span class=\"keyword\">const</span> char *str) <span class=\"comment\">//获取str的方法SEL指针</span></div><div class=\"line\"></div><div class=\"line\">BOOL sel_isEqual(SEL lhs, SEL rhs) <span class=\"comment\">//判断两个SEL是否是同一个SEL</span></div></pre></td></tr></table></figure>\n<p>今天就到这吧，明天吧协议和属性看了。更多文章在www.fgyong.cn</p>\n"},{"title":"iOS高级开发runtime那点事实战（4）","date":"2016-03-28T06:19:20.000Z","_content":"### Category\nCategory是表示一个指向分类的结构体的指针，其定义如下：\n```\ntypedef struct objc_category *Category;\n\n\n\nstruct objc_category {\n\n    char *category_name                          OBJC2_UNAVAILABLE; // 分类名\n\n    char *class_name                             OBJC2_UNAVAILABLE; // 分类所属的类名\n\n    struct objc_method_list *instance_methods    OBJC2_UNAVAILABLE; // 实例方法列表\n\n    struct objc_method_list *class_methods       OBJC2_UNAVAILABLE; // 类方法列表\n\n    struct objc_protocol_list *protocols         OBJC2_UNAVAILABLE; // 分类所实现的协议列表\n} \n```\n\n### Protocol\nProtocol定义：\n\n```\ntypedef struct objc_object Protocol;\n\n// 返回指定的协议\n\nProtocol * objc_getProtocol ( const char *name );\n\n\n\n// 获取运行时所知道的所有协议的数组\n\nProtocol ** objc_copyProtocolList ( unsigned int *outCount );\n\n\n\n// 创建新的协议实例\n\nProtocol * objc_allocateProtocol ( const char *name );\n\n\n\n// 在运行时中注册新创建的协议\n\nvoid objc_registerProtocol ( Protocol *proto );\n\n\n\n// 为协议添加方法\n\nvoid protocol_addMethodDescription ( Protocol *proto, SEL name, const char *types, BOOL isRequiredMethod, BOOL isInstanceMethod );\n\n\n\n// 添加一个已注册的协议到协议中\n\nvoid protocol_addProtocol ( Protocol *proto, Protocol *addition );\n\n\n\n// 为协议添加属性\n\nvoid protocol_addProperty ( Protocol *proto, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount, BOOL isRequiredProperty, BOOL isInstanceProperty );\n\n\n\n// 返回协议名\n\nconst char * protocol_getName ( Protocol *p );\n\n\n\n// 测试两个协议是否相等\n\nBOOL protocol_isEqual ( Protocol *proto, Protocol *other );\n\n\n\n// 获取协议中指定条件的方法的方法描述数组\n\nstruct objc_method_description * protocol_copyMethodDescriptionList ( Protocol *p, BOOL isRequiredMethod, BOOL isInstanceMethod, unsigned int *outCount );\n\n\n\n// 获取协议中指定方法的方法描述\n\nstruct objc_method_description protocol_getMethodDescription ( Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod );\n\n\n\n// 获取协议中的属性列表\n\nobjc_property_t * protocol_copyPropertyList ( Protocol *proto, unsigned int *outCount );\n\n\n\n// 获取协议的指定属性\n\nobjc_property_t protocol_getProperty ( Protocol *proto, const char *name, BOOL isRequiredProperty, BOOL isInstanceProperty );\n\n\n\n// 获取协议采用的协议\n\nProtocol ** protocol_copyProtocolList ( Protocol *proto, unsigned int *outCount );\n\n\n\n// 查看协议是否采用了另一个协议\n\nBOOL protocol_conformsToProtocol ( Protocol *proto, Protocol *other );\n```\n### 属性\n\n```\n\nconst char *property_getName(objc_property_t property) 获得property的name\n\nconst char *property_getAttributes(objc_property_t property) //获得property的atttibutes\n\nchar *property_copyAttributeValue(objc_property_t property, const char *attributeName) 拷贝 property的attributeName的值\n\nobjc_property_attribute_t *property_copyAttributeList(objc_property_t property, unsigned int*outCount) 拷贝property的数组 个数是outCount\n\n```\n其实runtime的很多函数在平时我们是用不到的，但是还是要了解一点的，以便于有时候出现的问题，自己却不知道原理，那样解决问题，有时解决了但是还不知道为什么。[至于runtime的源码在这里](http://www.opensource.apple.com/tarballs/objc4/),要下载就下载版本最高的，感兴趣的可以看一下。\n","source":"_posts/iOS高级开发runtime那点事实战（4）.md","raw":"title: iOS高级开发runtime那点事实战（4）\ndate: 2016-03-28 14:19:20\ntags:\n- iOS\n- iOS高级开发\ncategories: iOS\n---\n### Category\nCategory是表示一个指向分类的结构体的指针，其定义如下：\n```\ntypedef struct objc_category *Category;\n\n\n\nstruct objc_category {\n\n    char *category_name                          OBJC2_UNAVAILABLE; // 分类名\n\n    char *class_name                             OBJC2_UNAVAILABLE; // 分类所属的类名\n\n    struct objc_method_list *instance_methods    OBJC2_UNAVAILABLE; // 实例方法列表\n\n    struct objc_method_list *class_methods       OBJC2_UNAVAILABLE; // 类方法列表\n\n    struct objc_protocol_list *protocols         OBJC2_UNAVAILABLE; // 分类所实现的协议列表\n} \n```\n\n### Protocol\nProtocol定义：\n\n```\ntypedef struct objc_object Protocol;\n\n// 返回指定的协议\n\nProtocol * objc_getProtocol ( const char *name );\n\n\n\n// 获取运行时所知道的所有协议的数组\n\nProtocol ** objc_copyProtocolList ( unsigned int *outCount );\n\n\n\n// 创建新的协议实例\n\nProtocol * objc_allocateProtocol ( const char *name );\n\n\n\n// 在运行时中注册新创建的协议\n\nvoid objc_registerProtocol ( Protocol *proto );\n\n\n\n// 为协议添加方法\n\nvoid protocol_addMethodDescription ( Protocol *proto, SEL name, const char *types, BOOL isRequiredMethod, BOOL isInstanceMethod );\n\n\n\n// 添加一个已注册的协议到协议中\n\nvoid protocol_addProtocol ( Protocol *proto, Protocol *addition );\n\n\n\n// 为协议添加属性\n\nvoid protocol_addProperty ( Protocol *proto, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount, BOOL isRequiredProperty, BOOL isInstanceProperty );\n\n\n\n// 返回协议名\n\nconst char * protocol_getName ( Protocol *p );\n\n\n\n// 测试两个协议是否相等\n\nBOOL protocol_isEqual ( Protocol *proto, Protocol *other );\n\n\n\n// 获取协议中指定条件的方法的方法描述数组\n\nstruct objc_method_description * protocol_copyMethodDescriptionList ( Protocol *p, BOOL isRequiredMethod, BOOL isInstanceMethod, unsigned int *outCount );\n\n\n\n// 获取协议中指定方法的方法描述\n\nstruct objc_method_description protocol_getMethodDescription ( Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod );\n\n\n\n// 获取协议中的属性列表\n\nobjc_property_t * protocol_copyPropertyList ( Protocol *proto, unsigned int *outCount );\n\n\n\n// 获取协议的指定属性\n\nobjc_property_t protocol_getProperty ( Protocol *proto, const char *name, BOOL isRequiredProperty, BOOL isInstanceProperty );\n\n\n\n// 获取协议采用的协议\n\nProtocol ** protocol_copyProtocolList ( Protocol *proto, unsigned int *outCount );\n\n\n\n// 查看协议是否采用了另一个协议\n\nBOOL protocol_conformsToProtocol ( Protocol *proto, Protocol *other );\n```\n### 属性\n\n```\n\nconst char *property_getName(objc_property_t property) 获得property的name\n\nconst char *property_getAttributes(objc_property_t property) //获得property的atttibutes\n\nchar *property_copyAttributeValue(objc_property_t property, const char *attributeName) 拷贝 property的attributeName的值\n\nobjc_property_attribute_t *property_copyAttributeList(objc_property_t property, unsigned int*outCount) 拷贝property的数组 个数是outCount\n\n```\n其实runtime的很多函数在平时我们是用不到的，但是还是要了解一点的，以便于有时候出现的问题，自己却不知道原理，那样解决问题，有时解决了但是还不知道为什么。[至于runtime的源码在这里](http://www.opensource.apple.com/tarballs/objc4/),要下载就下载版本最高的，感兴趣的可以看一下。\n","slug":"iOS高级开发runtime那点事实战（4）","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj4f000jnhmfo1ih8dj6","content":"<h3 id=\"Category\"><a href=\"#Category\" class=\"headerlink\" title=\"Category\"></a>Category</h3><p>Category是表示一个指向分类的结构体的指针，其定义如下：<br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_category</span></span> *Category;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_category</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">char</span> *category_name                          OBJC2_UNAVAILABLE; <span class=\"comment\">// 分类名</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">char</span> *class_name                             OBJC2_UNAVAILABLE; <span class=\"comment\">// 分类所属的类名</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method_list</span></span> *instance_methods    OBJC2_UNAVAILABLE; <span class=\"comment\">// 实例方法列表</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method_list</span></span> *class_methods       OBJC2_UNAVAILABLE; <span class=\"comment\">// 类方法列表</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_protocol_list</span></span> *protocols         OBJC2_UNAVAILABLE; <span class=\"comment\">// 分类所实现的协议列表</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Protocol\"><a href=\"#Protocol\" class=\"headerlink\" title=\"Protocol\"></a>Protocol</h3><p>Protocol定义：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_object Protocol;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回指定的协议</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">Protocol * <span class=\"title\">objc_getProtocol</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取运行时所知道的所有协议的数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">Protocol ** <span class=\"title\">objc_copyProtocolList</span> <span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *outCount )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建新的协议实例</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">Protocol * <span class=\"title\">objc_allocateProtocol</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在运行时中注册新创建的协议</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">objc_registerProtocol</span> <span class=\"params\">( Protocol *proto )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为协议添加方法</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">protocol_addMethodDescription</span> <span class=\"params\">( Protocol *proto, SEL name, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *types, BOOL isRequiredMethod, BOOL isInstanceMethod )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 添加一个已注册的协议到协议中</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">protocol_addProtocol</span> <span class=\"params\">( Protocol *proto, Protocol *addition )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为协议添加属性</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">protocol_addProperty</span> <span class=\"params\">( Protocol *proto, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">const</span> <span class=\"keyword\">objc_property_attribute_t</span> *attributes, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> attributeCount, BOOL isRequiredProperty, BOOL isInstanceProperty )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回协议名</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * <span class=\"title\">protocol_getName</span> <span class=\"params\">( Protocol *p )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 测试两个协议是否相等</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">BOOL <span class=\"title\">protocol_isEqual</span> <span class=\"params\">( Protocol *proto, Protocol *other )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取协议中指定条件的方法的方法描述数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> objc_method_description * <span class=\"title\">protocol_copyMethodDescriptionList</span> <span class=\"params\">( Protocol *p, BOOL isRequiredMethod, BOOL isInstanceMethod, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *outCount )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取协议中指定方法的方法描述</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> objc_method_description <span class=\"title\">protocol_getMethodDescription</span> <span class=\"params\">( Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取协议中的属性列表</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">objc_property_t</span> * protocol_copyPropertyList ( Protocol *proto, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *outCount );</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取协议的指定属性</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">objc_property_t</span> protocol_getProperty ( Protocol *proto, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, BOOL isRequiredProperty, BOOL isInstanceProperty );</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取协议采用的协议</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">Protocol ** <span class=\"title\">protocol_copyProtocolList</span> <span class=\"params\">( Protocol *proto, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *outCount )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 查看协议是否采用了另一个协议</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">BOOL <span class=\"title\">protocol_conformsToProtocol</span> <span class=\"params\">( Protocol *proto, Protocol *other )</span></span>;</div></pre></td></tr></table></figure>\n<h3 id=\"u5C5E_u6027\"><a href=\"#u5C5E_u6027\" class=\"headerlink\" title=\"属性\"></a>属性</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">const char *property_getName(objc_property_t <span class=\"keyword\">property</span><span class=\"title\"></span>) 获得<span class=\"keyword\">property</span><span class=\"title\"></span>的name</div><div class=\"line\"></div><div class=\"line\">const char *property_getAttributes(objc_property_t <span class=\"keyword\">property</span><span class=\"title\"></span>) //获得<span class=\"keyword\">property</span><span class=\"title\"></span>的atttibutes</div><div class=\"line\"></div><div class=\"line\">char *property_copyAttributeValue(objc_property_t <span class=\"keyword\">property</span><span class=\"title\"></span>, const char *attributeName) 拷贝 <span class=\"keyword\">property</span><span class=\"title\"></span>的attributeName的值</div><div class=\"line\"></div><div class=\"line\">objc_property_attribute_t *property_copyAttributeList(objc_property_t <span class=\"keyword\">property</span><span class=\"title\"></span>, unsigned int*outCount) 拷贝<span class=\"keyword\">property</span><span class=\"title\"></span>的数组 个数是outCount</div></pre></td></tr></table></figure>\n<p>其实runtime的很多函数在平时我们是用不到的，但是还是要了解一点的，以便于有时候出现的问题，自己却不知道原理，那样解决问题，有时解决了但是还不知道为什么。<a href=\"http://www.opensource.apple.com/tarballs/objc4/\" target=\"_blank\" rel=\"external\">至于runtime的源码在这里</a>,要下载就下载版本最高的，感兴趣的可以看一下。</p>\n","excerpt":"","more":"<h3 id=\"Category\"><a href=\"#Category\" class=\"headerlink\" title=\"Category\"></a>Category</h3><p>Category是表示一个指向分类的结构体的指针，其定义如下：<br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_category</span></span> *Category;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_category</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">char</span> *category_name                          OBJC2_UNAVAILABLE; <span class=\"comment\">// 分类名</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">char</span> *class_name                             OBJC2_UNAVAILABLE; <span class=\"comment\">// 分类所属的类名</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method_list</span></span> *instance_methods    OBJC2_UNAVAILABLE; <span class=\"comment\">// 实例方法列表</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_method_list</span></span> *class_methods       OBJC2_UNAVAILABLE; <span class=\"comment\">// 类方法列表</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">objc_protocol_list</span></span> *protocols         OBJC2_UNAVAILABLE; <span class=\"comment\">// 分类所实现的协议列表</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Protocol\"><a href=\"#Protocol\" class=\"headerlink\" title=\"Protocol\"></a>Protocol</h3><p>Protocol定义：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_object Protocol;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回指定的协议</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">Protocol * <span class=\"title\">objc_getProtocol</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取运行时所知道的所有协议的数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">Protocol ** <span class=\"title\">objc_copyProtocolList</span> <span class=\"params\">( <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *outCount )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建新的协议实例</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">Protocol * <span class=\"title\">objc_allocateProtocol</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在运行时中注册新创建的协议</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">objc_registerProtocol</span> <span class=\"params\">( Protocol *proto )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为协议添加方法</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">protocol_addMethodDescription</span> <span class=\"params\">( Protocol *proto, SEL name, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *types, BOOL isRequiredMethod, BOOL isInstanceMethod )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 添加一个已注册的协议到协议中</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">protocol_addProtocol</span> <span class=\"params\">( Protocol *proto, Protocol *addition )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为协议添加属性</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">protocol_addProperty</span> <span class=\"params\">( Protocol *proto, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">const</span> <span class=\"keyword\">objc_property_attribute_t</span> *attributes, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> attributeCount, BOOL isRequiredProperty, BOOL isInstanceProperty )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回协议名</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * <span class=\"title\">protocol_getName</span> <span class=\"params\">( Protocol *p )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 测试两个协议是否相等</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">BOOL <span class=\"title\">protocol_isEqual</span> <span class=\"params\">( Protocol *proto, Protocol *other )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取协议中指定条件的方法的方法描述数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> objc_method_description * <span class=\"title\">protocol_copyMethodDescriptionList</span> <span class=\"params\">( Protocol *p, BOOL isRequiredMethod, BOOL isInstanceMethod, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *outCount )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取协议中指定方法的方法描述</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> objc_method_description <span class=\"title\">protocol_getMethodDescription</span> <span class=\"params\">( Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取协议中的属性列表</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">objc_property_t</span> * protocol_copyPropertyList ( Protocol *proto, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *outCount );</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取协议的指定属性</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">objc_property_t</span> protocol_getProperty ( Protocol *proto, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, BOOL isRequiredProperty, BOOL isInstanceProperty );</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取协议采用的协议</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">Protocol ** <span class=\"title\">protocol_copyProtocolList</span> <span class=\"params\">( Protocol *proto, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *outCount )</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 查看协议是否采用了另一个协议</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">BOOL <span class=\"title\">protocol_conformsToProtocol</span> <span class=\"params\">( Protocol *proto, Protocol *other )</span></span>;</div></pre></td></tr></table></figure>\n<h3 id=\"u5C5E_u6027\"><a href=\"#u5C5E_u6027\" class=\"headerlink\" title=\"属性\"></a>属性</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">const char *property_getName(objc_property_t <span class=\"keyword\">property</span><span class=\"title\"></span>) 获得<span class=\"keyword\">property</span><span class=\"title\"></span>的name</div><div class=\"line\"></div><div class=\"line\">const char *property_getAttributes(objc_property_t <span class=\"keyword\">property</span><span class=\"title\"></span>) //获得<span class=\"keyword\">property</span><span class=\"title\"></span>的atttibutes</div><div class=\"line\"></div><div class=\"line\">char *property_copyAttributeValue(objc_property_t <span class=\"keyword\">property</span><span class=\"title\"></span>, const char *attributeName) 拷贝 <span class=\"keyword\">property</span><span class=\"title\"></span>的attributeName的值</div><div class=\"line\"></div><div class=\"line\">objc_property_attribute_t *property_copyAttributeList(objc_property_t <span class=\"keyword\">property</span><span class=\"title\"></span>, unsigned int*outCount) 拷贝<span class=\"keyword\">property</span><span class=\"title\"></span>的数组 个数是outCount</div></pre></td></tr></table></figure>\n<p>其实runtime的很多函数在平时我们是用不到的，但是还是要了解一点的，以便于有时候出现的问题，自己却不知道原理，那样解决问题，有时解决了但是还不知道为什么。<a href=\"http://www.opensource.apple.com/tarballs/objc4/\">至于runtime的源码在这里</a>,要下载就下载版本最高的，感兴趣的可以看一下。</p>\n"},{"title":"微信小程序_1","date":"2016-11-04T08:39:24.000Z","_content":"1.下载微信小程序编辑器：[下载微信小程序编辑器](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=20161102)\n\n2.创建小程序应用：打开刚才下载的dmg，用微信扫面二维码登陆。点击本地小程序项目，就可以开始开发了。\n\n3.先介绍下目录结构：\n\n![F6B51227-E9DB-433B-86E3-336916B6E88B.png](http://upload-images.jianshu.io/upload_images/783986-d6c985cf217cfe83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\npages文件夹中放的都是页面，app.js相当于iOS的appdelegate,app.json就是app的配置,app.wxss就是css样式文件。\n每一个页面都单独有一个js，json，wxss文件。\n4.app.json文件分析\n```\n{//所有的页面都在这里列出来\n  \"pages\":[\n    \"pages/index/index\",\n    \"pages/logs/logs\",\n    \"pages/button/button\"\n  ],\n  \"window\":{ //app的样式\n    \"backgroundTextStyle\":\"light\",\n    \"navigationBarBackgroundColor\": \"#fff\",\n    \"navigationBarTitleText\": \"WeChat\",\n    \"navigationBarTextStyle\":\"black\"\n  }\n}\n```\n5.先做一个小demo(js，json，wxml，wxss都是新建的)\n代码：\n```\n//获取应用实例\nvar app = getApp()\nPage({\n  data:{\n    count:0,\n    text: '加载了了0次',\n    loadingstatus: false,\n  },\n  onLoad:function(options){\n    // 页面初始化 options为页面跳转所带来的参数\n    console.log(\"onLoad\");\n    \n  },\n  onReady:function(){\n    // 页面渲染完成\n    console.log(\"onReady\");\n  },\n  onShow:function(){\n    // 页面显示\n    console.log(\"onShow\");\n  },\n  onHide:function(){\n    // 页面隐藏\n    console.log(\"onHide\");\n  },\n  onUnload:function(){\n    // 页面关闭\n    console.log(\"onUnload\");\n  },\n  button1click: function(){\n   var that = this;\n   that.data.count++;\n   that.setData({ //更改属性的值\n       text:'加载了'+that.data.count+'次',\n       loadingstatus:that.data.count%2 == 0 ? true:false,\n   })\n  },\n})\n\n//这里的data就是页面的数据和函数，\nonShow,onHide,onReady,onUnload都是生命周期函数，\nbutton1Click是button的click函数\n这框架是data和页面的绑定起来的，只要改变data的值，页面就会随着变化，这点和iOS有点不同。\n\nbutton.json 文件\n{\n     \"navigationBarTitleText\": \"ButtonDemo\" 这是页面的title\n}\n\nbutton.wxml文件\n\n<view class=\"container\"> \n    <view class=\"button-wrapper\">\n    <button type=\"default\" bindtap=\"button1click\"  size=\"default\"  \n    loading=\"{{loadingstatus}}\" > 点我\n    </button>\n     </view>\n<text class=\"countClick\" id=\"text1\">{{text}}\n</text>\n</view>\n\nbutton.wxss\n\n.countClick{\n    margin-top: 100rpx;\n    width: 200rpx;\n    height: 50rpx;\n    text-align: center;\n    font-size: 1em;\n    background-color: cadetblue;\n}\n\n bindtap=\"button1click\"  绑定点击事件到buttonclick函数\n{{text}}   {{data中的属性}}\n```\n今天还看到一段比较好玩的代码：\n```\nfor (var i = 0; i < types.length; ++i) {\n  (function(type) {\n    pageObject[type] = function(e) {\n      var key = type + 'Size'\n      var changedData = {}\n      changedData[key] =\n        this.data[key] === 'default' ? 'mini' : 'default'\n      this.setData(changedData)\n    }\n  })(types[i])\n```\n可能做iOS的没看过js的人这点看不太懂，我也是新手，哪里说的不对，欢迎前端大神指正。\n大概意思是：\n```\nfor (var i = 0; i < types.length; ++i) { 循环数组\n  (function(type) { //写法js(function)(item)\n    pageObject[type] = function(e) { //添加属性函数 就是增加了几个函数。\n      var key = type + 'Size' //拼接字符串\n      var changedData = {} //字典\n      changedData[key] = //字典赋值\n        this.data[key] === 'default' ? 'mini' : 'default'\n      this.setData(changedData) //相当于iOS的kvo用hash值的方式给自己的属性赋值\n    }\n  })(types[i]) //执行函数\n```\n这一个系列的Demo都会在这个仓库哦，欢迎大神吐槽。\n**[demo地址](https://github.com/ifgyong/WeChatDemo)**\n","source":"_posts/微信小程序_01.md","raw":"title: 微信小程序_1\ndate: 2016-11-04 16:39:24\ntags: 微信小程序\ncategories: 微信小程序\n---\n1.下载微信小程序编辑器：[下载微信小程序编辑器](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=20161102)\n\n2.创建小程序应用：打开刚才下载的dmg，用微信扫面二维码登陆。点击本地小程序项目，就可以开始开发了。\n\n3.先介绍下目录结构：\n\n![F6B51227-E9DB-433B-86E3-336916B6E88B.png](http://upload-images.jianshu.io/upload_images/783986-d6c985cf217cfe83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\npages文件夹中放的都是页面，app.js相当于iOS的appdelegate,app.json就是app的配置,app.wxss就是css样式文件。\n每一个页面都单独有一个js，json，wxss文件。\n4.app.json文件分析\n```\n{//所有的页面都在这里列出来\n  \"pages\":[\n    \"pages/index/index\",\n    \"pages/logs/logs\",\n    \"pages/button/button\"\n  ],\n  \"window\":{ //app的样式\n    \"backgroundTextStyle\":\"light\",\n    \"navigationBarBackgroundColor\": \"#fff\",\n    \"navigationBarTitleText\": \"WeChat\",\n    \"navigationBarTextStyle\":\"black\"\n  }\n}\n```\n5.先做一个小demo(js，json，wxml，wxss都是新建的)\n代码：\n```\n//获取应用实例\nvar app = getApp()\nPage({\n  data:{\n    count:0,\n    text: '加载了了0次',\n    loadingstatus: false,\n  },\n  onLoad:function(options){\n    // 页面初始化 options为页面跳转所带来的参数\n    console.log(\"onLoad\");\n    \n  },\n  onReady:function(){\n    // 页面渲染完成\n    console.log(\"onReady\");\n  },\n  onShow:function(){\n    // 页面显示\n    console.log(\"onShow\");\n  },\n  onHide:function(){\n    // 页面隐藏\n    console.log(\"onHide\");\n  },\n  onUnload:function(){\n    // 页面关闭\n    console.log(\"onUnload\");\n  },\n  button1click: function(){\n   var that = this;\n   that.data.count++;\n   that.setData({ //更改属性的值\n       text:'加载了'+that.data.count+'次',\n       loadingstatus:that.data.count%2 == 0 ? true:false,\n   })\n  },\n})\n\n//这里的data就是页面的数据和函数，\nonShow,onHide,onReady,onUnload都是生命周期函数，\nbutton1Click是button的click函数\n这框架是data和页面的绑定起来的，只要改变data的值，页面就会随着变化，这点和iOS有点不同。\n\nbutton.json 文件\n{\n     \"navigationBarTitleText\": \"ButtonDemo\" 这是页面的title\n}\n\nbutton.wxml文件\n\n<view class=\"container\"> \n    <view class=\"button-wrapper\">\n    <button type=\"default\" bindtap=\"button1click\"  size=\"default\"  \n    loading=\"{{loadingstatus}}\" > 点我\n    </button>\n     </view>\n<text class=\"countClick\" id=\"text1\">{{text}}\n</text>\n</view>\n\nbutton.wxss\n\n.countClick{\n    margin-top: 100rpx;\n    width: 200rpx;\n    height: 50rpx;\n    text-align: center;\n    font-size: 1em;\n    background-color: cadetblue;\n}\n\n bindtap=\"button1click\"  绑定点击事件到buttonclick函数\n{{text}}   {{data中的属性}}\n```\n今天还看到一段比较好玩的代码：\n```\nfor (var i = 0; i < types.length; ++i) {\n  (function(type) {\n    pageObject[type] = function(e) {\n      var key = type + 'Size'\n      var changedData = {}\n      changedData[key] =\n        this.data[key] === 'default' ? 'mini' : 'default'\n      this.setData(changedData)\n    }\n  })(types[i])\n```\n可能做iOS的没看过js的人这点看不太懂，我也是新手，哪里说的不对，欢迎前端大神指正。\n大概意思是：\n```\nfor (var i = 0; i < types.length; ++i) { 循环数组\n  (function(type) { //写法js(function)(item)\n    pageObject[type] = function(e) { //添加属性函数 就是增加了几个函数。\n      var key = type + 'Size' //拼接字符串\n      var changedData = {} //字典\n      changedData[key] = //字典赋值\n        this.data[key] === 'default' ? 'mini' : 'default'\n      this.setData(changedData) //相当于iOS的kvo用hash值的方式给自己的属性赋值\n    }\n  })(types[i]) //执行函数\n```\n这一个系列的Demo都会在这个仓库哦，欢迎大神吐槽。\n**[demo地址](https://github.com/ifgyong/WeChatDemo)**\n","slug":"微信小程序_01","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj4g000knhmfvkfu5in1","content":"<p>1.下载微信小程序编辑器：<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=20161102\" target=\"_blank\" rel=\"external\">下载微信小程序编辑器</a></p>\n<p>2.创建小程序应用：打开刚才下载的dmg，用微信扫面二维码登陆。点击本地小程序项目，就可以开始开发了。</p>\n<p>3.先介绍下目录结构：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/783986-d6c985cf217cfe83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"F6B51227-E9DB-433B-86E3-336916B6E88B.png\"><br>pages文件夹中放的都是页面，app.js相当于iOS的appdelegate,app.json就是app的配置,app.wxss就是css样式文件。<br>每一个页面都单独有一个js，json，wxss文件。<br>4.app.json文件分析<br><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;//所有的页面都在这里列出来</div><div class=\"line\">  <span class=\"string\">\"pages\"</span>:[</div><div class=\"line\">    <span class=\"string\">\"pages/index/index\"</span>,</div><div class=\"line\">    <span class=\"string\">\"pages/logs/logs\"</span>,</div><div class=\"line\">    <span class=\"string\">\"pages/button/button\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"string\">\"window\"</span>:&#123; //app的样式</div><div class=\"line\">    <span class=\"string\">\"backgroundTextStyle\"</span>:<span class=\"string\">\"light\"</span>,</div><div class=\"line\">    <span class=\"string\">\"navigationBarBackgroundColor\"</span>: <span class=\"string\">\"#fff\"</span>,</div><div class=\"line\">    <span class=\"string\">\"navigationBarTitleText\"</span>: <span class=\"string\">\"WeChat\"</span>,</div><div class=\"line\">    <span class=\"string\">\"navigationBarTextStyle\"</span>:<span class=\"string\">\"black\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5.先做一个小demo(js，json，wxml，wxss都是新建的)<br>代码：<br><figure class=\"highlight openscad\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取应用实例</span></div><div class=\"line\">var app = getApp()</div><div class=\"line\">Page(&#123;</div><div class=\"line\">  data:&#123;</div><div class=\"line\">    count:<span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"built_in\">text</span>: '加载了了<span class=\"number\">0</span>次',</div><div class=\"line\">    loadingstatus: <span class=\"literal\">false</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  onLoad:<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(options)</span>&#123;</span></div><div class=\"line\">    <span class=\"comment\">// 页面初始化 options为页面跳转所带来的参数</span></div><div class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"string\">\"onLoad\"</span>);</div><div class=\"line\">    </div><div class=\"line\">  &#125;,</div><div class=\"line\">  onReady:<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span>&#123;</span></div><div class=\"line\">    <span class=\"comment\">// 页面渲染完成</span></div><div class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"string\">\"onReady\"</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  onShow:<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span>&#123;</span></div><div class=\"line\">    <span class=\"comment\">// 页面显示</span></div><div class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"string\">\"onShow\"</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  onHide:<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span>&#123;</span></div><div class=\"line\">    <span class=\"comment\">// 页面隐藏</span></div><div class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"string\">\"onHide\"</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  onUnload:<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span>&#123;</span></div><div class=\"line\">    <span class=\"comment\">// 页面关闭</span></div><div class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"string\">\"onUnload\"</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  button1click: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span>&#123;</span></div><div class=\"line\">   var that = this;</div><div class=\"line\">   that.data.count++;</div><div class=\"line\">   that.setData(&#123; <span class=\"comment\">//更改属性的值</span></div><div class=\"line\">       <span class=\"built_in\">text</span>:'加载了'+that.data.count+'次',</div><div class=\"line\">       loadingstatus:that.data.count%<span class=\"number\">2</span> == <span class=\"number\">0</span> ? <span class=\"literal\">true</span>:<span class=\"literal\">false</span>,</div><div class=\"line\">   &#125;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里的data就是页面的数据和函数，</span></div><div class=\"line\">onShow,onHide,onReady,onUnload都是生命周期函数，</div><div class=\"line\">button1Click是button的click函数</div><div class=\"line\">这框架是data和页面的绑定起来的，只要改变data的值，页面就会随着变化，这点和iOS有点不同。</div><div class=\"line\"></div><div class=\"line\">button.json 文件</div><div class=\"line\">&#123;</div><div class=\"line\">     <span class=\"string\">\"navigationBarTitleText\"</span>: <span class=\"string\">\"ButtonDemo\"</span> 这是页面的title</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">button.wxml文件</div><div class=\"line\"></div><div class=\"line\">&lt;view class=<span class=\"string\">\"container\"</span>&gt; </div><div class=\"line\">    &lt;view class=<span class=\"string\">\"button-wrapper\"</span>&gt;</div><div class=\"line\">    &lt;button type=<span class=\"string\">\"default\"</span> bindtap=<span class=\"string\">\"button1click\"</span>  size=<span class=\"string\">\"default\"</span>  </div><div class=\"line\">    loading=<span class=\"string\">\"&#123;&#123;loadingstatus&#125;&#125;\"</span> &gt; 点我</div><div class=\"line\">    &lt;/button&gt;</div><div class=\"line\">     &lt;/view&gt;</div><div class=\"line\">&lt;<span class=\"built_in\">text</span> class=<span class=\"string\">\"countClick\"</span> id=<span class=\"string\">\"text1\"</span>&gt;&#123;&#123;<span class=\"built_in\">text</span>&#125;&#125;</div><div class=\"line\">&lt;/<span class=\"built_in\">text</span>&gt;</div><div class=\"line\">&lt;/view&gt;</div><div class=\"line\"></div><div class=\"line\">button.wxss</div><div class=\"line\"></div><div class=\"line\">.countClick&#123;</div><div class=\"line\">    margin-top: <span class=\"number\">100</span>rpx;</div><div class=\"line\">    width: <span class=\"number\">200</span>rpx;</div><div class=\"line\">    height: <span class=\"number\">50</span>rpx;</div><div class=\"line\">    <span class=\"built_in\">text</span>-align: center;</div><div class=\"line\">    font-size: <span class=\"number\">1</span>em;</div><div class=\"line\">    background-<span class=\"built_in\">color</span>: cadetblue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> bindtap=<span class=\"string\">\"button1click\"</span>  绑定点击事件到buttonclick函数</div><div class=\"line\">&#123;&#123;<span class=\"built_in\">text</span>&#125;&#125;   &#123;&#123;data中的属性&#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>今天还看到一段比较好玩的代码：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; types.length; ++i) &#123;</div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"keyword\">type</span></span>) </span>&#123;</div><div class=\"line\">    pageObject[<span class=\"keyword\">type</span>] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> key = <span class=\"keyword\">type</span> + <span class=\"string\">'Size'</span></div><div class=\"line\">      <span class=\"keyword\">var</span> changedData = &#123;&#125;</div><div class=\"line\">      changedData[key] =</div><div class=\"line\">        <span class=\"keyword\">this</span>.data[key] === <span class=\"string\">'default'</span> ? <span class=\"string\">'mini'</span> : <span class=\"string\">'default'</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.setData(changedData)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)(types[i])</div></pre></td></tr></table></figure></p>\n<p>可能做iOS的没看过js的人这点看不太懂，我也是新手，哪里说的不对，欢迎前端大神指正。<br>大概意思是：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; types.length; ++i) &#123; 循环数组</div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"keyword\">type</span></span>) </span>&#123; <span class=\"comment\">//写法js(function)(item)</span></div><div class=\"line\">    pageObject[<span class=\"keyword\">type</span>] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; <span class=\"comment\">//添加属性函数 就是增加了几个函数。</span></div><div class=\"line\">      <span class=\"keyword\">var</span> key = <span class=\"keyword\">type</span> + <span class=\"string\">'Size'</span> <span class=\"comment\">//拼接字符串</span></div><div class=\"line\">      <span class=\"keyword\">var</span> changedData = &#123;&#125; <span class=\"comment\">//字典</span></div><div class=\"line\">      changedData[key] = <span class=\"comment\">//字典赋值</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.data[key] === <span class=\"string\">'default'</span> ? <span class=\"string\">'mini'</span> : <span class=\"string\">'default'</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.setData(changedData) <span class=\"comment\">//相当于iOS的kvo用hash值的方式给自己的属性赋值</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)(types[i]) <span class=\"comment\">//执行函数</span></div></pre></td></tr></table></figure></p>\n<p>这一个系列的Demo都会在这个仓库哦，欢迎大神吐槽。<br><strong><a href=\"https://github.com/ifgyong/WeChatDemo\" target=\"_blank\" rel=\"external\">demo地址</a></strong></p>\n","excerpt":"","more":"<p>1.下载微信小程序编辑器：<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=20161102\">下载微信小程序编辑器</a></p>\n<p>2.创建小程序应用：打开刚才下载的dmg，用微信扫面二维码登陆。点击本地小程序项目，就可以开始开发了。</p>\n<p>3.先介绍下目录结构：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/783986-d6c985cf217cfe83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"F6B51227-E9DB-433B-86E3-336916B6E88B.png\"><br>pages文件夹中放的都是页面，app.js相当于iOS的appdelegate,app.json就是app的配置,app.wxss就是css样式文件。<br>每一个页面都单独有一个js，json，wxss文件。<br>4.app.json文件分析<br><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;//所有的页面都在这里列出来</div><div class=\"line\">  <span class=\"string\">\"pages\"</span>:[</div><div class=\"line\">    <span class=\"string\">\"pages/index/index\"</span>,</div><div class=\"line\">    <span class=\"string\">\"pages/logs/logs\"</span>,</div><div class=\"line\">    <span class=\"string\">\"pages/button/button\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"string\">\"window\"</span>:&#123; //app的样式</div><div class=\"line\">    <span class=\"string\">\"backgroundTextStyle\"</span>:<span class=\"string\">\"light\"</span>,</div><div class=\"line\">    <span class=\"string\">\"navigationBarBackgroundColor\"</span>: <span class=\"string\">\"#fff\"</span>,</div><div class=\"line\">    <span class=\"string\">\"navigationBarTitleText\"</span>: <span class=\"string\">\"WeChat\"</span>,</div><div class=\"line\">    <span class=\"string\">\"navigationBarTextStyle\"</span>:<span class=\"string\">\"black\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5.先做一个小demo(js，json，wxml，wxss都是新建的)<br>代码：<br><figure class=\"highlight openscad\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取应用实例</span></div><div class=\"line\">var app = getApp()</div><div class=\"line\">Page(&#123;</div><div class=\"line\">  data:&#123;</div><div class=\"line\">    count:<span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"built_in\">text</span>: '加载了了<span class=\"number\">0</span>次',</div><div class=\"line\">    loadingstatus: <span class=\"literal\">false</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  onLoad:<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(options)</span>&#123;</span></div><div class=\"line\">    <span class=\"comment\">// 页面初始化 options为页面跳转所带来的参数</span></div><div class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"string\">\"onLoad\"</span>);</div><div class=\"line\">    </div><div class=\"line\">  &#125;,</div><div class=\"line\">  onReady:<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span>&#123;</span></div><div class=\"line\">    <span class=\"comment\">// 页面渲染完成</span></div><div class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"string\">\"onReady\"</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  onShow:<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span>&#123;</span></div><div class=\"line\">    <span class=\"comment\">// 页面显示</span></div><div class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"string\">\"onShow\"</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  onHide:<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span>&#123;</span></div><div class=\"line\">    <span class=\"comment\">// 页面隐藏</span></div><div class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"string\">\"onHide\"</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  onUnload:<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span>&#123;</span></div><div class=\"line\">    <span class=\"comment\">// 页面关闭</span></div><div class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"string\">\"onUnload\"</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  button1click: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span>&#123;</span></div><div class=\"line\">   var that = this;</div><div class=\"line\">   that.data.count++;</div><div class=\"line\">   that.setData(&#123; <span class=\"comment\">//更改属性的值</span></div><div class=\"line\">       <span class=\"built_in\">text</span>:'加载了'+that.data.count+'次',</div><div class=\"line\">       loadingstatus:that.data.count%<span class=\"number\">2</span> == <span class=\"number\">0</span> ? <span class=\"literal\">true</span>:<span class=\"literal\">false</span>,</div><div class=\"line\">   &#125;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里的data就是页面的数据和函数，</span></div><div class=\"line\">onShow,onHide,onReady,onUnload都是生命周期函数，</div><div class=\"line\">button1Click是button的click函数</div><div class=\"line\">这框架是data和页面的绑定起来的，只要改变data的值，页面就会随着变化，这点和iOS有点不同。</div><div class=\"line\"></div><div class=\"line\">button.json 文件</div><div class=\"line\">&#123;</div><div class=\"line\">     <span class=\"string\">\"navigationBarTitleText\"</span>: <span class=\"string\">\"ButtonDemo\"</span> 这是页面的title</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">button.wxml文件</div><div class=\"line\"></div><div class=\"line\">&lt;view class=<span class=\"string\">\"container\"</span>&gt; </div><div class=\"line\">    &lt;view class=<span class=\"string\">\"button-wrapper\"</span>&gt;</div><div class=\"line\">    &lt;button type=<span class=\"string\">\"default\"</span> bindtap=<span class=\"string\">\"button1click\"</span>  size=<span class=\"string\">\"default\"</span>  </div><div class=\"line\">    loading=<span class=\"string\">\"&#123;&#123;loadingstatus&#125;&#125;\"</span> &gt; 点我</div><div class=\"line\">    &lt;/button&gt;</div><div class=\"line\">     &lt;/view&gt;</div><div class=\"line\">&lt;<span class=\"built_in\">text</span> class=<span class=\"string\">\"countClick\"</span> id=<span class=\"string\">\"text1\"</span>&gt;&#123;&#123;<span class=\"built_in\">text</span>&#125;&#125;</div><div class=\"line\">&lt;/<span class=\"built_in\">text</span>&gt;</div><div class=\"line\">&lt;/view&gt;</div><div class=\"line\"></div><div class=\"line\">button.wxss</div><div class=\"line\"></div><div class=\"line\">.countClick&#123;</div><div class=\"line\">    margin-top: <span class=\"number\">100</span>rpx;</div><div class=\"line\">    width: <span class=\"number\">200</span>rpx;</div><div class=\"line\">    height: <span class=\"number\">50</span>rpx;</div><div class=\"line\">    <span class=\"built_in\">text</span>-align: center;</div><div class=\"line\">    font-size: <span class=\"number\">1</span>em;</div><div class=\"line\">    background-<span class=\"built_in\">color</span>: cadetblue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> bindtap=<span class=\"string\">\"button1click\"</span>  绑定点击事件到buttonclick函数</div><div class=\"line\">&#123;&#123;<span class=\"built_in\">text</span>&#125;&#125;   &#123;&#123;data中的属性&#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>今天还看到一段比较好玩的代码：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; types.length; ++i) &#123;</div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"keyword\">type</span></span>) </span>&#123;</div><div class=\"line\">    pageObject[<span class=\"keyword\">type</span>] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> key = <span class=\"keyword\">type</span> + <span class=\"string\">'Size'</span></div><div class=\"line\">      <span class=\"keyword\">var</span> changedData = &#123;&#125;</div><div class=\"line\">      changedData[key] =</div><div class=\"line\">        <span class=\"keyword\">this</span>.data[key] === <span class=\"string\">'default'</span> ? <span class=\"string\">'mini'</span> : <span class=\"string\">'default'</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.setData(changedData)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)(types[i])</div></pre></td></tr></table></figure></p>\n<p>可能做iOS的没看过js的人这点看不太懂，我也是新手，哪里说的不对，欢迎前端大神指正。<br>大概意思是：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; types.length; ++i) &#123; 循环数组</div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"keyword\">type</span></span>) </span>&#123; <span class=\"comment\">//写法js(function)(item)</span></div><div class=\"line\">    pageObject[<span class=\"keyword\">type</span>] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; <span class=\"comment\">//添加属性函数 就是增加了几个函数。</span></div><div class=\"line\">      <span class=\"keyword\">var</span> key = <span class=\"keyword\">type</span> + <span class=\"string\">'Size'</span> <span class=\"comment\">//拼接字符串</span></div><div class=\"line\">      <span class=\"keyword\">var</span> changedData = &#123;&#125; <span class=\"comment\">//字典</span></div><div class=\"line\">      changedData[key] = <span class=\"comment\">//字典赋值</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.data[key] === <span class=\"string\">'default'</span> ? <span class=\"string\">'mini'</span> : <span class=\"string\">'default'</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.setData(changedData) <span class=\"comment\">//相当于iOS的kvo用hash值的方式给自己的属性赋值</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)(types[i]) <span class=\"comment\">//执行函数</span></div></pre></td></tr></table></figure></p>\n<p>这一个系列的Demo都会在这个仓库哦，欢迎大神吐槽。<br><strong><a href=\"https://github.com/ifgyong/WeChatDemo\">demo地址</a></strong></p>\n"},{"title":"微信小程序_2","date":"2016-11-05T08:39:24.000Z","_content":"## 1.swiper的使用\n这个类似iOS的滚动视图，里边也可以放一下其他的东西。\n先讲一下属性：\n\n\n|属性名\t            |                      类型 |       \t        默认值\t|                  说明|\n| --------------- | :-----------------: |----------------------|-----------------|\n|indicator-dots|\t  Boolean\t  |       false\t        |是否显示面板指示点|\n|autoplay\t             |     Boolean\t   |     false\t      |是否自动切换|\n|current\t|Number|\t0|\t当前所在页面的 index|\n|interval|\tNumber|\t5000|\t自动切换时间间隔|\n|duration|\tNumber\t|1000\t|滑动动画时长|\n|bindchange|\tEventHandle|\t\t|current 改变时会触发 change 事件，event.detail = {current: current}\n### swiper.js文件\n```\nvar app = getApp();\nPage({\n  data:{\n    indicatordos:true,\n    autoplay:true,\n/*图片数组*/\n    imgUrls: [\n      'http://img02.tooopen.com/images/20150928/tooopen_sy_143912755726.jpg',\n      'http://img06.tooopen.com/images/20160818/tooopen_sy_175866434296.jpg',\n      'http://img06.tooopen.com/images/20160818/tooopen_sy_175833047715.jpg',\n      'http://imgsrc.baidu.com/forum/pic/item/1080fc8b87d6277f026c80b428381f30e824fc46.jpg',\n      'http://imgsrc.baidu.com/forum/pic/item/2eadcbef76094b366ac0bf0da3cc7cd98c109d84.jpg',\n      'http://img1.tgbusdata.cn/v2/thumb/jpg/MGNlNiw3MzAsNzMwLDQsMSwxLC0xLDAscms1MA==/u/olpic.tgbusdata.cn/uploads/allimg/130124/62-130124160054.jpg'\n    ],\n    vertical:true,\n  },\n  \n  displaychange:function(event){\n      console.log(event.detail.current);//输出来当前swiper-item的index\n   },\n\n  changeautodisplay:function(){\n    this.setData({\n      autoplay:!this.data.autoplay//设置是否自动播放\n  })\n  },\n  changeindicator:function(){\n    this.setData({\n  indicatordos:!this.data.indicatordos//隐藏图片那个点\n})\n  },\n  changevertical:function(){\n    this.setData({//设置水平方向\n      vertical:!this.data.vertical\n    })\n  }\n\n})\n```\n#### swiper.xml文件\n```\n<view class=\"container\">\n    <view class=\"swiperview\">\n        <swiper class=\"swiperitem\" indicator-dots=\"{{indicatordos}}\" autoplay=\"{{autoplay}}\"\n          bindchange=\"displaychange\" duration=\"1000\" interval=\"2000\"\n          vertical=\"{{vertical}}\"\n        >\n        <block wx:for=\"{{imgUrls}}\">\n            <swiper-item>\n                <image src=\"{{item}}\"></image>\n            </swiper-item>\n        </block>\n        </swiper>\n    </view>\n    <view vlass=\"bottomview\">\n        <button type=\"default\" bindtap=\"changeautodisplay\" class=\"bottomButton\">autodisplay:{{autoplay?\"YES\":\"NO\"}}</button>\n        <button type=\"default\" bindtap=\"changeindicator\" class=\"bottomButton\">indicatordots:{{autoplay?\"YES\":\"NO\"}}</button>\n        <button type=\"default\" bindtap=\"changevertical\" class=\"bottomButton\">水平:{{autoplay?\"YES\":\"NO\"}}</button>\n//这里边用了一个简单的判断语句 :{{autoplay?\"YES\":\"NO\"\n    </view>\n</view>\n```\n效果如下:\n\n![2016-11-07 17_27_56.gif](http://upload-images.jianshu.io/upload_images/783986-f75545234a080c18.gif?imageMogr2/auto-orient/strip)\n\n\n\n\n## 2.checkbox的使用\n其实就是复选框：\n\n![E935B5E6-0FC3-4A00-813C-9A259C2582AE.png](http://upload-images.jianshu.io/upload_images/783986-26e5a47de1bf531a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n下边用了text显示了当前选中的name。\n**js文件**\n```\n首先要设置data的list\nPage({\n  data:{\n     items: [\n      {name: 'USA', value: '美国'},\n      {name: 'CHN', value: '中国', checked: 'true'},\n      {name: 'BRA', value: '巴西'},\n      {name: 'JPN', value: '日本'},\n      {name: 'ENG', value: '英国'},\n      {name: 'TUR', value: '法国'},\n    ],\n    text:'',//用来显示选中的box\n  },\n  \n  onShow:function(){\n    // 页面显示 第一次进入页面统计选中的box 调用函数。\n    this.check();\n  },\n  \n  change:function(e){\n      console.log(e.detail.value);\n      var te=\"暂时没选中\";\n      if(e.detail.value.length == 0)\n        { \n        } else {\n         te = e.detail.value;\n        }\n         this.setData({\n        text:te\n      })\n      \n  },\n********遍历是否有选中的***********\n  check:function(){\n    var te=\"\";//遍历是否有选中的\n    for(var i = 0;i < this.data.items.length;i ++){\n      var item = this.data.items[i];\n      if(item.checked){ //如果选中 加到字符串中\n        te += item.value;\n      }\n    }\n      if(te.length == 0)\n        { \n         te = \"暂时没选中\" ;\n        }\n         this.setData({\n        text:te\n      })\n    }\n})\n```\n\n\n**xml文件**\n```\n<view class = \"contain\">\n    <view class=\"bd\">\n        <checkbox-group bindchange=\"change\"> //绑定事件\n            <label class=\"checkbox\" wx:for=\"{{items}}\">//循环绑定到item\n                <checkbox value=\"{{item.value}}\" checked=\"{{item.checked}}\"\n                > \n                {{item.value}}\n                </checkbox>\n            </label>\n        </checkbox-group>\n    </view>\n\n    <view class=\"checkfooter\">\n    <text >{{text}}</text>//显示选中的数据的name\n    </view>\n</view>\n```\n\n**css文件**\n```\n.bd{\n    width: 800rpx;\n    height: 500rpx;\n    margin-left: 50rpx;\n}\n.checkbox{\n   display: block;//这个要一定写的 暂时没搞懂意思  应该是一种布局方式。\n   margin: 20;\n}\n.checklabel{\n    width: 500rpx;\n    height: 200rpx;\n}\n.checkfooter{\n    margin-left: 50rpx;\n}\n```\n效果如下：\n\n![2016-11-07 17_13_36.gif](http://upload-images.jianshu.io/upload_images/783986-274e66a04bdd68da.gif?imageMogr2/auto-orient/strip)\n\n很多代码的地方都写了注释，有什么不懂或者疑问，欢迎来吐槽！\n[demo地址](https://github.com/ifgyong/WeChatDemo)\n[微信小程序_01](http://fgyong.cn/2016/11/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F_01/)\n","source":"_posts/微信小程序_02.md","raw":"title: 微信小程序_2\ndate: 2016-11-05 16:39:24\ntags: 微信小程序\ncategories: 微信小程序\n---\n## 1.swiper的使用\n这个类似iOS的滚动视图，里边也可以放一下其他的东西。\n先讲一下属性：\n\n\n|属性名\t            |                      类型 |       \t        默认值\t|                  说明|\n| --------------- | :-----------------: |----------------------|-----------------|\n|indicator-dots|\t  Boolean\t  |       false\t        |是否显示面板指示点|\n|autoplay\t             |     Boolean\t   |     false\t      |是否自动切换|\n|current\t|Number|\t0|\t当前所在页面的 index|\n|interval|\tNumber|\t5000|\t自动切换时间间隔|\n|duration|\tNumber\t|1000\t|滑动动画时长|\n|bindchange|\tEventHandle|\t\t|current 改变时会触发 change 事件，event.detail = {current: current}\n### swiper.js文件\n```\nvar app = getApp();\nPage({\n  data:{\n    indicatordos:true,\n    autoplay:true,\n/*图片数组*/\n    imgUrls: [\n      'http://img02.tooopen.com/images/20150928/tooopen_sy_143912755726.jpg',\n      'http://img06.tooopen.com/images/20160818/tooopen_sy_175866434296.jpg',\n      'http://img06.tooopen.com/images/20160818/tooopen_sy_175833047715.jpg',\n      'http://imgsrc.baidu.com/forum/pic/item/1080fc8b87d6277f026c80b428381f30e824fc46.jpg',\n      'http://imgsrc.baidu.com/forum/pic/item/2eadcbef76094b366ac0bf0da3cc7cd98c109d84.jpg',\n      'http://img1.tgbusdata.cn/v2/thumb/jpg/MGNlNiw3MzAsNzMwLDQsMSwxLC0xLDAscms1MA==/u/olpic.tgbusdata.cn/uploads/allimg/130124/62-130124160054.jpg'\n    ],\n    vertical:true,\n  },\n  \n  displaychange:function(event){\n      console.log(event.detail.current);//输出来当前swiper-item的index\n   },\n\n  changeautodisplay:function(){\n    this.setData({\n      autoplay:!this.data.autoplay//设置是否自动播放\n  })\n  },\n  changeindicator:function(){\n    this.setData({\n  indicatordos:!this.data.indicatordos//隐藏图片那个点\n})\n  },\n  changevertical:function(){\n    this.setData({//设置水平方向\n      vertical:!this.data.vertical\n    })\n  }\n\n})\n```\n#### swiper.xml文件\n```\n<view class=\"container\">\n    <view class=\"swiperview\">\n        <swiper class=\"swiperitem\" indicator-dots=\"{{indicatordos}}\" autoplay=\"{{autoplay}}\"\n          bindchange=\"displaychange\" duration=\"1000\" interval=\"2000\"\n          vertical=\"{{vertical}}\"\n        >\n        <block wx:for=\"{{imgUrls}}\">\n            <swiper-item>\n                <image src=\"{{item}}\"></image>\n            </swiper-item>\n        </block>\n        </swiper>\n    </view>\n    <view vlass=\"bottomview\">\n        <button type=\"default\" bindtap=\"changeautodisplay\" class=\"bottomButton\">autodisplay:{{autoplay?\"YES\":\"NO\"}}</button>\n        <button type=\"default\" bindtap=\"changeindicator\" class=\"bottomButton\">indicatordots:{{autoplay?\"YES\":\"NO\"}}</button>\n        <button type=\"default\" bindtap=\"changevertical\" class=\"bottomButton\">水平:{{autoplay?\"YES\":\"NO\"}}</button>\n//这里边用了一个简单的判断语句 :{{autoplay?\"YES\":\"NO\"\n    </view>\n</view>\n```\n效果如下:\n\n![2016-11-07 17_27_56.gif](http://upload-images.jianshu.io/upload_images/783986-f75545234a080c18.gif?imageMogr2/auto-orient/strip)\n\n\n\n\n## 2.checkbox的使用\n其实就是复选框：\n\n![E935B5E6-0FC3-4A00-813C-9A259C2582AE.png](http://upload-images.jianshu.io/upload_images/783986-26e5a47de1bf531a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n下边用了text显示了当前选中的name。\n**js文件**\n```\n首先要设置data的list\nPage({\n  data:{\n     items: [\n      {name: 'USA', value: '美国'},\n      {name: 'CHN', value: '中国', checked: 'true'},\n      {name: 'BRA', value: '巴西'},\n      {name: 'JPN', value: '日本'},\n      {name: 'ENG', value: '英国'},\n      {name: 'TUR', value: '法国'},\n    ],\n    text:'',//用来显示选中的box\n  },\n  \n  onShow:function(){\n    // 页面显示 第一次进入页面统计选中的box 调用函数。\n    this.check();\n  },\n  \n  change:function(e){\n      console.log(e.detail.value);\n      var te=\"暂时没选中\";\n      if(e.detail.value.length == 0)\n        { \n        } else {\n         te = e.detail.value;\n        }\n         this.setData({\n        text:te\n      })\n      \n  },\n********遍历是否有选中的***********\n  check:function(){\n    var te=\"\";//遍历是否有选中的\n    for(var i = 0;i < this.data.items.length;i ++){\n      var item = this.data.items[i];\n      if(item.checked){ //如果选中 加到字符串中\n        te += item.value;\n      }\n    }\n      if(te.length == 0)\n        { \n         te = \"暂时没选中\" ;\n        }\n         this.setData({\n        text:te\n      })\n    }\n})\n```\n\n\n**xml文件**\n```\n<view class = \"contain\">\n    <view class=\"bd\">\n        <checkbox-group bindchange=\"change\"> //绑定事件\n            <label class=\"checkbox\" wx:for=\"{{items}}\">//循环绑定到item\n                <checkbox value=\"{{item.value}}\" checked=\"{{item.checked}}\"\n                > \n                {{item.value}}\n                </checkbox>\n            </label>\n        </checkbox-group>\n    </view>\n\n    <view class=\"checkfooter\">\n    <text >{{text}}</text>//显示选中的数据的name\n    </view>\n</view>\n```\n\n**css文件**\n```\n.bd{\n    width: 800rpx;\n    height: 500rpx;\n    margin-left: 50rpx;\n}\n.checkbox{\n   display: block;//这个要一定写的 暂时没搞懂意思  应该是一种布局方式。\n   margin: 20;\n}\n.checklabel{\n    width: 500rpx;\n    height: 200rpx;\n}\n.checkfooter{\n    margin-left: 50rpx;\n}\n```\n效果如下：\n\n![2016-11-07 17_13_36.gif](http://upload-images.jianshu.io/upload_images/783986-274e66a04bdd68da.gif?imageMogr2/auto-orient/strip)\n\n很多代码的地方都写了注释，有什么不懂或者疑问，欢迎来吐槽！\n[demo地址](https://github.com/ifgyong/WeChatDemo)\n[微信小程序_01](http://fgyong.cn/2016/11/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F_01/)\n","slug":"微信小程序_02","published":1,"updated":"2017-04-11T06:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1d6dj4i000lnhmfi7t4frgi","content":"<h2 id=\"1-swiper_u7684_u4F7F_u7528\"><a href=\"#1-swiper_u7684_u4F7F_u7528\" class=\"headerlink\" title=\"1.swiper的使用\"></a>1.swiper的使用</h2><p>这个类似iOS的滚动视图，里边也可以放一下其他的东西。<br>先讲一下属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th style=\"text-align:center\">类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>indicator-dots</td>\n<td style=\"text-align:center\">Boolean</td>\n<td>false</td>\n<td>是否显示面板指示点</td>\n</tr>\n<tr>\n<td>autoplay</td>\n<td style=\"text-align:center\">Boolean</td>\n<td>false</td>\n<td>是否自动切换</td>\n</tr>\n<tr>\n<td>current</td>\n<td style=\"text-align:center\">Number</td>\n<td>0</td>\n<td>当前所在页面的 index</td>\n</tr>\n<tr>\n<td>interval</td>\n<td style=\"text-align:center\">Number</td>\n<td>5000</td>\n<td>自动切换时间间隔</td>\n</tr>\n<tr>\n<td>duration</td>\n<td style=\"text-align:center\">Number</td>\n<td>1000</td>\n<td>滑动动画时长</td>\n</tr>\n<tr>\n<td>bindchange</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td></td>\n<td>current 改变时会触发 change 事件，event.detail = {current: current}</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"swiper-js_u6587_u4EF6\"><a href=\"#swiper-js_u6587_u4EF6\" class=\"headerlink\" title=\"swiper.js文件\"></a>swiper.js文件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = getApp();</div><div class=\"line\">Page(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>:&#123;</div><div class=\"line\">    <span class=\"attr\">indicatordos</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">autoplay</span>:<span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"comment\">/*图片数组*/</span></div><div class=\"line\">    imgUrls: [</div><div class=\"line\">      <span class=\"string\">'http://img02.tooopen.com/images/20150928/tooopen_sy_143912755726.jpg'</span>,</div><div class=\"line\">      <span class=\"string\">'http://img06.tooopen.com/images/20160818/tooopen_sy_175866434296.jpg'</span>,</div><div class=\"line\">      <span class=\"string\">'http://img06.tooopen.com/images/20160818/tooopen_sy_175833047715.jpg'</span>,</div><div class=\"line\">      <span class=\"string\">'http://imgsrc.baidu.com/forum/pic/item/1080fc8b87d6277f026c80b428381f30e824fc46.jpg'</span>,</div><div class=\"line\">      <span class=\"string\">'http://imgsrc.baidu.com/forum/pic/item/2eadcbef76094b366ac0bf0da3cc7cd98c109d84.jpg'</span>,</div><div class=\"line\">      <span class=\"string\">'http://img1.tgbusdata.cn/v2/thumb/jpg/MGNlNiw3MzAsNzMwLDQsMSwxLC0xLDAscms1MA==/u/olpic.tgbusdata.cn/uploads/allimg/130124/62-130124160054.jpg'</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">vertical</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"attr\">displaychange</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(event.detail.current);<span class=\"comment\">//输出来当前swiper-item的index</span></div><div class=\"line\">   &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">changeautodisplay</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">      <span class=\"attr\">autoplay</span>:!<span class=\"keyword\">this</span>.data.autoplay<span class=\"comment\">//设置是否自动播放</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">changeindicator</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">  <span class=\"attr\">indicatordos</span>:!<span class=\"keyword\">this</span>.data.indicatordos<span class=\"comment\">//隐藏图片那个点</span></div><div class=\"line\">&#125;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">changevertical</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;<span class=\"comment\">//设置水平方向</span></div><div class=\"line\">      vertical:!<span class=\"keyword\">this</span>.data.vertical</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"swiper-xml_u6587_u4EF6\"><a href=\"#swiper-xml_u6587_u4EF6\" class=\"headerlink\" title=\"swiper.xml文件\"></a>swiper.xml文件</h4><figure class=\"highlight htmlbars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"swiperview\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">swiper</span> <span class=\"attr\">class</span>=<span class=\"string\">\"swiperitem\"</span> <span class=\"attr\">indicator-dots</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123;indicatordos&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> <span class=\"attr\">autoplay</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;autoplay&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span></span></span></div><div class=\"line\">          <span class=\"attr\">bindchange</span>=<span class=\"string\">\"displaychange\"</span> <span class=\"attr\">duration</span>=<span class=\"string\">\"1000\"</span> <span class=\"attr\">interval</span>=<span class=\"string\">\"2000\"</span></div><div class=\"line\">          <span class=\"attr\">vertical</span>=<span class=\"string\">\"</span><span class=\"template-variable\">&#123;&#123;vertical&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span></span></span></div><div class=\"line\">        &gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123;imgUrls&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">swiper-item</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">swiper-item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">swiper</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">vlass</span>=<span class=\"string\">\"bottomview\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"changeautodisplay\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bottomButton\"</span>&gt;</span>autodisplay:<span class=\"template-variable\">&#123;&#123;autoplay?<span class=\"string\">\"YES\"</span>:<span class=\"string\">\"NO\"</span>&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"changeindicator\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bottomButton\"</span>&gt;</span>indicatordots:<span class=\"template-variable\">&#123;&#123;autoplay?<span class=\"string\">\"YES\"</span>:<span class=\"string\">\"NO\"</span>&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"changevertical\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bottomButton\"</span>&gt;</span>水平:<span class=\"template-variable\">&#123;&#123;autoplay?<span class=\"string\">\"YES\"</span>:<span class=\"string\">\"NO\"</span>&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></div><div class=\"line\">//这里边用了一个简单的判断语句 :<span class=\"template-variable\">&#123;&#123;autoplay?<span class=\"string\">\"YES\"</span>:<span class=\"string\">\"NO\"</span></span></div><div class=\"line\">    &lt;/<span class=\"built_in\">view</span>&gt;</div><div class=\"line\">&lt;/<span class=\"built_in\">view</span>&gt;</div></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/783986-f75545234a080c18.gif?imageMogr2/auto-orient/strip\" alt=\"2016-11-07 17_27_56.gif\"></p>\n<h2 id=\"2-checkbox_u7684_u4F7F_u7528\"><a href=\"#2-checkbox_u7684_u4F7F_u7528\" class=\"headerlink\" title=\"2.checkbox的使用\"></a>2.checkbox的使用</h2><p>其实就是复选框：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/783986-26e5a47de1bf531a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"E935B5E6-0FC3-4A00-813C-9A259C2582AE.png\"><br>下边用了text显示了当前选中的name。<br><strong>js文件</strong><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">首先要设置data的<span class=\"function\">list</span></div><div class=\"line\"><span class=\"title\">Page</span>(<span class=\"params\">&#123;</span></div><div class=\"line\">  data:&#123;</div><div class=\"line\">     items: [</div><div class=\"line\">      &#123;name: <span class=\"string\">'USA'</span>, <span class=\"keyword\">value</span>: <span class=\"string\">'美国'</span>&#125;,</div><div class=\"line\">      &#123;name: <span class=\"string\">'CHN'</span>, <span class=\"keyword\">value</span>: <span class=\"string\">'中国'</span>, <span class=\"keyword\">checked</span>: <span class=\"string\">'true'</span>&#125;,</div><div class=\"line\">      &#123;name: <span class=\"string\">'BRA'</span>, <span class=\"keyword\">value</span>: <span class=\"string\">'巴西'</span>&#125;,</div><div class=\"line\">      &#123;name: <span class=\"string\">'JPN'</span>, <span class=\"keyword\">value</span>: <span class=\"string\">'日本'</span>&#125;,</div><div class=\"line\">      &#123;name: <span class=\"string\">'ENG'</span>, <span class=\"keyword\">value</span>: <span class=\"string\">'英国'</span>&#125;,</div><div class=\"line\">      &#123;name: <span class=\"string\">'TUR'</span>, <span class=\"keyword\">value</span>: <span class=\"string\">'法国'</span>&#125;,</div><div class=\"line\">    ],</div><div class=\"line\">    text:<span class=\"string\">''</span>,//用来显示选中的box</div><div class=\"line\">  &#125;,</div><div class=\"line\">  </div><div class=\"line\">  onShow:function()&#123;</div><div class=\"line\">    <span class=\"comment\">// 页面显示 第一次进入页面统计选中的box 调用函数。</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.check();</div><div class=\"line\">  &#125;,</div><div class=\"line\">  </div><div class=\"line\">  change:function(e)&#123;</div><div class=\"line\">      console.log(e.detail.<span class=\"keyword\">value</span>);</div><div class=\"line\">      <span class=\"keyword\">var</span> te=<span class=\"string\">\"暂时没选中\"</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span>(e.detail.<span class=\"keyword\">value</span>.length == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123; </div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         te = e.detail.<span class=\"keyword\">value</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">         <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">        text:te</div><div class=\"line\">      &#125;)</div><div class=\"line\">      </div><div class=\"line\">  &#125;,</div><div class=\"line\">********遍历是否有选中的***********</div><div class=\"line\">  check:function()&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> te=<span class=\"string\">\"\"</span>;<span class=\"comment\">//遍历是否有选中的</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"keyword\">this</span>.data.items.length;i ++)&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> item = <span class=\"keyword\">this</span>.data.items[i];</div><div class=\"line\">      <span class=\"keyword\">if</span>(item.<span class=\"keyword\">checked</span>)&#123; <span class=\"comment\">//如果选中 加到字符串中</span></div><div class=\"line\">        te += item.<span class=\"keyword\">value</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span>(te.length == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123; </div><div class=\"line\">         te = <span class=\"string\">\"暂时没选中\"</span> ;</div><div class=\"line\">        &#125;</div><div class=\"line\">         <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">        text:te</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><strong>xml文件</strong><br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span> = <span class=\"string\">\"contain\"</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bd\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">checkbox-group</span> <span class=\"attr\">bindchange</span>=<span class=\"string\">\"change\"</span>&gt;</span> //绑定事件</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123;items&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span>//循环绑定到item</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">checkbox</span> <span class=\"attr\">value</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123;item.value&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> <span class=\"attr\">checked</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;item.checked&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span></span></span></div><div class=\"line\">                &gt; </div><div class=\"line\">                <span class=\"template-variable\">&#123;&#123;item.value&#125;&#125;</span><span class=\"xml\"></span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">checkbox</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">checkbox-group</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"checkfooter\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">text</span> &gt;</span><span class=\"template-variable\">&#123;&#123;text&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span>//显示选中的数据的name</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>css文件</strong><br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.bd</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">800</span>rpx;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">500</span>rpx;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">50</span>rpx;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.checkbox</span>&#123;</div><div class=\"line\">   <span class=\"attribute\">display</span>: block;<span class=\"comment\">//这个要一定写的 暂时没搞懂意思  应该是一种布局方式。</span></div><div class=\"line\">   <span class=\"attribute\">margin</span>: <span class=\"number\">20</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.checklabel</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">500</span>rpx;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200</span>rpx;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.checkfooter</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">50</span>rpx;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>效果如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/783986-274e66a04bdd68da.gif?imageMogr2/auto-orient/strip\" alt=\"2016-11-07 17_13_36.gif\"></p>\n<p>很多代码的地方都写了注释，有什么不懂或者疑问，欢迎来吐槽！<br><a href=\"https://github.com/ifgyong/WeChatDemo\" target=\"_blank\" rel=\"external\">demo地址</a><br><a href=\"http://fgyong.cn/2016/11/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F_01/\">微信小程序_01</a></p>\n","excerpt":"","more":"<h2 id=\"1-swiper_u7684_u4F7F_u7528\"><a href=\"#1-swiper_u7684_u4F7F_u7528\" class=\"headerlink\" title=\"1.swiper的使用\"></a>1.swiper的使用</h2><p>这个类似iOS的滚动视图，里边也可以放一下其他的东西。<br>先讲一下属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th style=\"text-align:center\">类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>indicator-dots</td>\n<td style=\"text-align:center\">Boolean</td>\n<td>false</td>\n<td>是否显示面板指示点</td>\n</tr>\n<tr>\n<td>autoplay</td>\n<td style=\"text-align:center\">Boolean</td>\n<td>false</td>\n<td>是否自动切换</td>\n</tr>\n<tr>\n<td>current</td>\n<td style=\"text-align:center\">Number</td>\n<td>0</td>\n<td>当前所在页面的 index</td>\n</tr>\n<tr>\n<td>interval</td>\n<td style=\"text-align:center\">Number</td>\n<td>5000</td>\n<td>自动切换时间间隔</td>\n</tr>\n<tr>\n<td>duration</td>\n<td style=\"text-align:center\">Number</td>\n<td>1000</td>\n<td>滑动动画时长</td>\n</tr>\n<tr>\n<td>bindchange</td>\n<td style=\"text-align:center\">EventHandle</td>\n<td></td>\n<td>current 改变时会触发 change 事件，event.detail = {current: current}</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"swiper-js_u6587_u4EF6\"><a href=\"#swiper-js_u6587_u4EF6\" class=\"headerlink\" title=\"swiper.js文件\"></a>swiper.js文件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = getApp();</div><div class=\"line\">Page(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>:&#123;</div><div class=\"line\">    <span class=\"attr\">indicatordos</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">autoplay</span>:<span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"comment\">/*图片数组*/</span></div><div class=\"line\">    imgUrls: [</div><div class=\"line\">      <span class=\"string\">'http://img02.tooopen.com/images/20150928/tooopen_sy_143912755726.jpg'</span>,</div><div class=\"line\">      <span class=\"string\">'http://img06.tooopen.com/images/20160818/tooopen_sy_175866434296.jpg'</span>,</div><div class=\"line\">      <span class=\"string\">'http://img06.tooopen.com/images/20160818/tooopen_sy_175833047715.jpg'</span>,</div><div class=\"line\">      <span class=\"string\">'http://imgsrc.baidu.com/forum/pic/item/1080fc8b87d6277f026c80b428381f30e824fc46.jpg'</span>,</div><div class=\"line\">      <span class=\"string\">'http://imgsrc.baidu.com/forum/pic/item/2eadcbef76094b366ac0bf0da3cc7cd98c109d84.jpg'</span>,</div><div class=\"line\">      <span class=\"string\">'http://img1.tgbusdata.cn/v2/thumb/jpg/MGNlNiw3MzAsNzMwLDQsMSwxLC0xLDAscms1MA==/u/olpic.tgbusdata.cn/uploads/allimg/130124/62-130124160054.jpg'</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">vertical</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"attr\">displaychange</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(event.detail.current);<span class=\"comment\">//输出来当前swiper-item的index</span></div><div class=\"line\">   &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">changeautodisplay</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">      <span class=\"attr\">autoplay</span>:!<span class=\"keyword\">this</span>.data.autoplay<span class=\"comment\">//设置是否自动播放</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">changeindicator</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">  <span class=\"attr\">indicatordos</span>:!<span class=\"keyword\">this</span>.data.indicatordos<span class=\"comment\">//隐藏图片那个点</span></div><div class=\"line\">&#125;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">changevertical</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;<span class=\"comment\">//设置水平方向</span></div><div class=\"line\">      vertical:!<span class=\"keyword\">this</span>.data.vertical</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"swiper-xml_u6587_u4EF6\"><a href=\"#swiper-xml_u6587_u4EF6\" class=\"headerlink\" title=\"swiper.xml文件\"></a>swiper.xml文件</h4><figure class=\"highlight htmlbars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"swiperview\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">swiper</span> <span class=\"attr\">class</span>=<span class=\"string\">\"swiperitem\"</span> <span class=\"attr\">indicator-dots</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;indicatordos&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> <span class=\"attr\">autoplay</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;autoplay&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span></div><div class=\"line\">          <span class=\"attr\">bindchange</span>=<span class=\"string\">\"displaychange\"</span> <span class=\"attr\">duration</span>=<span class=\"string\">\"1000\"</span> <span class=\"attr\">interval</span>=<span class=\"string\">\"2000\"</span></div><div class=\"line\">          <span class=\"attr\">vertical</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;vertical&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span></div><div class=\"line\">        &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;imgUrls&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">swiper-item</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">swiper-item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">swiper</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">vlass</span>=<span class=\"string\">\"bottomview\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"changeautodisplay\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bottomButton\"</span>&gt;</span>autodisplay:</span><span class=\"template-variable\">&#123;&#123;autoplay?<span class=\"string\">\"YES\"</span>:<span class=\"string\">\"NO\"</span>&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"changeindicator\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bottomButton\"</span>&gt;</span>indicatordots:</span><span class=\"template-variable\">&#123;&#123;autoplay?<span class=\"string\">\"YES\"</span>:<span class=\"string\">\"NO\"</span>&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"changevertical\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bottomButton\"</span>&gt;</span>水平:</span><span class=\"template-variable\">&#123;&#123;autoplay?<span class=\"string\">\"YES\"</span>:<span class=\"string\">\"NO\"</span>&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">//这里边用了一个简单的判断语句 :</span><span class=\"template-variable\">&#123;&#123;autoplay?<span class=\"string\">\"YES\"</span>:<span class=\"string\">\"NO\"</span></div><div class=\"line\">    &lt;/<span class=\"built_in\">view</span>&gt;</div><div class=\"line\">&lt;/<span class=\"built_in\">view</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/783986-f75545234a080c18.gif?imageMogr2/auto-orient/strip\" alt=\"2016-11-07 17_27_56.gif\"></p>\n<h2 id=\"2-checkbox_u7684_u4F7F_u7528\"><a href=\"#2-checkbox_u7684_u4F7F_u7528\" class=\"headerlink\" title=\"2.checkbox的使用\"></a>2.checkbox的使用</h2><p>其实就是复选框：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/783986-26e5a47de1bf531a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"E935B5E6-0FC3-4A00-813C-9A259C2582AE.png\"><br>下边用了text显示了当前选中的name。<br><strong>js文件</strong><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">首先要设置data的<span class=\"function\">list</div><div class=\"line\"><span class=\"title\">Page</span>(<span class=\"params\">&#123;</div><div class=\"line\">  data:&#123;</div><div class=\"line\">     items: [</div><div class=\"line\">      &#123;name: <span class=\"string\">'USA'</span>, <span class=\"keyword\">value</span>: <span class=\"string\">'美国'</span>&#125;,</div><div class=\"line\">      &#123;name: <span class=\"string\">'CHN'</span>, <span class=\"keyword\">value</span>: <span class=\"string\">'中国'</span>, <span class=\"keyword\">checked</span>: <span class=\"string\">'true'</span>&#125;,</div><div class=\"line\">      &#123;name: <span class=\"string\">'BRA'</span>, <span class=\"keyword\">value</span>: <span class=\"string\">'巴西'</span>&#125;,</div><div class=\"line\">      &#123;name: <span class=\"string\">'JPN'</span>, <span class=\"keyword\">value</span>: <span class=\"string\">'日本'</span>&#125;,</div><div class=\"line\">      &#123;name: <span class=\"string\">'ENG'</span>, <span class=\"keyword\">value</span>: <span class=\"string\">'英国'</span>&#125;,</div><div class=\"line\">      &#123;name: <span class=\"string\">'TUR'</span>, <span class=\"keyword\">value</span>: <span class=\"string\">'法国'</span>&#125;,</div><div class=\"line\">    ],</div><div class=\"line\">    text:<span class=\"string\">''</span>,//用来显示选中的box</div><div class=\"line\">  &#125;,</div><div class=\"line\">  </div><div class=\"line\">  onShow:function(</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 页面显示 第一次进入页面统计选中的box 调用函数。</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.check();</div><div class=\"line\">  &#125;,</div><div class=\"line\">  </div><div class=\"line\">  change:function(e)&#123;</div><div class=\"line\">      console.log(e.detail.<span class=\"keyword\">value</span>);</div><div class=\"line\">      <span class=\"keyword\">var</span> te=<span class=\"string\">\"暂时没选中\"</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span>(e.detail.<span class=\"keyword\">value</span>.length == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123; </div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         te = e.detail.<span class=\"keyword\">value</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">         <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">        text:te</div><div class=\"line\">      &#125;)</div><div class=\"line\">      </div><div class=\"line\">  &#125;,</div><div class=\"line\">********遍历是否有选中的***********</div><div class=\"line\">  check:function()&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> te=<span class=\"string\">\"\"</span>;<span class=\"comment\">//遍历是否有选中的</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"keyword\">this</span>.data.items.length;i ++)&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> item = <span class=\"keyword\">this</span>.data.items[i];</div><div class=\"line\">      <span class=\"keyword\">if</span>(item.<span class=\"keyword\">checked</span>)&#123; <span class=\"comment\">//如果选中 加到字符串中</span></div><div class=\"line\">        te += item.<span class=\"keyword\">value</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span>(te.length == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123; </div><div class=\"line\">         te = <span class=\"string\">\"暂时没选中\"</span> ;</div><div class=\"line\">        &#125;</div><div class=\"line\">         <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">        text:te</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><strong>xml文件</strong><br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span> = <span class=\"string\">\"contain\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bd\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">checkbox-group</span> <span class=\"attr\">bindchange</span>=<span class=\"string\">\"change\"</span>&gt;</span> //绑定事件</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;items&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span>//循环绑定到item</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">checkbox</span> <span class=\"attr\">value</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;item.value&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> <span class=\"attr\">checked</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;item.checked&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span></div><div class=\"line\">                &gt;</span> </div><div class=\"line\">                </span><span class=\"template-variable\">&#123;&#123;item.value&#125;&#125;</span><span class=\"xml\"></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">checkbox</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">checkbox-group</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"checkfooter\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">text</span> &gt;</span></span><span class=\"template-variable\">&#123;&#123;text&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span>//显示选中的数据的name</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p><strong>css文件</strong><br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.bd</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">800</span>rpx;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">500</span>rpx;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">50</span>rpx;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.checkbox</span>&#123;</div><div class=\"line\">   <span class=\"attribute\">display</span>: block;<span class=\"comment\">//这个要一定写的 暂时没搞懂意思  应该是一种布局方式。</span></div><div class=\"line\">   <span class=\"attribute\">margin</span>: <span class=\"number\">20</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.checklabel</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">500</span>rpx;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200</span>rpx;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.checkfooter</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">50</span>rpx;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>效果如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/783986-274e66a04bdd68da.gif?imageMogr2/auto-orient/strip\" alt=\"2016-11-07 17_13_36.gif\"></p>\n<p>很多代码的地方都写了注释，有什么不懂或者疑问，欢迎来吐槽！<br><a href=\"https://github.com/ifgyong/WeChatDemo\">demo地址</a><br><a href=\"http://fgyong.cn/2016/11/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F_01/\">微信小程序_01</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1d6dj3n0001nhmf2mnmqd59","category_id":"cj1d6dj5z000mnhmffn32tzhf","_id":"cj1d6dj7h0020nhmf0d6tcchc"},{"post_id":"cj1d6dj3s0003nhmfimutt97n","category_id":"cj1d6dj6h000onhmfq4hm7oo1","_id":"cj1d6dj7i0022nhmf3hv9v22e"},{"post_id":"cj1d6dj3v0005nhmfl1ub2enm","category_id":"cj1d6dj6i000qnhmfwfv0ey75","_id":"cj1d6dj7i0024nhmfqn2qp0y9"},{"post_id":"cj1d6dj3w0006nhmfpvw4b3ax","category_id":"cj1d6dj6i000qnhmfwfv0ey75","_id":"cj1d6dj7i0026nhmfishzfxmb"},{"post_id":"cj1d6dj3y0007nhmf2bc1f8t0","category_id":"cj1d6dj6i000qnhmfwfv0ey75","_id":"cj1d6dj7i0028nhmfanyyvsw1"},{"post_id":"cj1d6dj400008nhmfre3srvbt","category_id":"cj1d6dj6h000onhmfq4hm7oo1","_id":"cj1d6dj7i002anhmfhb6fminr"},{"post_id":"cj1d6dj44000anhmf2wiy1n4q","category_id":"cj1d6dj6h000onhmfq4hm7oo1","_id":"cj1d6dj7i002cnhmfu9ftdx1r"},{"post_id":"cj1d6dj45000bnhmfma5c9l91","category_id":"cj1d6dj6h000onhmfq4hm7oo1","_id":"cj1d6dj7j002enhmf7jrltuos"},{"post_id":"cj1d6dj46000cnhmf57ot75tm","category_id":"cj1d6dj6h000onhmfq4hm7oo1","_id":"cj1d6dj7j002gnhmfon5vzeow"},{"post_id":"cj1d6dj47000dnhmfq5thgaml","category_id":"cj1d6dj6h000onhmfq4hm7oo1","_id":"cj1d6dj7j002inhmfue2fimrt"},{"post_id":"cj1d6dj48000enhmf8mzkljat","category_id":"cj1d6dj6h000onhmfq4hm7oo1","_id":"cj1d6dj7j002knhmfyk2gh9zv"},{"post_id":"cj1d6dj49000fnhmfzjstki1d","category_id":"cj1d6dj6h000onhmfq4hm7oo1","_id":"cj1d6dj7j002mnhmf2slilk50"},{"post_id":"cj1d6dj4a000gnhmfvhkecqxz","category_id":"cj1d6dj6h000onhmfq4hm7oo1","_id":"cj1d6dj7j002onhmf39ukl52h"},{"post_id":"cj1d6dj4b000hnhmfuuijichy","category_id":"cj1d6dj6h000onhmfq4hm7oo1","_id":"cj1d6dj7j002qnhmf470xb1sy"},{"post_id":"cj1d6dj4d000inhmf3xaxudks","category_id":"cj1d6dj6h000onhmfq4hm7oo1","_id":"cj1d6dj7j002snhmf8pv6fus8"},{"post_id":"cj1d6dj4f000jnhmfo1ih8dj6","category_id":"cj1d6dj6h000onhmfq4hm7oo1","_id":"cj1d6dj7k002unhmfqh0ofc4u"},{"post_id":"cj1d6dj4g000knhmfvkfu5in1","category_id":"cj1d6dj6z001inhmfr358herf","_id":"cj1d6dj7k002wnhmfzipb9yq8"},{"post_id":"cj1d6dj4i000lnhmfi7t4frgi","category_id":"cj1d6dj6z001inhmfr358herf","_id":"cj1d6dj7k002ynhmf9uvv5d83"}],"PostTag":[{"post_id":"cj1d6dj3n0001nhmf2mnmqd59","tag_id":"cj1d6dj6g000nnhmfvhqzwhte","_id":"cj1d6dj7h001znhmflduwf558"},{"post_id":"cj1d6dj3s0003nhmfimutt97n","tag_id":"cj1d6dj6h000pnhmf2lcxlti3","_id":"cj1d6dj7i0021nhmfic0e38b4"},{"post_id":"cj1d6dj3v0005nhmfl1ub2enm","tag_id":"cj1d6dj6i000rnhmfj1iz0byu","_id":"cj1d6dj7i0023nhmfj731fu4y"},{"post_id":"cj1d6dj3v0005nhmfl1ub2enm","tag_id":"cj1d6dj6j000tnhmfotqelfwe","_id":"cj1d6dj7i0025nhmf7mnl02c4"},{"post_id":"cj1d6dj3w0006nhmfpvw4b3ax","tag_id":"cj1d6dj6i000rnhmfj1iz0byu","_id":"cj1d6dj7i0027nhmf5nwtubvw"},{"post_id":"cj1d6dj3w0006nhmfpvw4b3ax","tag_id":"cj1d6dj6j000tnhmfotqelfwe","_id":"cj1d6dj7i0029nhmfn8aemeb5"},{"post_id":"cj1d6dj3y0007nhmf2bc1f8t0","tag_id":"cj1d6dj6i000rnhmfj1iz0byu","_id":"cj1d6dj7i002bnhmfyllowgbh"},{"post_id":"cj1d6dj400008nhmfre3srvbt","tag_id":"cj1d6dj6h000pnhmf2lcxlti3","_id":"cj1d6dj7i002dnhmfuei6oacl"},{"post_id":"cj1d6dj430009nhmfhqxz7k0c","tag_id":"cj1d6dj6h000pnhmf2lcxlti3","_id":"cj1d6dj7j002fnhmfyjvz0t34"},{"post_id":"cj1d6dj44000anhmf2wiy1n4q","tag_id":"cj1d6dj6s0015nhmfkga44kja","_id":"cj1d6dj7j002hnhmfm2u408lq"},{"post_id":"cj1d6dj45000bnhmfma5c9l91","tag_id":"cj1d6dj6h000pnhmf2lcxlti3","_id":"cj1d6dj7j002jnhmfw2djrfby"},{"post_id":"cj1d6dj45000bnhmfma5c9l91","tag_id":"cj1d6dj6v0019nhmfkpn9frny","_id":"cj1d6dj7j002lnhmfhimdazew"},{"post_id":"cj1d6dj46000cnhmf57ot75tm","tag_id":"cj1d6dj6h000pnhmf2lcxlti3","_id":"cj1d6dj7j002nnhmfhx0ymefg"},{"post_id":"cj1d6dj46000cnhmf57ot75tm","tag_id":"cj1d6dj6v0019nhmfkpn9frny","_id":"cj1d6dj7j002pnhmfv2gcw8ai"},{"post_id":"cj1d6dj47000dnhmfq5thgaml","tag_id":"cj1d6dj6h000pnhmf2lcxlti3","_id":"cj1d6dj7j002rnhmf9j919svs"},{"post_id":"cj1d6dj47000dnhmfq5thgaml","tag_id":"cj1d6dj6v0019nhmfkpn9frny","_id":"cj1d6dj7j002tnhmfqlgk4w0k"},{"post_id":"cj1d6dj48000enhmf8mzkljat","tag_id":"cj1d6dj6h000pnhmf2lcxlti3","_id":"cj1d6dj7k002vnhmffudj0fg0"},{"post_id":"cj1d6dj48000enhmf8mzkljat","tag_id":"cj1d6dj71001lnhmfbpzoq3dh","_id":"cj1d6dj7k002xnhmfvi3tp9g3"},{"post_id":"cj1d6dj48000enhmf8mzkljat","tag_id":"cj1d6dj71001mnhmfnc44obyy","_id":"cj1d6dj7k002znhmfyi0fp6aw"},{"post_id":"cj1d6dj49000fnhmfzjstki1d","tag_id":"cj1d6dj6h000pnhmf2lcxlti3","_id":"cj1d6dj7k0030nhmfjx25wayj"},{"post_id":"cj1d6dj49000fnhmfzjstki1d","tag_id":"cj1d6dj71001onhmf7jmbrahq","_id":"cj1d6dj7l0031nhmf66wn2uaz"},{"post_id":"cj1d6dj4a000gnhmfvhkecqxz","tag_id":"cj1d6dj6h000pnhmf2lcxlti3","_id":"cj1d6dj7l0032nhmf7zzqja2e"},{"post_id":"cj1d6dj4a000gnhmfvhkecqxz","tag_id":"cj1d6dj6s0015nhmfkga44kja","_id":"cj1d6dj7l0033nhmft0uq6a89"},{"post_id":"cj1d6dj4b000hnhmfuuijichy","tag_id":"cj1d6dj6h000pnhmf2lcxlti3","_id":"cj1d6dj7l0034nhmf9u9ih46w"},{"post_id":"cj1d6dj4b000hnhmfuuijichy","tag_id":"cj1d6dj6s0015nhmfkga44kja","_id":"cj1d6dj7l0035nhmfew1lf9r8"},{"post_id":"cj1d6dj4d000inhmf3xaxudks","tag_id":"cj1d6dj6h000pnhmf2lcxlti3","_id":"cj1d6dj7l0036nhmfc5lz5oon"},{"post_id":"cj1d6dj4d000inhmf3xaxudks","tag_id":"cj1d6dj6s0015nhmfkga44kja","_id":"cj1d6dj7l0037nhmfjjxp2kjb"},{"post_id":"cj1d6dj4f000jnhmfo1ih8dj6","tag_id":"cj1d6dj6h000pnhmf2lcxlti3","_id":"cj1d6dj7l0038nhmff0hl7pie"},{"post_id":"cj1d6dj4f000jnhmfo1ih8dj6","tag_id":"cj1d6dj6s0015nhmfkga44kja","_id":"cj1d6dj7l0039nhmfteyz8ryz"},{"post_id":"cj1d6dj4g000knhmfvkfu5in1","tag_id":"cj1d6dj76001xnhmf7m4ek1jh","_id":"cj1d6dj7l003anhmf0zxioe9o"},{"post_id":"cj1d6dj4i000lnhmfi7t4frgi","tag_id":"cj1d6dj76001xnhmf7m4ek1jh","_id":"cj1d6dj7l003bnhmfghhwowh5"}],"Tag":[{"name":"Git","_id":"cj1d6dj6g000nnhmfvhqzwhte"},{"name":"iOS","_id":"cj1d6dj6h000pnhmf2lcxlti3"},{"name":"建站","_id":"cj1d6dj6i000rnhmfj1iz0byu"},{"name":"hexo","_id":"cj1d6dj6j000tnhmfotqelfwe"},{"name":"iOS高级开发","_id":"cj1d6dj6s0015nhmfkga44kja"},{"name":"iOS高级","_id":"cj1d6dj6v0019nhmfkpn9frny"},{"name":"Shell","_id":"cj1d6dj71001lnhmfbpzoq3dh"},{"name":"iOS自动化打包","_id":"cj1d6dj71001mnhmfnc44obyy"},{"name":"疑难杂症","_id":"cj1d6dj71001onhmf7jmbrahq"},{"name":"微信小程序","_id":"cj1d6dj76001xnhmf7m4ek1jh"}]}}